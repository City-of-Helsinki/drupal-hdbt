"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhdbt"] = self["webpackChunkhdbt"] || []).push([["globalMenu"],{

/***/ "./src/js/nav-global/menu.js":
/*!***********************************!*\
  !*** ./src/js/nav-global/menu.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.mjs\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst frontpageTranslation = Drupal.t('Frontpage', {}, {\n  context: 'Global navigation mobile menu top level'\n});\nconst openSubMenuTranslation = Drupal.t('Open submenu:', {}, {\n  context: 'Mobile navigation menu prefix'\n});\nconst openParentMenuTranslation = Drupal.t('Open parent menu:', {}, {\n  context: 'Mobile navigation menu prefix'\n});\n\n// eslint-disable-next-line no-extend-native\nArray.prototype.findRecursive = function findRecursivelyFromArray(predicate, childrenPropertyName) {\n  if (!childrenPropertyName) {\n    throw new Error('findRecursive requires parameter `childrenPropertyName`');\n  }\n  let array = [];\n  array = this;\n  const initialFind = array.find(predicate);\n  const elementsWithChildren = array.filter(x => x[childrenPropertyName]);\n  if (initialFind) {\n    return initialFind;\n  }\n  if (elementsWithChildren.length) {\n    const childElements = [];\n    elementsWithChildren.forEach(x => {\n      childElements.push(...x[childrenPropertyName]);\n    });\n    return childElements.findRecursive(predicate, childrenPropertyName);\n  }\n  return undefined;\n};\n\n/**\n * Generic object helpers for template contexts\n */\n\n/**\n * Check if current given menu item has items\n * @return {boolean} current object has sub_tree with items in it.\n */\nfunction button() {\n  // return this.hasItems\n  return this.sub_tree?.length > 0;\n}\n\n/**\n * Check if  given menu item url pathname matches current browser pathname\n * @return {boolean} current object has url and url pathname matches current location pathname\n */\nfunction isCurrentPath() {\n  try {\n    return !this.external && this.url && new URL(this.url).pathname === window.location.pathname;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn('Invalid url given to \"isCurrentPath\"-helper', this.url);\n  }\n  return false;\n}\n\n/**\n * Convert null `active` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have active set and trueish\n */\nfunction isActive() {\n  return !!this.active;\n}\n\n/**\n * Convert null `inPath` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have inPath set and trueish\n */\nfunction isInPath() {\n  return !!this.inPath;\n}\n\n/**\n * Convert null `is_injected` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have is_injected set and trueish\n */\nfunction isInjected() {\n  return !!this.is_injected;\n}\n\n/** *\n * Convert attributes to to template-friendly object\n * @return {object}  {external:bool, protocol:bool}\n */\nfunction externalLinkAttributes() {\n  return {\n    external: this.attributes['data-external'] || this.external || false,\n    protocol: this.attributes['data-protocol'] || false\n  };\n}\n\n/**\n * Convert null `attributes.lang` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have attributes.lang set and trueish\n */\nfunction hasLang() {\n  return !!this.attributes?.lang;\n}\n\n/**\n * Determinine icon type and text for external link\n * @return {object} {class: list of related CSS classes, text: translated description text }\n */\nfunction externalLinkIcon() {\n  if (!this.external) {\n    return false;\n  }\n  return externalLinkIcon.ICONS[this.attributes['data-protocol']] || externalLinkIcon.ICONS.external;\n}\nexternalLinkIcon.ICONS = {\n  mailto: {\n    class: 'link__type link__type--mailto',\n    text: Drupal.t('Link opens default mail program', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link opens default mail program.'\n    })\n  },\n  tel: {\n    class: 'link__type link__type--tel',\n    text: Drupal.t('Link starts a phone call', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link starts a phone call.'\n    })\n  },\n  external: {\n    class: 'link__type link__type--external',\n    text: Drupal.t('Link leads to external service', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link leads to an external service.'\n    })\n  }\n};\n\n/**\n * Panel main object.\n */\n\nconst MobilePanel = {\n  compileTemplates() {\n    this.templates = {\n      panel: `\n  {{#panels}}\n    <section class=\"{{panel_class}}\">\n      <div class=\"mmenu__panel-body\">\n        {{#back}}\n          <button class=\"mmenu__back\">\n            <span class=\"visually-hidden\">{{openParentMenuTranslation}}</span>\n            <span class=\"mmenu__back-wrapper\">{{back}}</span>\n          </button>\n        {{/back}}\n        <a href=\"{{url}}\" class=\"mmenu__title-link{{#isInPath}} mmenu__title-link--in-path{{/isInPath}}\"{{#isActive}} aria-current=\"page\"{{/isActive}}\n\n        {{#externalLinkAttributes.external}}\n          data-external=\"true\"\n        {{/externalLinkAttributes.external}}\n\n        {{#externalLinkAttributes.protocol}}\n          data-protocol=\"{{externalLinkAttributes.protocol}}\"\n        {{/externalLinkAttributes.protocol}}\n\n        ><span class=\"mmenu__link__text\"\n\n        {{#hasLang}}\n          lang=\"{{attributes.lang}}\"\n        {{/hasLang}}\n\n        >{{name}}</span>{{#externalLinkIcon}} <span class=\"{{class}}\"></span><span class=\"visually-hidden\">({{ text }})</span>{{/externalLinkIcon}}</a>\n        {{>sub_tree}}\n      </div>\n      ${document.querySelector('.js-mmenu__footer')?.outerHTML}\n    </section>\n  {{/panels}}\n\n  {{^panels}}\n  <div class=\"mmenu__loading\">\n    <div class=\"hds-loading-spinner\">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n  {{/panels}}\n  `,\n      list: `\n    <ul class=\"mmenu__items\">\n      {{#sub_tree}}\n        <li class=\"mmenu__item\">\n          <a href=\"{{url}}\" class=\"mmenu__item-link{{#isInPath}} mmenu__item-link--in-path{{/isInPath}}{{#isInjected}} mmenu__item-link--injected{{/isInjected}}\"{{#isActive}} aria-current=\"page\"{{/isActive}}\n          {{#externalLinkAttributes.external}}\n            data-external=\"true\"\n          {{/externalLinkAttributes.external}}\n          {{#externalLinkAttributes.protocol}}\n            data-protocol={{externalLinkAttributes.protocol}}\n          {{/externalLinkAttributes.protocol}}\n\n          ><span class=\"mmenu__link__text\"\n\n          {{#hasLang}}\n            lang=\"{{attributes.lang}}\"\n          {{/hasLang}}\n\n            >{{name}}</span>{{#externalLinkIcon}} <span class=\"{{class}}\"></span><span class=\"visually-hidden\">({{ text }})</span>{{/externalLinkIcon}}\n          </a>\n          {{#button}}\n            <button class=\"mmenu__forward \" value={{id}}><span class=\"visually-hidden\">{{openSubMenuTranslation}} {{name}}</span></button>\n          {{/button}}\n        </li>\n      {{/sub_tree}}\n    </ul>\n   `\n    };\n  },\n  menu: null,\n  templates: null,\n  SCROLL_TRESHOLD: 100,\n  size: 10,\n  // Maximum assumed depth of tree. Used for checking if going up is allowed\n  running: false,\n  data: null,\n  currentIndex: 0,\n  cacheKey: 'hdbt-mobile-menu',\n  enableCache: false,\n  selectors: {\n    container: '#mmenu',\n    rootId: 'mmenu__panels',\n    forward: 'mmenu__forward',\n    back: 'mmenu__back'\n  },\n  getAPIUrl() {\n    const url = new URL(drupalSettings?.helfi_navigation?.links?.api);\n    url.searchParams.set('_format', 'json');\n    url.searchParams.set('max-depth', drupalSettings?.menu_depth);\n    return url.toString();\n  },\n  getRoot() {\n    return document.getElementById(this.selectors.rootId);\n  },\n  sortPanelsByPath() {\n    const panels = [];\n    const allItems = this.data;\n    const currentItem = allItems.findRecursive(item => isCurrentPath.call(item), 'sub_tree');\n    let parentIndex = currentItem?.sub_tree?.length ? currentItem.id : currentItem?.parentId;\n    while (parentIndex) {\n      const found = allItems.findRecursive(\n      // sub_tree is api  data key.\n      // eslint-disable-next-line no-loop-func, camelcase,\n      ({\n        id,\n        url,\n        name,\n        sub_tree,\n        parentId,\n        inPath,\n        active\n      }) => {\n        if (id === parentIndex) {\n          // eslint-disable-next-line camelcase\n          panels.push({\n            sub_tree,\n            name,\n            url,\n            parentId,\n            inPath,\n            active\n          });\n          // Set new parent id. If this is empty, it will stop the while-loop.\n          parentIndex = parentId;\n          return true;\n        }\n        return false;\n      }, 'sub_tree');\n      if (!found) {\n        // Stop while-loop.\n        parentIndex = undefined;\n      }\n    }\n    panels.push({\n      sub_tree: allItems,\n      inPath: true\n    });\n    panels.reverse();\n    this.currentIndex = panels.length - 1;\n    this.content = [...panels];\n  },\n  content: [],\n  getView(state) {\n    // Note the use of arrow functions and non-arrow functions for scope of \"this\" in panel rendering.\n    // Use arrow to access Panel object, non-lexical function for accessing current iterable object in template.\n    return this.content.map((item, i) => ({\n      ...item,\n      name: item?.name || frontpageTranslation,\n      url: item.url || drupalSettings.helfi_navigation.links.canonical,\n      // If current item has subitems, show button for next panel.\n      button,\n      isActive,\n      isInPath,\n      isInjected,\n      externalLinkAttributes,\n      hasLang,\n      externalLinkIcon,\n      // Show title of previously clicked item in Back-button (or Frontpage)\n      back: i > 0 ? this.content.at(i - 1)?.name ?? frontpageTranslation : false,\n      openSubMenuTranslation,\n      openParentMenuTranslation,\n      /** *\n       * Define correct starting positions for each panel, depeding on traversal direction\n       * At start, first item is on stage and anything else must be on right.\n       * When going forward in the menu, current -1  item must be on stage and current item starts from right\n       * When going backward in the menu, current +1 item must be on stage and current item starts from left\n       *\n       * At render, -left  (down to root) and -right (up the tree) classes are added and removed accordingly to achieve wanted animation and final state.\n       */\n      panel_class: classnames__WEBPACK_IMPORTED_MODULE_1___default()({\n        mmenu__panel: true,\n        'mmenu__panel--visible': true,\n        'mmenu__panel--current': i === this.currentIndex,\n        'mmenu__panel--visible-right': state === 'start' && i > this.currentIndex || state === 'up' && i >= this.currentIndex || state === 'down' && i > this.currentIndex + 1,\n        'mmenu__panel--visible-left': state === 'up' && i < this.currentIndex - 1 || state === 'down' && i <= this.currentIndex\n      })\n    }));\n  },\n  up(parentId) {\n    if (!parentId) {\n      throw new Error(`Id missing for next menu item  ${parentId}`);\n    }\n    /**\n     * Find the item corresponding to given id in item arrow click event.\n     * It's items will be the new current panel. Old panel swipes left.\n     */\n    const next = this.content.at(this.currentIndex).sub_tree.find(({\n      id\n    }) => id === parentId);\n    if (!next) {\n      throw new Error(`ID mismatch in menu items${parentId}`);\n    }\n    this.currentIndex = this.currentIndex + 1 < this.size ? this.currentIndex + 1 : this.currentIndex;\n    this.content[this.currentIndex] = next;\n    this.render('up');\n  },\n  down() {\n    if (this.currentIndex === 0) {\n      return;\n    }\n    this.currentIndex = this.currentIndex - 1 >= 0 ? this.currentIndex - 1 : this.currentIndex;\n    this.render('down');\n  },\n  render(state) {\n    const root = this.getRoot();\n    root.innerHTML = mustache__WEBPACK_IMPORTED_MODULE_0__[\"default\"].render(this.templates.panel, {\n      panels: this.getView(state)\n    }, {\n      sub_tree: this.templates.list\n    });\n    if (state === 'load') {\n      return;\n    }\n    const panels = [...root.querySelectorAll('.mmenu__panel')];\n    const current = panels.at(this.currentIndex);\n    if (root.parentElement.scrollTop > this.SCROLL_TRESHOLD && this.currentIndex > 0) {\n      current.querySelector('.mmenu__back').scrollIntoView({\n        block: 'start',\n        behaviour: 'smooth'\n      });\n    }\n    setTimeout(() => {\n      current.classList.remove('mmenu__panel--visible-right', 'mmenu__panel--visible-left');\n      switch (state) {\n        case 'up':\n          panels.at(this.currentIndex - 1).classList.add('mmenu__panel--visible-left');\n          break;\n        case 'down':\n          panels.at(this.currentIndex + 1).classList.add('mmenu__panel--visible-right');\n          break;\n        default:\n      }\n      setTimeout(() => {\n        /**\n         * Hide prev & next panels from screen readers by adding visibility:hidden.\n         * DO NOT USE display:none. Display needs to be set to 'flex' or panels will collapse.\n         */\n        panels.forEach(panel => {\n          if (!panel.classList.contains('mmenu__panel--current')) {\n            panel.style.visibility = 'hidden';\n          }\n        });\n        /**\n         * See $-transition-duration in _mmenu.scss.\n         * Timeout must not be shorter than animation duration.\n         */\n      }, 200);\n    }, 10); // Transition classes need to be added after initial render.\n  },\n\n  async load() {\n    const MENU = await fetch(this.getAPIUrl());\n    const data = await MENU.json();\n    const allInstances = Object.getOwnPropertyNames(data);\n    if (!allInstances.length) {\n      throw new Error('No instances found in data', data);\n    }\n    const allItems = allInstances.map(instanceName => {\n      const item = data[instanceName].menu_tree[0];\n      item.parentId = '';\n      return item;\n    });\n    const currentItem = allItems.findRecursive(item => isCurrentPath.call(item), 'sub_tree');\n    if (currentItem) {\n      currentItem.active = true;\n      currentItem.inPath = true;\n    }\n    let parentIndex = currentItem?.parentId;\n    while (parentIndex) {\n      // eslint-disable-next-line no-loop-func\n      const found = allItems.findRecursive(item => {\n        if (item.id === parentIndex) {\n          // set new parent id. If this is empty, it will stop the while-loop.\n          parentIndex = item.parentId;\n          item.inPath = true;\n          return true;\n        }\n        return false;\n      }, 'sub_tree');\n      if (!found) {\n        // Stop while-loop.\n        parentIndex = undefined;\n      }\n    }\n    this.data = allItems;\n  },\n  async start() {\n    const container = document.querySelector(this.selectors.container);\n    if (!this.getRoot() || !container) {\n      throw new Error('Panel root not found');\n    }\n    // Show container and loader on start\n    container.classList.add('mmenu--visible');\n    this.render('load');\n    try {\n      await this.load();\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Unable to load menu API, using fallback menu instead', e);\n      this.enableFallback();\n      return;\n    }\n    /**\n     * Set the panels according to current path.\n     */\n    this.sortPanelsByPath();\n    this.render('start');\n    /**\n     * Panel event listener:\n     *\n     *  Bind one click event listener to main panel. One for all click events.!\n     *  Add more if one handler becomes too cumbersome.\n     *  */\n    this.getRoot().addEventListener('click', e => {\n      // Arrow function keeps us in Panel context for \"this\". Take what you need from event\n      const {\n        target: {\n          classList,\n          value: id,\n          parentElement\n        }\n      } = e;\n      e.stopImmediatePropagation();\n      // Or outside-of-menu-click listener will be triggered incorrectly due to rerender before parent lookup.\n      // See nav-global.js\n\n      if (classList && classList.contains(this.selectors.forward)) {\n        this.up(id);\n      } else if (classList && classList.contains(this.selectors.back) || parentElement?.classList && parentElement?.classList.contains(this.selectors.back)) {\n        this.down();\n      }\n    });\n  },\n  isOpen() {\n    return window.location.hash === '#menu' || this.toggleButton.getAttribute('aria-expanded') === 'true';\n  },\n  disableFallback() {\n    this.menu.dataset.js = true; // Switch to use js-enhanced version instead of pure css version\n  },\n\n  enableFallback() {\n    this.menu.dataset.target = 'false'; // Close the menu with js so that we can use css version instead\n    this.getRoot().innerHTML = ''; // Remove rotator\n    delete this.menu.dataset.js; // Switch to use pure css version instead of js-enhanced version\n    window.location.hash = '#menu'; // Open menu with the css way\n  },\n\n  close() {\n    this.toggleButton.setAttribute('aria-expanded', 'false');\n    this.menu.dataset.target = 'false';\n    if (this.onClose) {\n      this.onClose();\n    }\n  },\n  open() {\n    this.menu.dataset.target = 'true';\n    this.toggleButton.setAttribute('aria-expanded', 'true');\n    if (this.onOpen) {\n      this.onOpen();\n    }\n  },\n  toggle() {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n    // We should always focus the menu button after toggling the menu\n    this.toggleButton.focus();\n  },\n  init({\n    onOpen,\n    onClose\n  }) {\n    /**\n     * Start the panel after DOM has loaded.\n     * Compiled templates need to have reliable access to header and menu elements cloned from Server DOM.\n     */\n    if (this.running) {\n      // eslint-disable-next-line no-console\n      console.warn('MobilePanel already initiated. Is it include more than once?');\n      return;\n    }\n    this.onOpen = onOpen;\n    this.onClose = onClose;\n\n    // This used to load after DOM was loaded, but we added defer for the javascript.\n    // See  block--mobile-navigation.html.twig for the button\n    this.toggleButton = document.querySelector('.js-menu-toggle-button');\n    if (!this.toggleButton) {\n      throw new Error('No toggle button for JS menu.');\n    }\n    // TODO: UHF-8791 Where is this #menu coming from? Maybe name it better (https://helsinkisolutionoffice.atlassian.net/browse/UHF-8791).\n    this.menu = document.querySelector('#menu');\n    if (!this.menu) {\n      // eslint-disable-next-line no-console\n      console.error('Panel not present in DOM. Cannot start JS mobile menu');\n      return;\n    }\n    this.disableFallback();\n\n    /**\n     * Close menu on Escape button click if it is open.\n     */\n    document.addEventListener('keydown', e => {\n      if ((e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) && this.isOpen()) {\n        this.close();\n        this.toggleButton.focus();\n      }\n    });\n    const start = () => {\n      /**\n       * Delay template compilation to menu start to ensure\n       * footer & top menu blocks are rendered in main DOM before cloning them.\n       *\n       * Start removes itself in order to only run once.\n       */\n      this.compileTemplates();\n      this.toggleButton.removeEventListener('click', start);\n      this.start();\n    };\n    /**\n     * Add start-event to menu toggle button.\n     *\n     * Add Menu toggle function to menu button.\n     * Side effects:\n     * Toggles chat widget display values and aria-expanded states and clears menu hash when closing.\n     */\n    this.toggleButton.addEventListener('click', start);\n    this.toggleButton.addEventListener('click', () => this.toggle());\n\n    /**\n     * Open menu if it is required in the hash, then clear hash.\n     */\n    if (this.isOpen()) {\n      window.location.hash = '';\n      start();\n      this.open();\n    }\n    this.running = true;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (MobilePanel);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/nav-global/menu.js\n");

/***/ })

}]);