/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/nav-global.js":
/*!******************************!*\
  !*** ./src/js/nav-global.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Mustache = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\n\nconst cls = __webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\");\n\nconst frontpageTranslation = Drupal.t('Frontpage', {}, {\n  context: 'Global navigation mobile menu top level'\n});\n/**\n * Related twig templates:\n * - block--mobile-navigation.html.twig\n * - menu--mobile.html.twig\n *\n * Related styles:\n * components/navigation/global\n * - _mmenu.scss\n * - _megamenu.scss\n * - _menu-toggle.scss\n *\n */\n\nconst widgetsToHideSelector = ['#chat-leijuke-wrapper', '.si-toggle-container', // Siteimprove accessibility tool\n'.cx-theme-helsinki-blue', // Genesys chat in kymp and sote\n'#smartti-wrapper', // Smartti chatbot in kymp\n'.aca--button--desktop, .aca--button--mobile, .aca--widget--mobile, .aca--widget--desktop, #aca--widget-button-close', // Watson chatbot in asuminen\n'#block-kuurahealthchat', // Kuurahealth in sote\n'#ed11y-panel' // Editoria11y accessibility tool\n];\n\nfunction toggleWidgets(hide) {\n  document.querySelectorAll(widgetsToHideSelector.join(',')).forEach(widget => {\n    /***\n     * Widgets are hidden using [data-] selectors\n     */\n    if (hide) {\n      widget.dataset.cssmenuHide = true;\n    } else {\n      delete widget.dataset.cssmenuHide;\n    }\n  });\n}\n\nArray.prototype.findRecursive = function (predicate, childrenPropertyName) {\n  if (!childrenPropertyName) {\n    throw 'findRecursive requires parameter `childrenPropertyName`';\n  }\n\n  let array = [];\n  array = this;\n  let initialFind = array.find(predicate);\n  let elementsWithChildren = array.filter(x => x[childrenPropertyName]);\n\n  if (initialFind) {\n    return initialFind;\n  } else if (elementsWithChildren.length) {\n    let childElements = [];\n    elementsWithChildren.forEach(x => {\n      childElements.push(...x[childrenPropertyName]);\n    });\n    return childElements.findRecursive(predicate, childrenPropertyName);\n  } else {\n    return undefined;\n  }\n};\n/**\n * Generic object helpers for template contexts\n */\n\n/**\n * Check if current given menu item has items\n * @return {boolean} current object has sub_tree with items in it.\n */\n\n\nconst button = function () {\n  // return this.hasItems\n  return this.sub_tree?.length > 0;\n};\n/**\n * Check if  given menu item url pathname matches current browser pathname\n * @return {boolean} current object has url and url pathname matches current location pathname\n */\n\n\nconst active = function () {\n  try {\n    return !this.external && this.url && new URL(this.url).pathname === window.location.pathname;\n  } catch (e) {\n    console.warn('Invalid url given to \"active\"-helper', this.url);\n  }\n\n  return false;\n};\n/**\n * Convert null `active` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have active set and trueish\n */\n\n\nconst isActive = function () {\n  return !!this.active;\n};\n/**\n * Convert null `inPath` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have inPath set and trueish\n */\n\n\nconst isInPath = function () {\n  return !!this.inPath;\n};\n/***\n * Convert attributes to to template-friendly object\n * @return {object}  {external:bool, protocol:bool}\n */\n\n\nconst externalLinkAttributes = function () {\n  return {\n    external: this.attributes['data-external'] || this.external || false,\n    protocol: this.attributes['data-protocol'] || false\n  };\n};\n/**\n * Convert null `attributes.lang` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have attributes.lang set and trueish\n */\n\n\nconst hasLang = function () {\n  return !!this.attributes?.lang;\n};\n/**\n * Determinine icon type and text for external link\n * @return {object} {class: list of related CSS classes, text: translated description text }\n */\n\n\nconst externalLinkIcon = function () {\n  if (!this.external) {\n    return false;\n  }\n\n  return externalLinkIcon.ICONS[this.attributes['data-protocol']] || externalLinkIcon.ICONS.external;\n};\n\nexternalLinkIcon.ICONS = {\n  mailto: {\n    class: 'link__type link__type--mailto',\n    text: Drupal.t('Link opens default mail program', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link opens default mail program.'\n    })\n  },\n  tel: {\n    class: 'link__type link__type--tel',\n    text: Drupal.t('Link starts a phone call', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link starts a phone call.'\n    })\n  },\n  external: {\n    class: 'link__type link__type--external',\n    text: Drupal.t('Link leads to external service', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link leads to an external service.'\n    })\n  }\n};\n/**\n * Panel main object.\n */\n\nconst Panel = {\n  compileTemplates: function () {\n    this.templates = {\n      panel: `\n{{#panels}}\n  <section class=\"{{panel_class}}\">\n    <div class=\"mmenu__panel-body\">\n      {{#back}}\n        <button class=\"mmenu__back\">\n          <span class=\"mmenu__back-wrapper\">{{back}}</span>\n        </button>\n      {{/back}}\n      <a href=\"{{url}}\" class=\"mmenu__title-link{{#isInPath}} mmenu__title-link--in-path{{/isInPath}}\"{{#isActive}} aria-current=\"page\"{{/isActive}}\n\n      {{#externalLinkAttributes.external}}\n        data-external=\"true\"\n      {{/externalLinkAttributes.external}}\n\n      {{#externalLinkAttributes.protocol}}\n        data-protocol=\"{{externalLinkAttributes.protocol}}\"\n      {{/externalLinkAttributes.protocol}}\n\n      ><span class=\"mmenu__link__text\"\n\n      {{#hasLang}}\n        lang=\"{{attributes.lang}}\"\n      {{/hasLang}}\n\n      >{{name}}</span>{{#externalLinkIcon}} <span class=\"{{class}}\" aria-label=\"({{text}})\"></span>{{/externalLinkIcon}}</a>\n      {{>sub_tree}}\n    </div>\n    ${document.querySelector('.js-mmenu__footer')?.outerHTML}\n  </section>\n{{/panels}}\n\n{{^panels}}\n<div class=\"mmenu__loading\">\n  <div class=\"hds-loading-spinner\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n</div>\n{{/panels}}\n`,\n      list: `\n  <ul class=\"mmenu__items\">\n    {{#sub_tree}}\n      <li class=\"mmenu__item\">\n\n        <a href=\"{{url}}\" class=\"mmenu__item-link{{#isInPath}} mmenu__item-link--in-path{{/isInPath}}\"{{#isActive}} aria-current=\"page\"{{/isActive}}\n\n        {{#externalLinkAttributes.external}}\n          data-external=\"true\"\n        {{/externalLinkAttributes.external}}\n\n        {{#externalLinkAttributes.protocol}}\n          data-protocol={{externalLinkAttributes.protocol}}\n        {{/externalLinkAttributes.protocol}}\n\n        ><span class=\"mmenu__link__text\"\n\n      {{#hasLang}}\n        lang=\"{{attributes.lang}}\"\n      {{/hasLang}}\n\n      >{{name}}</span>{{#externalLinkIcon}} <span class=\"{{class}}\" aria-label=\"({{text}})\"></span>{{/externalLinkIcon}}\n        </a>\n        {{#button}}\n          <button class=\"mmenu__forward \" value={{id}} />\n        {{/button}}\n      </li>\n    {{/sub_tree}}\n  </ul>\n `\n    };\n  },\n  menu: null,\n  templates: null,\n  SCROLL_TRESHOLD: 100,\n  // Maximum assumed depth of tree. Used for checking if going up is allowed\n  size: 10,\n  data: null,\n  currentIndex: 0,\n  cacheKey: 'hdbt-mobile-menu',\n  enableCache: false,\n  selectors: {\n    container: '#mmenu',\n    rootId: 'mmenu__panels',\n    forward: 'mmenu__forward',\n    back: 'mmenu__back'\n  },\n  getAPIUrl: function () {\n    const url = new URL(drupalSettings?.helfi_navigation?.links?.api);\n    url.searchParams.set('_format', 'json');\n    return url.toString();\n  },\n  getRoot: function () {\n    return document.getElementById(this.selectors.rootId);\n  },\n  sortPanelsByPath: function () {\n    const panels = [];\n    const allItems = this.data;\n    const currentItem = allItems.findRecursive(item => active.call(item), 'sub_tree');\n    let parentIndex = currentItem?.sub_tree?.length ? currentItem.id : currentItem?.parentId;\n\n    while (parentIndex) {\n      const found = allItems.findRecursive(({\n        id,\n        url,\n        name,\n        sub_tree,\n        parentId,\n        inPath,\n        active\n      }) => {\n        if (id === parentIndex) {\n          panels.push({\n            sub_tree,\n            name,\n            url,\n            parentId,\n            inPath,\n            active\n          }); // Set new parent id. If this is empty, it will stop the while-loop.\n\n          parentIndex = parentId;\n          return true;\n        }\n\n        return false;\n      }, 'sub_tree');\n\n      if (!found) {\n        // Stop while-loop.\n        parentIndex = undefined;\n      }\n    }\n\n    panels.push({\n      sub_tree: allItems,\n      inPath: true\n    });\n    panels.reverse();\n    this.currentIndex = panels.length - 1;\n    this.content = [...panels];\n  },\n  content: [],\n  getView: function (state) {\n    // Note the use of arrow functions and non-arrow functions for scope of \"this\" in panel rendering.\n    // Use arrow to access Panel object, non-lexical function for accessing current iterable object in template.\n    return this.content.map((item, i) => ({ ...item,\n      name: item?.name || frontpageTranslation,\n      url: item.url || drupalSettings.helfi_navigation.links.canonical,\n      // If current item has subitems, show button for next panel.\n      button,\n      isActive,\n      isInPath,\n      externalLinkAttributes,\n      hasLang,\n      externalLinkIcon,\n      // Show title of previously clicked item in Back-button (or Frontpage)\n      back: i > 0 ? this.content.at(i - 1)?.name ?? frontpageTranslation : false,\n\n      /***\n       * Define correct starting positions for each panel, depeding on traversal direction\n       * At start, first item is on stage and anything else must be on right.\n       * When going forward in the menu, current -1  item must be on stage and current item starts from right\n       * When going backward in the menu, current +1 item must be on stage and current item starts from left\n       *\n       * At render, -left  (down to root) and -right (up the tree) classes are added and removed accordingly to achieve wanted animation and final state.\n       */\n      panel_class: cls({\n        'mmenu__panel': true,\n        'mmenu__panel--visible': true,\n        'mmenu__panel--current': i === this.currentIndex,\n        'mmenu__panel--visible-right': state === 'start' && i > this.currentIndex || state === 'up' && i >= this.currentIndex || state === 'down' && i > this.currentIndex + 1,\n        'mmenu__panel--visible-left': state === 'up' && i < this.currentIndex - 1 || state === 'down' && i <= this.currentIndex\n      })\n    }));\n  },\n  up: function (parentId) {\n    if (!parentId) {\n      throw `Id missing for next menu item  ${parentId}`;\n    }\n    /**\n     * Find the item corresponding to given id in item arrow click event.\n     * It's items will be the new current panel. Old panel swipes left.\n     */\n\n\n    const next = this.content.at(this.currentIndex).sub_tree.find(({\n      id\n    }) => id === parentId);\n\n    if (!next) {\n      throw new Error('ID mismatch in menu items' + parentId);\n    }\n\n    this.currentIndex = this.currentIndex + 1 < this.size ? this.currentIndex + 1 : this.currentIndex;\n    this.content[this.currentIndex] = next;\n    this.render('up');\n  },\n  down: function () {\n    if (this.currentIndex === 0) {\n      return;\n    }\n\n    this.currentIndex = this.currentIndex - 1 >= 0 ? this.currentIndex - 1 : this.currentIndex;\n    this.render('down');\n  },\n  render: function (state) {\n    const root = this.getRoot();\n    root.innerHTML = Mustache.render(this.templates.panel, {\n      panels: this.getView(state)\n    }, {\n      sub_tree: this.templates.list\n    });\n\n    if (state === 'load') {\n      return;\n    }\n\n    const panels = [...root.querySelectorAll('.mmenu__panel')];\n    const current = panels.at(this.currentIndex);\n\n    if (root.parentElement.scrollTop > this.SCROLL_TRESHOLD && this.currentIndex > 0) {\n      current.querySelector('.mmenu__back').scrollIntoView({\n        block: 'start',\n        behaviour: 'smooth'\n      });\n    }\n\n    setTimeout(() => {\n      current.classList.remove('mmenu__panel--visible-right', 'mmenu__panel--visible-left');\n\n      switch (state) {\n        case 'up':\n          panels.at(this.currentIndex - 1).classList.add('mmenu__panel--visible-left');\n          break;\n\n        case 'down':\n          panels.at(this.currentIndex + 1).classList.add('mmenu__panel--visible-right');\n          break;\n\n        default:\n      }\n\n      setTimeout(() => {\n        /**\n         * Hide prev & next panels from screen readers by adding visibility:hidden.\n         * DO NOT USE display:none. Display needs to be set to 'flex' or panels will collapse.\n        */\n        panels.forEach(panel => {\n          if (!panel.classList.contains('mmenu__panel--current')) {\n            panel.style.visibility = 'hidden';\n          }\n        });\n        /**\n         * See $-transition-duration in _mmenu.scss.\n         * Timeout must not be shorter than animation duration.\n         */\n      }, 200);\n    }, 10); // Transition classes need to be added after initial render.\n  },\n  load: async function () {\n    const MENU = await fetch(this.getAPIUrl());\n    const data = await MENU.json();\n    var allInstances = Object.getOwnPropertyNames(data);\n\n    if (!allInstances.length) {\n      throw new Error('No instances found in data', data);\n    }\n\n    const allItems = allInstances.map(instanceName => {\n      const item = data[instanceName].menu_tree[0];\n      item.parentId = '';\n      return item;\n    });\n    const currentItem = allItems.findRecursive(item => active.call(item), 'sub_tree');\n\n    if (currentItem) {\n      currentItem.active = true;\n      currentItem.inPath = true;\n    }\n\n    let parentIndex = currentItem?.parentId;\n\n    while (parentIndex) {\n      const found = allItems.findRecursive(item => {\n        if (item.id === parentIndex) {\n          //set new parent id. If this is empty, it will stop the while-loop.\n          parentIndex = item.parentId;\n          item.inPath = true;\n          return true;\n        }\n\n        return false;\n      }, 'sub_tree');\n\n      if (!found) {\n        // Stop while-loop.\n        parentIndex = undefined;\n      }\n    }\n\n    this.data = allItems;\n  },\n  start: async function () {\n    const container = document.querySelector(this.selectors.container);\n\n    if (!this.getRoot() || !container) {\n      throw new Error('Panel root not found');\n    } // Show container and loader on start\n\n\n    container.classList.add('mmenu--visible');\n    this.render('load');\n\n    try {\n      await this.load();\n    } catch (e) {\n      console.error('Unable to load menu data, using mock menu for development purposes. Reset to nojs-fallback when integrating with actual API', e);\n      this.enableFallback();\n      return;\n    }\n    /**\n     * Set the panels according to current path.\n     */\n\n\n    this.sortPanelsByPath();\n    this.render('start');\n    /**\n     * Panel event listener:\n     *\n     *  Bind one click event listener to main panel. One for all click events.!\n     *  Add more if one handler becomes too cumbersome.\n     *  */\n\n    this.getRoot().addEventListener('click', ({\n      target: {\n        classList,\n        value: id,\n        parentElement\n      }\n    }) => {\n      // Arrow function keeps us in Panel context for \"this\". Take what you need from event\n      if (classList && classList.contains(this.selectors.forward)) {\n        this.up(id);\n      } else if (classList && classList.contains(this.selectors.back) || parentElement?.classList && parentElement?.classList.contains(this.selectors.back)) {\n        this.down();\n      }\n    });\n  },\n  menuIsOpen: function () {\n    return window.location.hash === '#menu' || this.toggleButton.getAttribute('aria-expanded') === 'true';\n  },\n  disableFallback: function () {\n    Panel.menu.dataset.js = true; // Switch to use js-enhanced version instead of pure css version\n  },\n  enableFallback: function () {\n    Panel.menu.dataset.target = 'false'; // Close the menu with js so that we can use css version instead\n\n    this.getRoot().innerHTML = ''; // Remove rotator\n\n    delete Panel.menu.dataset.js; // Switch to use pure css version instead of js-enhanced version\n\n    window.location.hash = '#menu'; // Open menu with the css way\n  },\n  menuToggle: function () {\n    if (this.menuIsOpen()) {\n      this.toggleButton.setAttribute('aria-expanded', 'false');\n      this.menu.dataset.target = 'false';\n      toggleWidgets(false);\n    } else {\n      toggleWidgets(true);\n      this.menu.dataset.target = 'true';\n      this.toggleButton.setAttribute('aria-expanded', 'true');\n    } // We should always focus the menu button after toggling the menu\n\n\n    this.toggleButton.focus();\n  }\n};\n/**\n * Start the panel after DOM has loaded.\n * Compiled templates need to have reliable access to header and menu elements cloned from Server DOM.\n */\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // See  block--mobile-navigation.html.twig for the button\n  Panel.toggleButton = document.querySelector('.js-menu-toggle-button');\n\n  if (!Panel.toggleButton) {\n    throw 'No toggle button for JS menu.';\n  } // TODO Where is this #menu coming from Maybe name it better?\n\n\n  Panel.menu = document.querySelector('#menu');\n\n  if (!Panel.menu) {\n    console.error('Panel not present in DOM. Cannot start JS mobile menu');\n    return;\n  }\n\n  Panel.disableFallback();\n  /**\n   * Close menu on Escape button click if it is open.\n   */\n\n  document.addEventListener('keydown', function (e) {\n    if ((e.key == 'Escape' || e.key == 'Esc' || e.keyCode == 27) && Panel.menuIsOpen()) {\n      Panel.menuToggle();\n    }\n  });\n\n  const start = function () {\n    /**\n     * Delay template compilation to menu start to ensure\n     * footer & top menu blocks are rendered in main DOM before cloning them.\n     *\n     * Start removes itself in order to only run once.\n     */\n    Panel.compileTemplates();\n    Panel.toggleButton.removeEventListener('click', start);\n    Panel.start();\n  };\n  /**\n   * Add start-event to menu toggle button.\n   *\n   * Add Menu toggle function to menu button.\n   * Side effects:\n   * Toggles chat widget display values and aria-expanded states and clears menu hash when closing.\n   */\n\n\n  Panel.toggleButton.addEventListener('click', start);\n  Panel.toggleButton.addEventListener('click', () => Panel.menuToggle());\n  /**\n   * Open menu if it is required in the hash, then clear hash.\n   */\n\n  if (Panel.menuIsOpen()) {\n    window.location.hash = '';\n    start();\n    Panel.menuToggle();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvbmF2LWdsb2JhbC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMscURBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHRCxtQkFBTyxDQUFDLHNEQUFELENBQW5COztBQUNBLE1BQU1FLG9CQUFvQixHQUFHQyxNQUFNLENBQUNDLENBQVAsQ0FBUyxXQUFULEVBQXNCLEVBQXRCLEVBQTBCO0VBQUVDLE9BQU8sRUFBRTtBQUFYLENBQTFCLENBQTdCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1DLHFCQUFxQixHQUFHLENBQzVCLHVCQUQ0QixFQUU1QixzQkFGNEIsRUFFSjtBQUN4Qix5QkFINEIsRUFHRDtBQUMzQixrQkFKNEIsRUFJUjtBQUNwQixxSEFMNEIsRUFLMkY7QUFDdkgsd0JBTjRCLEVBTUY7QUFDMUIsY0FQNEIsQ0FPYjtBQVBhLENBQTlCOztBQVVBLFNBQVNDLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCO0VBQzNCQyxRQUFRLENBQUNDLGdCQUFULENBQTBCSixxQkFBcUIsQ0FBQ0ssSUFBdEIsQ0FBMkIsR0FBM0IsQ0FBMUIsRUFBMkRDLE9BQTNELENBQW1FQyxNQUFNLElBQUk7SUFDM0U7QUFDSjtBQUNBO0lBQ0ksSUFBSUwsSUFBSixFQUFVO01BQ1JLLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxXQUFmLEdBQTZCLElBQTdCO0lBQ0QsQ0FGRCxNQUVPO01BQ0wsT0FBT0YsTUFBTSxDQUFDQyxPQUFQLENBQWVDLFdBQXRCO0lBQ0Q7RUFDRixDQVREO0FBVUQ7O0FBR0RDLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsYUFBaEIsR0FBZ0MsVUFBU0MsU0FBVCxFQUFvQkMsb0JBQXBCLEVBQXlDO0VBQ3ZFLElBQUcsQ0FBQ0Esb0JBQUosRUFBeUI7SUFDdkIsTUFBTSx5REFBTjtFQUNEOztFQUNELElBQUlDLEtBQUssR0FBRyxFQUFaO0VBQ0FBLEtBQUssR0FBRyxJQUFSO0VBQ0EsSUFBSUMsV0FBVyxHQUFJRCxLQUFLLENBQUNFLElBQU4sQ0FBV0osU0FBWCxDQUFuQjtFQUNBLElBQUlLLG9CQUFvQixHQUFJSCxLQUFLLENBQUNJLE1BQU4sQ0FBYUMsQ0FBQyxJQUFFQSxDQUFDLENBQUNOLG9CQUFELENBQWpCLENBQTVCOztFQUNBLElBQUdFLFdBQUgsRUFBZTtJQUNiLE9BQU9BLFdBQVA7RUFDRCxDQUZELE1BRU8sSUFBR0Usb0JBQW9CLENBQUNHLE1BQXhCLEVBQStCO0lBQ3BDLElBQUlDLGFBQWEsR0FBRyxFQUFwQjtJQUNBSixvQkFBb0IsQ0FBQ1osT0FBckIsQ0FBNkJjLENBQUMsSUFBRTtNQUM5QkUsYUFBYSxDQUFDQyxJQUFkLENBQW1CLEdBQUdILENBQUMsQ0FBQ04sb0JBQUQsQ0FBdkI7SUFDRCxDQUZEO0lBR0EsT0FBT1EsYUFBYSxDQUFDVixhQUFkLENBQTRCQyxTQUE1QixFQUF1Q0Msb0JBQXZDLENBQVA7RUFDRCxDQU5NLE1BTUE7SUFDTCxPQUFPVSxTQUFQO0VBQ0Q7QUFDRixDQW5CRDtBQXFCQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLE1BQU1DLE1BQU0sR0FBRyxZQUFVO0VBQ3pCO0VBQ0UsT0FBTyxLQUFLQyxRQUFMLEVBQWVMLE1BQWYsR0FBc0IsQ0FBN0I7QUFDRCxDQUhEO0FBTUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLE1BQU1NLE1BQU0sR0FBRyxZQUFZO0VBQ3pCLElBQUk7SUFDRixPQUFPLENBQUMsS0FBS0MsUUFBTixJQUFrQixLQUFLQyxHQUF2QixJQUE4QixJQUFJQyxHQUFKLENBQVEsS0FBS0QsR0FBYixFQUFrQkUsUUFBbEIsS0FBK0JDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkYsUUFBcEY7RUFDRCxDQUZELENBR0EsT0FBTUcsQ0FBTixFQUFTO0lBQ1BDLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLHNDQUFiLEVBQXFELEtBQUtQLEdBQTFEO0VBQ0Q7O0VBQ0QsT0FBTyxLQUFQO0FBQ0QsQ0FSRDtBQVVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNUSxRQUFRLEdBQUcsWUFBWTtFQUMzQixPQUFPLENBQUMsQ0FBQyxLQUFLVixNQUFkO0FBQ0QsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNVyxRQUFRLEdBQUcsWUFBWTtFQUMzQixPQUFPLENBQUMsQ0FBQyxLQUFLQyxNQUFkO0FBQ0QsQ0FGRDtBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNQyxzQkFBc0IsR0FBRyxZQUFZO0VBRXpDLE9BQU87SUFDTFosUUFBUSxFQUFDLEtBQUthLFVBQUwsQ0FBZ0IsZUFBaEIsS0FBb0MsS0FBS2IsUUFBekMsSUFBcUQsS0FEekQ7SUFFTGMsUUFBUSxFQUFDLEtBQUtELFVBQUwsQ0FBZ0IsZUFBaEIsS0FBbUM7RUFGdkMsQ0FBUDtBQUtELENBUEQ7QUFVQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHLFlBQVk7RUFDMUIsT0FBTyxDQUFDLENBQUMsS0FBS0YsVUFBTCxFQUFpQkcsSUFBMUI7QUFDRCxDQUZEO0FBSUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLE1BQU1DLGdCQUFnQixHQUFHLFlBQVk7RUFDbkMsSUFBSSxDQUFDLEtBQUtqQixRQUFWLEVBQW9CO0lBQ2xCLE9BQU8sS0FBUDtFQUNEOztFQUVELE9BQU9pQixnQkFBZ0IsQ0FBQ0MsS0FBakIsQ0FBd0IsS0FBS0wsVUFBTCxDQUFnQixlQUFoQixDQUF4QixLQUE2REksZ0JBQWdCLENBQUNDLEtBQWpCLENBQXVCbEIsUUFBM0Y7QUFDRCxDQU5EOztBQVFBaUIsZ0JBQWdCLENBQUNDLEtBQWpCLEdBQTBCO0VBQ3hCQyxNQUFNLEVBQUU7SUFDTkMsS0FBSyxFQUFFLCtCQUREO0lBRU5DLElBQUksRUFBRXBELE1BQU0sQ0FBQ0MsQ0FBUCxDQUFTLGlDQUFULEVBQTRDLEVBQTVDLEVBQWdEO01BQUVDLE9BQU8sRUFBRTtJQUFYLENBQWhEO0VBRkEsQ0FEZ0I7RUFLeEJtRCxHQUFHLEVBQUM7SUFDRkYsS0FBSyxFQUFFLDRCQURMO0lBRUZDLElBQUksRUFBRXBELE1BQU0sQ0FBQ0MsQ0FBUCxDQUFTLDBCQUFULEVBQXFDLEVBQXJDLEVBQXlDO01BQUVDLE9BQU8sRUFBRTtJQUFYLENBQXpDO0VBRkosQ0FMb0I7RUFTeEI2QixRQUFRLEVBQUU7SUFDUm9CLEtBQUssRUFBRSxpQ0FEQztJQUVSQyxJQUFJLEVBQUVwRCxNQUFNLENBQUNDLENBQVAsQ0FBUyxnQ0FBVCxFQUEyQyxFQUEzQyxFQUErQztNQUFFQyxPQUFPLEVBQUU7SUFBWCxDQUEvQztFQUZFO0FBVGMsQ0FBMUI7QUFnQkE7QUFDQTtBQUNBOztBQUVBLE1BQU1vRCxLQUFLLEdBQUc7RUFDWkMsZ0JBQWdCLEVBQUcsWUFBVTtJQUMzQixLQUFLQyxTQUFMLEdBQWlCO01BQUVDLEtBQUssRUFBRztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNbkQsUUFBUSxDQUFDb0QsYUFBVCxDQUF1QixtQkFBdkIsR0FBNkNDLFNBQVU7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0F6Q3FCO01BMENqQkMsSUFBSSxFQUNMO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQXhFcUIsQ0FBakI7RUEwRUQsQ0E1RVc7RUE2RVpDLElBQUksRUFBQyxJQTdFTztFQThFWkwsU0FBUyxFQUFDLElBOUVFO0VBK0VaTSxlQUFlLEVBQUMsR0EvRUo7RUFnRlo7RUFDQUMsSUFBSSxFQUFFLEVBakZNO0VBa0ZaQyxJQUFJLEVBQUMsSUFsRk87RUFtRlpDLFlBQVksRUFBRSxDQW5GRjtFQW9GWkMsUUFBUSxFQUFFLGtCQXBGRTtFQXFGWkMsV0FBVyxFQUFFLEtBckZEO0VBc0ZaQyxTQUFTLEVBQUM7SUFDUkMsU0FBUyxFQUFDLFFBREY7SUFFUkMsTUFBTSxFQUFDLGVBRkM7SUFHUkMsT0FBTyxFQUFDLGdCQUhBO0lBSVJDLElBQUksRUFBQztFQUpHLENBdEZFO0VBNEZaQyxTQUFTLEVBQUMsWUFBVTtJQUNsQixNQUFNekMsR0FBRyxHQUFHLElBQUlDLEdBQUosQ0FBUXlDLGNBQWMsRUFBRUMsZ0JBQWhCLEVBQWtDQyxLQUFsQyxFQUF5Q0MsR0FBakQsQ0FBWjtJQUNBN0MsR0FBRyxDQUFDOEMsWUFBSixDQUFpQkMsR0FBakIsQ0FBcUIsU0FBckIsRUFBK0IsTUFBL0I7SUFDQSxPQUFPL0MsR0FBRyxDQUFDZ0QsUUFBSixFQUFQO0VBQ0QsQ0FoR1c7RUFpR1pDLE9BQU8sRUFBQyxZQUFVO0lBQ2hCLE9BQU8zRSxRQUFRLENBQUM0RSxjQUFULENBQXdCLEtBQUtkLFNBQUwsQ0FBZUUsTUFBdkMsQ0FBUDtFQUNELENBbkdXO0VBb0daYSxnQkFBZ0IsRUFBQyxZQUFXO0lBQzFCLE1BQU1DLE1BQU0sR0FBRyxFQUFmO0lBQ0EsTUFBTUMsUUFBUSxHQUFHLEtBQUtyQixJQUF0QjtJQUNBLE1BQU1zQixXQUFXLEdBQUdELFFBQVEsQ0FBQ3RFLGFBQVQsQ0FBd0J3RSxJQUFJLElBQUl6RCxNQUFNLENBQUMwRCxJQUFQLENBQVlELElBQVosQ0FBaEMsRUFBbUQsVUFBbkQsQ0FBcEI7SUFDQSxJQUFJRSxXQUFXLEdBQUdILFdBQVcsRUFBRXpELFFBQWIsRUFBdUJMLE1BQXZCLEdBQWdDOEQsV0FBVyxDQUFDSSxFQUE1QyxHQUFpREosV0FBVyxFQUFFSyxRQUFoRjs7SUFFQSxPQUFNRixXQUFOLEVBQW1CO01BQ2pCLE1BQU1HLEtBQUssR0FBR1AsUUFBUSxDQUFDdEUsYUFBVCxDQUF1QixDQUFDO1FBQUUyRSxFQUFGO1FBQU0xRCxHQUFOO1FBQVc2RCxJQUFYO1FBQWlCaEUsUUFBakI7UUFBMkI4RCxRQUEzQjtRQUFxQ2pELE1BQXJDO1FBQTZDWjtNQUE3QyxDQUFELEtBQTJEO1FBQzlGLElBQUc0RCxFQUFFLEtBQUtELFdBQVYsRUFBc0I7VUFDcEJMLE1BQU0sQ0FBQzFELElBQVAsQ0FBWTtZQUFFRyxRQUFGO1lBQVlnRSxJQUFaO1lBQWtCN0QsR0FBbEI7WUFBdUIyRCxRQUF2QjtZQUFpQ2pELE1BQWpDO1lBQXlDWjtVQUF6QyxDQUFaLEVBRG9CLENBRXBCOztVQUNBMkQsV0FBVyxHQUFHRSxRQUFkO1VBQ0EsT0FBTyxJQUFQO1FBQ0Q7O1FBQ0QsT0FBTyxLQUFQO01BQ0QsQ0FSYSxFQVFYLFVBUlcsQ0FBZDs7TUFVQSxJQUFJLENBQUNDLEtBQUwsRUFBWTtRQUNWO1FBQ0FILFdBQVcsR0FBRzlELFNBQWQ7TUFDRDtJQUVGOztJQUVEeUQsTUFBTSxDQUFDMUQsSUFBUCxDQUFZO01BQUNHLFFBQVEsRUFBQ3dELFFBQVY7TUFBb0IzQyxNQUFNLEVBQUU7SUFBNUIsQ0FBWjtJQUNBMEMsTUFBTSxDQUFDVSxPQUFQO0lBQ0EsS0FBSzdCLFlBQUwsR0FBb0JtQixNQUFNLENBQUM1RCxNQUFQLEdBQWMsQ0FBbEM7SUFDQSxLQUFLdUUsT0FBTCxHQUFlLENBQUMsR0FBR1gsTUFBSixDQUFmO0VBQ0QsQ0FoSVc7RUFpSVpXLE9BQU8sRUFBQyxFQWpJSTtFQWtJWkMsT0FBTyxFQUFFLFVBQVNDLEtBQVQsRUFBZTtJQUN0QjtJQUNBO0lBQ0EsT0FBTyxLQUFLRixPQUFMLENBQWFHLEdBQWIsQ0FBa0IsQ0FBQ1gsSUFBRCxFQUFNWSxDQUFOLE1BQWEsRUFDcEMsR0FBR1osSUFEaUM7TUFFcENNLElBQUksRUFBQ04sSUFBSSxFQUFFTSxJQUFOLElBQWM5RixvQkFGaUI7TUFHcENpQyxHQUFHLEVBQUN1RCxJQUFJLENBQUN2RCxHQUFMLElBQVkwQyxjQUFjLENBQUNDLGdCQUFmLENBQWdDQyxLQUFoQyxDQUFzQ3dCLFNBSGxCO01BSXBDO01BQ0F4RSxNQUxvQztNQU1wQ1ksUUFOb0M7TUFPcENDLFFBUG9DO01BUXBDRSxzQkFSb0M7TUFTcENHLE9BVG9DO01BVXBDRSxnQkFWb0M7TUFXcEM7TUFDQXdCLElBQUksRUFBSTJCLENBQUMsR0FBRSxDQUFMLEdBQVUsS0FBS0osT0FBTCxDQUFhTSxFQUFiLENBQWdCRixDQUFDLEdBQUMsQ0FBbEIsR0FBc0JOLElBQXRCLElBQThCOUYsb0JBQXhDLEdBQStELEtBWmpDOztNQWFwQztBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO01BQ011RyxXQUFXLEVBQUV4RyxHQUFHLENBQUM7UUFDZixnQkFBZSxJQURBO1FBRWYseUJBQXdCLElBRlQ7UUFHZix5QkFBd0JxRyxDQUFDLEtBQUssS0FBS2xDLFlBSHBCO1FBSWYsK0JBQWlDZ0MsS0FBSyxLQUFLLE9BQVYsSUFBcUJFLENBQUMsR0FBRyxLQUFLbEMsWUFBL0IsSUFBa0RnQyxLQUFLLEtBQUssSUFBVixJQUFrQkUsQ0FBQyxJQUFJLEtBQUtsQyxZQUE5RSxJQUFpR2dDLEtBQUssS0FBSyxNQUFWLElBQW9CRSxDQUFDLEdBQUcsS0FBS2xDLFlBQUwsR0FBa0IsQ0FKNUo7UUFLZiw4QkFBK0JnQyxLQUFLLEtBQU0sSUFBWCxJQUFtQkUsQ0FBQyxHQUFDLEtBQUtsQyxZQUFMLEdBQWtCLENBQXhDLElBQWdEZ0MsS0FBSyxLQUFLLE1BQVYsSUFBb0JFLENBQUMsSUFBSSxLQUFLbEM7TUFMN0YsQ0FBRDtJQXJCb0IsQ0FBYixDQUFsQixDQUFQO0VBNkJELENBbEtXO0VBbUtac0MsRUFBRSxFQUFFLFVBQVVaLFFBQVYsRUFBb0I7SUFFdEIsSUFBRyxDQUFDQSxRQUFKLEVBQWM7TUFDWixNQUFPLGtDQUFpQ0EsUUFBUyxFQUFqRDtJQUNEO0lBQ0Q7QUFDSjtBQUNBO0FBQ0E7OztJQUVJLE1BQU1hLElBQUksR0FBRyxLQUFLVCxPQUFMLENBQWFNLEVBQWIsQ0FBZ0IsS0FBS3BDLFlBQXJCLEVBQW1DcEMsUUFBbkMsQ0FBNENULElBQTVDLENBQWlELENBQUM7TUFDN0RzRTtJQUQ2RCxDQUFELEtBRXhEQSxFQUFFLEtBQUtDLFFBRkEsQ0FBYjs7SUFJQSxJQUFHLENBQUNhLElBQUosRUFBVTtNQUNSLE1BQU0sSUFBSUMsS0FBSixDQUFVLDhCQUE2QmQsUUFBdkMsQ0FBTjtJQUNEOztJQUVELEtBQUsxQixZQUFMLEdBQW1CLEtBQUtBLFlBQUwsR0FBbUIsQ0FBbkIsR0FBdUIsS0FBS0YsSUFBNUIsR0FBbUMsS0FBS0UsWUFBTCxHQUFtQixDQUF0RCxHQUEwRCxLQUFLQSxZQUFsRjtJQUNBLEtBQUs4QixPQUFMLENBQWEsS0FBSzlCLFlBQWxCLElBQWtDdUMsSUFBbEM7SUFDQSxLQUFLRSxNQUFMLENBQVksSUFBWjtFQUNELENBeExXO0VBeUxaQyxJQUFJLEVBQUUsWUFBWTtJQUNoQixJQUFHLEtBQUsxQyxZQUFMLEtBQXFCLENBQXhCLEVBQTJCO01BQUM7SUFBUTs7SUFDcEMsS0FBS0EsWUFBTCxHQUFtQixLQUFLQSxZQUFMLEdBQW1CLENBQW5CLElBQXdCLENBQXhCLEdBQTRCLEtBQUtBLFlBQUwsR0FBbUIsQ0FBL0MsR0FBbUQsS0FBS0EsWUFBM0U7SUFDQSxLQUFLeUMsTUFBTCxDQUFZLE1BQVo7RUFDRCxDQTdMVztFQThMWkEsTUFBTSxFQUFDLFVBQVNULEtBQVQsRUFBZ0I7SUFDckIsTUFBTVcsSUFBSSxHQUFHLEtBQUszQixPQUFMLEVBQWI7SUFDQTJCLElBQUksQ0FBQ0MsU0FBTCxHQUFpQmpILFFBQVEsQ0FBQzhHLE1BQVQsQ0FDZixLQUFLbEQsU0FBTCxDQUFlQyxLQURBLEVBRWY7TUFDRTJCLE1BQU0sRUFBRSxLQUFLWSxPQUFMLENBQWFDLEtBQWI7SUFEVixDQUZlLEVBS2Y7TUFDRXBFLFFBQVEsRUFBRSxLQUFLMkIsU0FBTCxDQUFlSTtJQUQzQixDQUxlLENBQWpCOztJQVVBLElBQUdxQyxLQUFLLEtBQUssTUFBYixFQUFxQjtNQUNuQjtJQUNEOztJQUVELE1BQU1iLE1BQU0sR0FBRyxDQUFDLEdBQUd3QixJQUFJLENBQUNyRyxnQkFBTCxDQUFzQixlQUF0QixDQUFKLENBQWY7SUFDQSxNQUFNdUcsT0FBTyxHQUFJMUIsTUFBTSxDQUFDaUIsRUFBUCxDQUFVLEtBQUtwQyxZQUFmLENBQWpCOztJQUVBLElBQUcyQyxJQUFJLENBQUNHLGFBQUwsQ0FBbUJDLFNBQW5CLEdBQStCLEtBQUtsRCxlQUFwQyxJQUF1RCxLQUFLRyxZQUFMLEdBQW1CLENBQTdFLEVBQWdGO01BQzlFNkMsT0FBTyxDQUFDcEQsYUFBUixDQUFzQixjQUF0QixFQUFzQ3VELGNBQXRDLENBQXFEO1FBQUNDLEtBQUssRUFBQyxPQUFQO1FBQWVDLFNBQVMsRUFBQztNQUF6QixDQUFyRDtJQUNEOztJQUVEQyxVQUFVLENBQUMsTUFBSTtNQUViTixPQUFPLENBQUNPLFNBQVIsQ0FBa0JDLE1BQWxCLENBQXlCLDZCQUF6QixFQUF1RCw0QkFBdkQ7O01BQ0EsUUFBUXJCLEtBQVI7UUFFQSxLQUFLLElBQUw7VUFDRWIsTUFBTSxDQUFDaUIsRUFBUCxDQUFVLEtBQUtwQyxZQUFMLEdBQWtCLENBQTVCLEVBQStCb0QsU0FBL0IsQ0FBeUNFLEdBQXpDLENBQTZDLDRCQUE3QztVQUNBOztRQUVGLEtBQUssTUFBTDtVQUNFbkMsTUFBTSxDQUFDaUIsRUFBUCxDQUFVLEtBQUtwQyxZQUFMLEdBQWtCLENBQTVCLEVBQStCb0QsU0FBL0IsQ0FBeUNFLEdBQXpDLENBQTZDLDZCQUE3QztVQUNBOztRQUVGO01BVkE7O01BY0FILFVBQVUsQ0FBQyxNQUFJO1FBQ2I7QUFDUjtBQUNBO0FBQ0E7UUFDUWhDLE1BQU0sQ0FBQzNFLE9BQVAsQ0FBZ0JnRCxLQUFLLElBQUk7VUFDdkIsSUFBRyxDQUFDQSxLQUFLLENBQUM0RCxTQUFOLENBQWdCRyxRQUFoQixDQUF5Qix1QkFBekIsQ0FBSixFQUF1RDtZQUNyRC9ELEtBQUssQ0FBQ2dFLEtBQU4sQ0FBWUMsVUFBWixHQUF5QixRQUF6QjtVQUNEO1FBQ0YsQ0FKRDtRQUtGO0FBQ047QUFDQTtBQUNBO01BQ08sQ0FkUyxFQWNSLEdBZFEsQ0FBVjtJQWdCRCxDQWpDUyxFQWlDUixFQWpDUSxDQUFWLENBdkJxQixDQXdEZDtFQUNSLENBdlBXO0VBd1BaQyxJQUFJLEVBQUUsa0JBQWdCO0lBRXBCLE1BQU1DLElBQUksR0FBRyxNQUFNQyxLQUFLLENBQUMsS0FBS3BELFNBQUwsRUFBRCxDQUF4QjtJQUNBLE1BQU1ULElBQUksR0FBRyxNQUFNNEQsSUFBSSxDQUFDRSxJQUFMLEVBQW5CO0lBR0EsSUFBSUMsWUFBWSxHQUFHQyxNQUFNLENBQUNDLG1CQUFQLENBQTJCakUsSUFBM0IsQ0FBbkI7O0lBRUEsSUFBSSxDQUFDK0QsWUFBWSxDQUFDdkcsTUFBbEIsRUFBMEI7TUFDeEIsTUFBTSxJQUFJaUYsS0FBSixDQUFVLDRCQUFWLEVBQXdDekMsSUFBeEMsQ0FBTjtJQUNEOztJQUNELE1BQU1xQixRQUFRLEdBQUcwQyxZQUFZLENBQUM3QixHQUFiLENBQWlCZ0MsWUFBWSxJQUFJO01BQ2hELE1BQU0zQyxJQUFJLEdBQUd2QixJQUFJLENBQUNrRSxZQUFELENBQUosQ0FBbUJDLFNBQW5CLENBQTZCLENBQTdCLENBQWI7TUFDQTVDLElBQUksQ0FBQ0ksUUFBTCxHQUFnQixFQUFoQjtNQUNBLE9BQU9KLElBQVA7SUFDRCxDQUpnQixDQUFqQjtJQU1BLE1BQU1ELFdBQVcsR0FBR0QsUUFBUSxDQUFDdEUsYUFBVCxDQUF3QndFLElBQUksSUFBSXpELE1BQU0sQ0FBQzBELElBQVAsQ0FBWUQsSUFBWixDQUFoQyxFQUFtRCxVQUFuRCxDQUFwQjs7SUFFQSxJQUFHRCxXQUFILEVBQWdCO01BQ2RBLFdBQVcsQ0FBQ3hELE1BQVosR0FBcUIsSUFBckI7TUFDQXdELFdBQVcsQ0FBQzVDLE1BQVosR0FBcUIsSUFBckI7SUFDRDs7SUFFRCxJQUFJK0MsV0FBVyxHQUFHSCxXQUFXLEVBQUVLLFFBQS9COztJQUVBLE9BQU1GLFdBQU4sRUFBbUI7TUFDakIsTUFBTUcsS0FBSyxHQUFHUCxRQUFRLENBQUN0RSxhQUFULENBQXdCd0UsSUFBRCxJQUFVO1FBQzdDLElBQUdBLElBQUksQ0FBQ0csRUFBTCxLQUFZRCxXQUFmLEVBQTRCO1VBQzFCO1VBQ0FBLFdBQVcsR0FBR0YsSUFBSSxDQUFDSSxRQUFuQjtVQUNBSixJQUFJLENBQUM3QyxNQUFMLEdBQWEsSUFBYjtVQUNBLE9BQU8sSUFBUDtRQUNEOztRQUNELE9BQU8sS0FBUDtNQUNELENBUmEsRUFRWCxVQVJXLENBQWQ7O01BVUEsSUFBSSxDQUFDa0QsS0FBTCxFQUFZO1FBQ1Y7UUFDQUgsV0FBVyxHQUFHOUQsU0FBZDtNQUNEO0lBQ0Y7O0lBQ0QsS0FBS3FDLElBQUwsR0FBWXFCLFFBQVo7RUFDRCxDQW5TVztFQW9TWitDLEtBQUssRUFBRSxrQkFBZ0I7SUFDckIsTUFBTS9ELFNBQVMsR0FBRy9ELFFBQVEsQ0FBQ29ELGFBQVQsQ0FBdUIsS0FBS1UsU0FBTCxDQUFlQyxTQUF0QyxDQUFsQjs7SUFDQSxJQUFHLENBQUMsS0FBS1ksT0FBTCxFQUFELElBQW1CLENBQUNaLFNBQXZCLEVBQWtDO01BQ2hDLE1BQU0sSUFBSW9DLEtBQUosQ0FBVSxzQkFBVixDQUFOO0lBQ0QsQ0FKb0IsQ0FLckI7OztJQUNBcEMsU0FBUyxDQUFDZ0QsU0FBVixDQUFvQkUsR0FBcEIsQ0FBd0IsZ0JBQXhCO0lBQ0EsS0FBS2IsTUFBTCxDQUFZLE1BQVo7O0lBQ0EsSUFBSTtNQUNGLE1BQU0sS0FBS2lCLElBQUwsRUFBTjtJQUNELENBRkQsQ0FFRSxPQUFNdEYsQ0FBTixFQUFTO01BQ1RDLE9BQU8sQ0FBQytGLEtBQVIsQ0FBYyw2SEFBZCxFQUE0SWhHLENBQTVJO01BQ0EsS0FBS2lHLGNBQUw7TUFDQTtJQUNEO0lBQ0Q7QUFDSjtBQUNBOzs7SUFDSSxLQUFLbkQsZ0JBQUw7SUFDQSxLQUFLdUIsTUFBTCxDQUFZLE9BQVo7SUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0lBQ0ksS0FBS3pCLE9BQUwsR0FBZXNELGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDLENBQUM7TUFDeENDLE1BQU0sRUFBRTtRQUNObkIsU0FETTtRQUVOb0IsS0FBSyxFQUFFL0MsRUFGRDtRQUdOcUI7TUFITTtJQURnQyxDQUFELEtBTW5DO01BQ0o7TUFDQSxJQUFJTSxTQUFTLElBQUlBLFNBQVMsQ0FBQ0csUUFBVixDQUFtQixLQUFLcEQsU0FBTCxDQUFlRyxPQUFsQyxDQUFqQixFQUE2RDtRQUMzRCxLQUFLZ0MsRUFBTCxDQUFRYixFQUFSO01BQ0QsQ0FGRCxNQUVPLElBQUkyQixTQUFTLElBQUlBLFNBQVMsQ0FBQ0csUUFBVixDQUFtQixLQUFLcEQsU0FBTCxDQUFlSSxJQUFsQyxDQUFiLElBQXdEdUMsYUFBYSxFQUFFTSxTQUFmLElBQTRCTixhQUFhLEVBQUVNLFNBQWYsQ0FBeUJHLFFBQXpCLENBQWtDLEtBQUtwRCxTQUFMLENBQWVJLElBQWpELENBQXhGLEVBQWdKO1FBQ3JKLEtBQUttQyxJQUFMO01BQ0Q7SUFDRixDQWJEO0VBY0QsQ0E1VVc7RUE2VVorQixVQUFVLEVBQUcsWUFBVztJQUN0QixPQUFPdkcsTUFBTSxDQUFDQyxRQUFQLENBQWdCdUcsSUFBaEIsS0FBeUIsT0FBekIsSUFBb0MsS0FBS0MsWUFBTCxDQUFrQkMsWUFBbEIsQ0FBK0IsZUFBL0IsTUFBb0QsTUFBL0Y7RUFDRCxDQS9VVztFQWdWWkMsZUFBZSxFQUFFLFlBQVc7SUFDMUJ4RixLQUFLLENBQUNPLElBQU4sQ0FBV2xELE9BQVgsQ0FBbUJvSSxFQUFuQixHQUF3QixJQUF4QixDQUQwQixDQUNJO0VBQy9CLENBbFZXO0VBbVZaVCxjQUFjLEVBQUMsWUFBVztJQUN4QmhGLEtBQUssQ0FBQ08sSUFBTixDQUFXbEQsT0FBWCxDQUFtQjZILE1BQW5CLEdBQTRCLE9BQTVCLENBRHdCLENBQ2E7O0lBQ3JDLEtBQUt2RCxPQUFMLEdBQWU0QixTQUFmLEdBQTJCLEVBQTNCLENBRndCLENBRU87O0lBQy9CLE9BQU92RCxLQUFLLENBQUNPLElBQU4sQ0FBV2xELE9BQVgsQ0FBbUJvSSxFQUExQixDQUh3QixDQUdNOztJQUM5QjVHLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQnVHLElBQWhCLEdBQXFCLE9BQXJCLENBSndCLENBSU07RUFDL0IsQ0F4Vlc7RUF5VlpLLFVBQVUsRUFBRyxZQUFXO0lBQ3RCLElBQUksS0FBS04sVUFBTCxFQUFKLEVBQXVCO01BQ3JCLEtBQUtFLFlBQUwsQ0FBa0JLLFlBQWxCLENBQStCLGVBQS9CLEVBQWdELE9BQWhEO01BQ0EsS0FBS3BGLElBQUwsQ0FBVWxELE9BQVYsQ0FBa0I2SCxNQUFsQixHQUEyQixPQUEzQjtNQUNBcEksYUFBYSxDQUFDLEtBQUQsQ0FBYjtJQUNELENBSkQsTUFJTztNQUNMQSxhQUFhLENBQUMsSUFBRCxDQUFiO01BQ0EsS0FBS3lELElBQUwsQ0FBVWxELE9BQVYsQ0FBa0I2SCxNQUFsQixHQUEyQixNQUEzQjtNQUNBLEtBQUtJLFlBQUwsQ0FBa0JLLFlBQWxCLENBQStCLGVBQS9CLEVBQWdELE1BQWhEO0lBQ0QsQ0FUcUIsQ0FVdEI7OztJQUNBLEtBQUtMLFlBQUwsQ0FBa0JNLEtBQWxCO0VBQ0Q7QUFyV1csQ0FBZDtBQXdXQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTVJLFFBQVEsQ0FBQ2lJLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxNQUFNO0VBQ2xEO0VBQ0FqRixLQUFLLENBQUNzRixZQUFOLEdBQXFCdEksUUFBUSxDQUFDb0QsYUFBVCxDQUF1Qix3QkFBdkIsQ0FBckI7O0VBQ0EsSUFBRyxDQUFDSixLQUFLLENBQUNzRixZQUFWLEVBQXVCO0lBQ3JCLE1BQU0sK0JBQU47RUFDRCxDQUxpRCxDQU1sRDs7O0VBQ0F0RixLQUFLLENBQUNPLElBQU4sR0FBYXZELFFBQVEsQ0FBQ29ELGFBQVQsQ0FBdUIsT0FBdkIsQ0FBYjs7RUFDQSxJQUFJLENBQUNKLEtBQUssQ0FBQ08sSUFBWCxFQUFpQjtJQUNmdkIsT0FBTyxDQUFDK0YsS0FBUixDQUFjLHVEQUFkO0lBQ0E7RUFDRDs7RUFFRC9FLEtBQUssQ0FBQ3dGLGVBQU47RUFFQTtBQUNGO0FBQ0E7O0VBQ0V4SSxRQUFRLENBQUNpSSxnQkFBVCxDQUEwQixTQUExQixFQUFxQyxVQUFVbEcsQ0FBVixFQUFhO0lBQ2hELElBQUksQ0FBQ0EsQ0FBQyxDQUFDOEcsR0FBRixJQUFTLFFBQVQsSUFBcUI5RyxDQUFDLENBQUM4RyxHQUFGLElBQVMsS0FBOUIsSUFBdUM5RyxDQUFDLENBQUMrRyxPQUFGLElBQWEsRUFBckQsS0FBNEQ5RixLQUFLLENBQUNvRixVQUFOLEVBQWhFLEVBQW9GO01BQ2xGcEYsS0FBSyxDQUFDMEYsVUFBTjtJQUNEO0VBQ0YsQ0FKRDs7RUFNQSxNQUFNWixLQUFLLEdBQUcsWUFBVztJQUN2QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDSTlFLEtBQUssQ0FBQ0MsZ0JBQU47SUFDQUQsS0FBSyxDQUFDc0YsWUFBTixDQUFtQlMsbUJBQW5CLENBQXVDLE9BQXZDLEVBQStDakIsS0FBL0M7SUFDQTlFLEtBQUssQ0FBQzhFLEtBQU47RUFDRCxDQVZEO0VBWUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztFQUNFOUUsS0FBSyxDQUFDc0YsWUFBTixDQUFtQkwsZ0JBQW5CLENBQW9DLE9BQXBDLEVBQTRDSCxLQUE1QztFQUNBOUUsS0FBSyxDQUFDc0YsWUFBTixDQUFtQkwsZ0JBQW5CLENBQW9DLE9BQXBDLEVBQTRDLE1BQUlqRixLQUFLLENBQUMwRixVQUFOLEVBQWhEO0VBRUE7QUFDRjtBQUNBOztFQUNFLElBQUkxRixLQUFLLENBQUNvRixVQUFOLEVBQUosRUFBd0I7SUFDdEJ2RyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0J1RyxJQUFoQixHQUF1QixFQUF2QjtJQUNBUCxLQUFLO0lBQ0w5RSxLQUFLLENBQUMwRixVQUFOO0VBQ0Q7QUFDRixDQXRERCIsInNvdXJjZXMiOlsid2VicGFjazovL2hkYnQvLi9zcmMvanMvbmF2LWdsb2JhbC5qcz9jZjAyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE11c3RhY2hlID0gcmVxdWlyZSgnbXVzdGFjaGUnKTtcbmNvbnN0IGNscyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcbmNvbnN0IGZyb250cGFnZVRyYW5zbGF0aW9uID0gRHJ1cGFsLnQoJ0Zyb250cGFnZScsIHt9LCB7IGNvbnRleHQ6ICdHbG9iYWwgbmF2aWdhdGlvbiBtb2JpbGUgbWVudSB0b3AgbGV2ZWwnIH0pO1xuXG4vKipcbiAqIFJlbGF0ZWQgdHdpZyB0ZW1wbGF0ZXM6XG4gKiAtIGJsb2NrLS1tb2JpbGUtbmF2aWdhdGlvbi5odG1sLnR3aWdcbiAqIC0gbWVudS0tbW9iaWxlLmh0bWwudHdpZ1xuICpcbiAqIFJlbGF0ZWQgc3R5bGVzOlxuICogY29tcG9uZW50cy9uYXZpZ2F0aW9uL2dsb2JhbFxuICogLSBfbW1lbnUuc2Nzc1xuICogLSBfbWVnYW1lbnUuc2Nzc1xuICogLSBfbWVudS10b2dnbGUuc2Nzc1xuICpcbiAqL1xuXG5jb25zdCB3aWRnZXRzVG9IaWRlU2VsZWN0b3IgPSBbXG4gICcjY2hhdC1sZWlqdWtlLXdyYXBwZXInLFxuICAnLnNpLXRvZ2dsZS1jb250YWluZXInLCAvLyBTaXRlaW1wcm92ZSBhY2Nlc3NpYmlsaXR5IHRvb2xcbiAgJy5jeC10aGVtZS1oZWxzaW5raS1ibHVlJywgLy8gR2VuZXN5cyBjaGF0IGluIGt5bXAgYW5kIHNvdGVcbiAgJyNzbWFydHRpLXdyYXBwZXInLCAvLyBTbWFydHRpIGNoYXRib3QgaW4ga3ltcFxuICAnLmFjYS0tYnV0dG9uLS1kZXNrdG9wLCAuYWNhLS1idXR0b24tLW1vYmlsZSwgLmFjYS0td2lkZ2V0LS1tb2JpbGUsIC5hY2EtLXdpZGdldC0tZGVza3RvcCwgI2FjYS0td2lkZ2V0LWJ1dHRvbi1jbG9zZScsIC8vIFdhdHNvbiBjaGF0Ym90IGluIGFzdW1pbmVuXG4gICcjYmxvY2sta3V1cmFoZWFsdGhjaGF0JywgLy8gS3V1cmFoZWFsdGggaW4gc290ZVxuICAnI2VkMTF5LXBhbmVsJyAvLyBFZGl0b3JpYTExeSBhY2Nlc3NpYmlsaXR5IHRvb2xcbl07XG5cbmZ1bmN0aW9uIHRvZ2dsZVdpZGdldHMoaGlkZSkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHdpZGdldHNUb0hpZGVTZWxlY3Rvci5qb2luKCcsJykpLmZvckVhY2god2lkZ2V0ID0+IHtcbiAgICAvKioqXG4gICAgICogV2lkZ2V0cyBhcmUgaGlkZGVuIHVzaW5nIFtkYXRhLV0gc2VsZWN0b3JzXG4gICAgICovXG4gICAgaWYgKGhpZGUpIHtcbiAgICAgIHdpZGdldC5kYXRhc2V0LmNzc21lbnVIaWRlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHdpZGdldC5kYXRhc2V0LmNzc21lbnVIaWRlO1xuICAgIH1cbiAgfSk7XG59XG5cblxuQXJyYXkucHJvdG90eXBlLmZpbmRSZWN1cnNpdmUgPSBmdW5jdGlvbihwcmVkaWNhdGUsIGNoaWxkcmVuUHJvcGVydHlOYW1lKXtcbiAgaWYoIWNoaWxkcmVuUHJvcGVydHlOYW1lKXtcbiAgICB0aHJvdyAnZmluZFJlY3Vyc2l2ZSByZXF1aXJlcyBwYXJhbWV0ZXIgYGNoaWxkcmVuUHJvcGVydHlOYW1lYCc7XG4gIH1cbiAgbGV0IGFycmF5ID0gW107XG4gIGFycmF5ID0gdGhpcztcbiAgbGV0IGluaXRpYWxGaW5kID0gIGFycmF5LmZpbmQocHJlZGljYXRlKTtcbiAgbGV0IGVsZW1lbnRzV2l0aENoaWxkcmVuICA9IGFycmF5LmZpbHRlcih4PT54W2NoaWxkcmVuUHJvcGVydHlOYW1lXSk7XG4gIGlmKGluaXRpYWxGaW5kKXtcbiAgICByZXR1cm4gaW5pdGlhbEZpbmQ7XG4gIH0gZWxzZSBpZihlbGVtZW50c1dpdGhDaGlsZHJlbi5sZW5ndGgpe1xuICAgIGxldCBjaGlsZEVsZW1lbnRzID0gW107XG4gICAgZWxlbWVudHNXaXRoQ2hpbGRyZW4uZm9yRWFjaCh4PT57XG4gICAgICBjaGlsZEVsZW1lbnRzLnB1c2goLi4ueFtjaGlsZHJlblByb3BlcnR5TmFtZV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBjaGlsZEVsZW1lbnRzLmZpbmRSZWN1cnNpdmUocHJlZGljYXRlLCBjaGlsZHJlblByb3BlcnR5TmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmljIG9iamVjdCBoZWxwZXJzIGZvciB0ZW1wbGF0ZSBjb250ZXh0c1xuICovXG5cbi8qKlxuICogQ2hlY2sgaWYgY3VycmVudCBnaXZlbiBtZW51IGl0ZW0gaGFzIGl0ZW1zXG4gKiBAcmV0dXJuIHtib29sZWFufSBjdXJyZW50IG9iamVjdCBoYXMgc3ViX3RyZWUgd2l0aCBpdGVtcyBpbiBpdC5cbiAqL1xuY29uc3QgYnV0dG9uID0gZnVuY3Rpb24oKXtcbi8vIHJldHVybiB0aGlzLmhhc0l0ZW1zXG4gIHJldHVybiB0aGlzLnN1Yl90cmVlPy5sZW5ndGg+MDtcbn07XG5cblxuLyoqXG4gKiBDaGVjayBpZiAgZ2l2ZW4gbWVudSBpdGVtIHVybCBwYXRobmFtZSBtYXRjaGVzIGN1cnJlbnQgYnJvd3NlciBwYXRobmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn0gY3VycmVudCBvYmplY3QgaGFzIHVybCBhbmQgdXJsIHBhdGhuYW1lIG1hdGNoZXMgY3VycmVudCBsb2NhdGlvbiBwYXRobmFtZVxuICovXG5jb25zdCBhY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICF0aGlzLmV4dGVybmFsICYmIHRoaXMudXJsICYmIG5ldyBVUkwodGhpcy51cmwpLnBhdGhuYW1lID09PSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gIH1cbiAgY2F0Y2goZSkge1xuICAgIGNvbnNvbGUud2FybignSW52YWxpZCB1cmwgZ2l2ZW4gdG8gXCJhY3RpdmVcIi1oZWxwZXInLCB0aGlzLnVybCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IG51bGwgYGFjdGl2ZWAgdmFsdWVzIHRvIGJvb2xlYW4gZm9yIG11c3RhY2hlIHRlbXBsYXRlcyB0byBhdm9pZCB1c2luZyBwYXJlbnQgdmFsdWVzXG4gKiBAcmV0dXJuIHtib29sZWFufSBkb2VzIGN1cnJlbnQgb2JqZWN0IGhhdmUgYWN0aXZlIHNldCBhbmQgdHJ1ZWlzaFxuICovXG5jb25zdCBpc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5hY3RpdmU7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgbnVsbCBgaW5QYXRoYCB2YWx1ZXMgdG8gYm9vbGVhbiBmb3IgbXVzdGFjaGUgdGVtcGxhdGVzIHRvIGF2b2lkIHVzaW5nIHBhcmVudCB2YWx1ZXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGRvZXMgY3VycmVudCBvYmplY3QgaGF2ZSBpblBhdGggc2V0IGFuZCB0cnVlaXNoXG4gKi9cbmNvbnN0IGlzSW5QYXRoID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLmluUGF0aDtcbn07XG5cblxuLyoqKlxuICogQ29udmVydCBhdHRyaWJ1dGVzIHRvIHRvIHRlbXBsYXRlLWZyaWVuZGx5IG9iamVjdFxuICogQHJldHVybiB7b2JqZWN0fSAge2V4dGVybmFsOmJvb2wsIHByb3RvY29sOmJvb2x9XG4gKi9cbmNvbnN0IGV4dGVybmFsTGlua0F0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgcmV0dXJuIHtcbiAgICBleHRlcm5hbDp0aGlzLmF0dHJpYnV0ZXNbJ2RhdGEtZXh0ZXJuYWwnXSB8fCB0aGlzLmV4dGVybmFsIHx8IGZhbHNlLFxuICAgIHByb3RvY29sOnRoaXMuYXR0cmlidXRlc1snZGF0YS1wcm90b2NvbCddfHwgZmFsc2UsXG4gIH07XG5cbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0IG51bGwgYGF0dHJpYnV0ZXMubGFuZ2AgdmFsdWVzIHRvIGJvb2xlYW4gZm9yIG11c3RhY2hlIHRlbXBsYXRlcyB0byBhdm9pZCB1c2luZyBwYXJlbnQgdmFsdWVzXG4gKiBAcmV0dXJuIHtib29sZWFufSBkb2VzIGN1cnJlbnQgb2JqZWN0IGhhdmUgYXR0cmlidXRlcy5sYW5nIHNldCBhbmQgdHJ1ZWlzaFxuICovXG5jb25zdCBoYXNMYW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISF0aGlzLmF0dHJpYnV0ZXM/Lmxhbmc7XG59O1xuXG4vKipcbiAqIERldGVybWluaW5lIGljb24gdHlwZSBhbmQgdGV4dCBmb3IgZXh0ZXJuYWwgbGlua1xuICogQHJldHVybiB7b2JqZWN0fSB7Y2xhc3M6IGxpc3Qgb2YgcmVsYXRlZCBDU1MgY2xhc3NlcywgdGV4dDogdHJhbnNsYXRlZCBkZXNjcmlwdGlvbiB0ZXh0IH1cbiAqL1xuY29uc3QgZXh0ZXJuYWxMaW5rSWNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmV4dGVybmFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4dGVybmFsTGlua0ljb24uSUNPTlNbIHRoaXMuYXR0cmlidXRlc1snZGF0YS1wcm90b2NvbCddXSB8fCBleHRlcm5hbExpbmtJY29uLklDT05TLmV4dGVybmFsO1xufTtcblxuZXh0ZXJuYWxMaW5rSWNvbi5JQ09OUyA9ICB7XG4gIG1haWx0bzoge1xuICAgIGNsYXNzOiAnbGlua19fdHlwZSBsaW5rX190eXBlLS1tYWlsdG8nLFxuICAgIHRleHQ6IERydXBhbC50KCdMaW5rIG9wZW5zIGRlZmF1bHQgbWFpbCBwcm9ncmFtJywge30sIHsgY29udGV4dDogJ0V4cGxhbmF0aW9uIGZvciBzY3JlZW4tcmVhZGVyIHNvZnR3YXJlIHRoYXQgdGhlIGljb24gdmlzaWJsZSBuZXh0IHRvIHRoaXMgbGluayBtZWFucyB0aGF0IHRoZSBsaW5rIG9wZW5zIGRlZmF1bHQgbWFpbCBwcm9ncmFtLicgfSlcbiAgfSxcbiAgdGVsOntcbiAgICBjbGFzczogJ2xpbmtfX3R5cGUgbGlua19fdHlwZS0tdGVsJyxcbiAgICB0ZXh0OiBEcnVwYWwudCgnTGluayBzdGFydHMgYSBwaG9uZSBjYWxsJywge30sIHsgY29udGV4dDogJ0V4cGxhbmF0aW9uIGZvciBzY3JlZW4tcmVhZGVyIHNvZnR3YXJlIHRoYXQgdGhlIGljb24gdmlzaWJsZSBuZXh0IHRvIHRoaXMgbGluayBtZWFucyB0aGF0IHRoZSBsaW5rIHN0YXJ0cyBhIHBob25lIGNhbGwuJyB9KVxuICB9LFxuICBleHRlcm5hbDoge1xuICAgIGNsYXNzOiAnbGlua19fdHlwZSBsaW5rX190eXBlLS1leHRlcm5hbCcsXG4gICAgdGV4dDogRHJ1cGFsLnQoJ0xpbmsgbGVhZHMgdG8gZXh0ZXJuYWwgc2VydmljZScsIHt9LCB7IGNvbnRleHQ6ICdFeHBsYW5hdGlvbiBmb3Igc2NyZWVuLXJlYWRlciBzb2Z0d2FyZSB0aGF0IHRoZSBpY29uIHZpc2libGUgbmV4dCB0byB0aGlzIGxpbmsgbWVhbnMgdGhhdCB0aGUgbGluayBsZWFkcyB0byBhbiBleHRlcm5hbCBzZXJ2aWNlLicgfSlcbiAgfVxuXG59O1xuXG4vKipcbiAqIFBhbmVsIG1haW4gb2JqZWN0LlxuICovXG5cbmNvbnN0IFBhbmVsID0ge1xuICBjb21waWxlVGVtcGxhdGVzIDogZnVuY3Rpb24oKXtcbiAgICB0aGlzLnRlbXBsYXRlcyA9IHsgcGFuZWw6IGBcbnt7I3BhbmVsc319XG4gIDxzZWN0aW9uIGNsYXNzPVwie3twYW5lbF9jbGFzc319XCI+XG4gICAgPGRpdiBjbGFzcz1cIm1tZW51X19wYW5lbC1ib2R5XCI+XG4gICAgICB7eyNiYWNrfX1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm1tZW51X19iYWNrXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJtbWVudV9fYmFjay13cmFwcGVyXCI+e3tiYWNrfX08L3NwYW4+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAge3svYmFja319XG4gICAgICA8YSBocmVmPVwie3t1cmx9fVwiIGNsYXNzPVwibW1lbnVfX3RpdGxlLWxpbmt7eyNpc0luUGF0aH19IG1tZW51X190aXRsZS1saW5rLS1pbi1wYXRoe3svaXNJblBhdGh9fVwie3sjaXNBY3RpdmV9fSBhcmlhLWN1cnJlbnQ9XCJwYWdlXCJ7ey9pc0FjdGl2ZX19XG5cbiAgICAgIHt7I2V4dGVybmFsTGlua0F0dHJpYnV0ZXMuZXh0ZXJuYWx9fVxuICAgICAgICBkYXRhLWV4dGVybmFsPVwidHJ1ZVwiXG4gICAgICB7ey9leHRlcm5hbExpbmtBdHRyaWJ1dGVzLmV4dGVybmFsfX1cblxuICAgICAge3sjZXh0ZXJuYWxMaW5rQXR0cmlidXRlcy5wcm90b2NvbH19XG4gICAgICAgIGRhdGEtcHJvdG9jb2w9XCJ7e2V4dGVybmFsTGlua0F0dHJpYnV0ZXMucHJvdG9jb2x9fVwiXG4gICAgICB7ey9leHRlcm5hbExpbmtBdHRyaWJ1dGVzLnByb3RvY29sfX1cblxuICAgICAgPjxzcGFuIGNsYXNzPVwibW1lbnVfX2xpbmtfX3RleHRcIlxuXG4gICAgICB7eyNoYXNMYW5nfX1cbiAgICAgICAgbGFuZz1cInt7YXR0cmlidXRlcy5sYW5nfX1cIlxuICAgICAge3svaGFzTGFuZ319XG5cbiAgICAgID57e25hbWV9fTwvc3Bhbj57eyNleHRlcm5hbExpbmtJY29ufX0gPHNwYW4gY2xhc3M9XCJ7e2NsYXNzfX1cIiBhcmlhLWxhYmVsPVwiKHt7dGV4dH19KVwiPjwvc3Bhbj57ey9leHRlcm5hbExpbmtJY29ufX08L2E+XG4gICAgICB7ez5zdWJfdHJlZX19XG4gICAgPC9kaXY+XG4gICAgJHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbW1lbnVfX2Zvb3RlcicpPy5vdXRlckhUTUx9XG4gIDwvc2VjdGlvbj5cbnt7L3BhbmVsc319XG5cbnt7XnBhbmVsc319XG48ZGl2IGNsYXNzPVwibW1lbnVfX2xvYWRpbmdcIj5cbiAgPGRpdiBjbGFzcz1cImhkcy1sb2FkaW5nLXNwaW5uZXJcIj5cbiAgICA8ZGl2PjwvZGl2PlxuICAgIDxkaXY+PC9kaXY+XG4gICAgPGRpdj48L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbnt7L3BhbmVsc319XG5gLFxuICAgIGxpc3Q6XG4gIGBcbiAgPHVsIGNsYXNzPVwibW1lbnVfX2l0ZW1zXCI+XG4gICAge3sjc3ViX3RyZWV9fVxuICAgICAgPGxpIGNsYXNzPVwibW1lbnVfX2l0ZW1cIj5cblxuICAgICAgICA8YSBocmVmPVwie3t1cmx9fVwiIGNsYXNzPVwibW1lbnVfX2l0ZW0tbGlua3t7I2lzSW5QYXRofX0gbW1lbnVfX2l0ZW0tbGluay0taW4tcGF0aHt7L2lzSW5QYXRofX1cInt7I2lzQWN0aXZlfX0gYXJpYS1jdXJyZW50PVwicGFnZVwie3svaXNBY3RpdmV9fVxuXG4gICAgICAgIHt7I2V4dGVybmFsTGlua0F0dHJpYnV0ZXMuZXh0ZXJuYWx9fVxuICAgICAgICAgIGRhdGEtZXh0ZXJuYWw9XCJ0cnVlXCJcbiAgICAgICAge3svZXh0ZXJuYWxMaW5rQXR0cmlidXRlcy5leHRlcm5hbH19XG5cbiAgICAgICAge3sjZXh0ZXJuYWxMaW5rQXR0cmlidXRlcy5wcm90b2NvbH19XG4gICAgICAgICAgZGF0YS1wcm90b2NvbD17e2V4dGVybmFsTGlua0F0dHJpYnV0ZXMucHJvdG9jb2x9fVxuICAgICAgICB7ey9leHRlcm5hbExpbmtBdHRyaWJ1dGVzLnByb3RvY29sfX1cblxuICAgICAgICA+PHNwYW4gY2xhc3M9XCJtbWVudV9fbGlua19fdGV4dFwiXG5cbiAgICAgIHt7I2hhc0xhbmd9fVxuICAgICAgICBsYW5nPVwie3thdHRyaWJ1dGVzLmxhbmd9fVwiXG4gICAgICB7ey9oYXNMYW5nfX1cblxuICAgICAgPnt7bmFtZX19PC9zcGFuPnt7I2V4dGVybmFsTGlua0ljb259fSA8c3BhbiBjbGFzcz1cInt7Y2xhc3N9fVwiIGFyaWEtbGFiZWw9XCIoe3t0ZXh0fX0pXCI+PC9zcGFuPnt7L2V4dGVybmFsTGlua0ljb259fVxuICAgICAgICA8L2E+XG4gICAgICAgIHt7I2J1dHRvbn19XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm1tZW51X19mb3J3YXJkIFwiIHZhbHVlPXt7aWR9fSAvPlxuICAgICAgICB7ey9idXR0b259fVxuICAgICAgPC9saT5cbiAgICB7ey9zdWJfdHJlZX19XG4gIDwvdWw+XG4gYFxuICAgIH07XG4gIH0sXG4gIG1lbnU6bnVsbCxcbiAgdGVtcGxhdGVzOm51bGwsXG4gIFNDUk9MTF9UUkVTSE9MRDoxMDAsXG4gIC8vIE1heGltdW0gYXNzdW1lZCBkZXB0aCBvZiB0cmVlLiBVc2VkIGZvciBjaGVja2luZyBpZiBnb2luZyB1cCBpcyBhbGxvd2VkXG4gIHNpemU6IDEwLFxuICBkYXRhOm51bGwsXG4gIGN1cnJlbnRJbmRleDogMCxcbiAgY2FjaGVLZXk6ICdoZGJ0LW1vYmlsZS1tZW51JyxcbiAgZW5hYmxlQ2FjaGU6IGZhbHNlLFxuICBzZWxlY3RvcnM6e1xuICAgIGNvbnRhaW5lcjonI21tZW51JyxcbiAgICByb290SWQ6J21tZW51X19wYW5lbHMnLFxuICAgIGZvcndhcmQ6J21tZW51X19mb3J3YXJkJyxcbiAgICBiYWNrOidtbWVudV9fYmFjaydcbiAgfSxcbiAgZ2V0QVBJVXJsOmZ1bmN0aW9uKCl7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChkcnVwYWxTZXR0aW5ncz8uaGVsZmlfbmF2aWdhdGlvbj8ubGlua3M/LmFwaSk7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ19mb3JtYXQnLCdqc29uJyk7XG4gICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xuICB9LFxuICBnZXRSb290OmZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuc2VsZWN0b3JzLnJvb3RJZCk7XG4gIH0sXG4gIHNvcnRQYW5lbHNCeVBhdGg6ZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgcGFuZWxzID0gW107XG4gICAgY29uc3QgYWxsSXRlbXMgPSB0aGlzLmRhdGE7XG4gICAgY29uc3QgY3VycmVudEl0ZW0gPSBhbGxJdGVtcy5maW5kUmVjdXJzaXZlKCBpdGVtID0+IGFjdGl2ZS5jYWxsKGl0ZW0pICwnc3ViX3RyZWUnKTtcbiAgICBsZXQgcGFyZW50SW5kZXggPSBjdXJyZW50SXRlbT8uc3ViX3RyZWU/Lmxlbmd0aCA/IGN1cnJlbnRJdGVtLmlkIDogY3VycmVudEl0ZW0/LnBhcmVudElkO1xuXG4gICAgd2hpbGUocGFyZW50SW5kZXgpIHtcbiAgICAgIGNvbnN0IGZvdW5kID0gYWxsSXRlbXMuZmluZFJlY3Vyc2l2ZSgoeyBpZCwgdXJsLCBuYW1lLCBzdWJfdHJlZSwgcGFyZW50SWQsIGluUGF0aCwgYWN0aXZlIH0pID0+IHtcbiAgICAgICAgaWYoaWQgPT09IHBhcmVudEluZGV4KXtcbiAgICAgICAgICBwYW5lbHMucHVzaCh7IHN1Yl90cmVlLCBuYW1lLCB1cmwsIHBhcmVudElkLCBpblBhdGgsIGFjdGl2ZSB9KTtcbiAgICAgICAgICAvLyBTZXQgbmV3IHBhcmVudCBpZC4gSWYgdGhpcyBpcyBlbXB0eSwgaXQgd2lsbCBzdG9wIHRoZSB3aGlsZS1sb29wLlxuICAgICAgICAgIHBhcmVudEluZGV4ID0gcGFyZW50SWQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSwgJ3N1Yl90cmVlJyk7XG5cbiAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgLy8gU3RvcCB3aGlsZS1sb29wLlxuICAgICAgICBwYXJlbnRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHBhbmVscy5wdXNoKHtzdWJfdHJlZTphbGxJdGVtcywgaW5QYXRoOiB0cnVlfSk7XG4gICAgcGFuZWxzLnJldmVyc2UoKTtcbiAgICB0aGlzLmN1cnJlbnRJbmRleCA9IHBhbmVscy5sZW5ndGgtMTtcbiAgICB0aGlzLmNvbnRlbnQgPSBbLi4ucGFuZWxzXTtcbiAgfSxcbiAgY29udGVudDpbXSxcbiAgZ2V0VmlldzogZnVuY3Rpb24oc3RhdGUpe1xuICAgIC8vIE5vdGUgdGhlIHVzZSBvZiBhcnJvdyBmdW5jdGlvbnMgYW5kIG5vbi1hcnJvdyBmdW5jdGlvbnMgZm9yIHNjb3BlIG9mIFwidGhpc1wiIGluIHBhbmVsIHJlbmRlcmluZy5cbiAgICAvLyBVc2UgYXJyb3cgdG8gYWNjZXNzIFBhbmVsIG9iamVjdCwgbm9uLWxleGljYWwgZnVuY3Rpb24gZm9yIGFjY2Vzc2luZyBjdXJyZW50IGl0ZXJhYmxlIG9iamVjdCBpbiB0ZW1wbGF0ZS5cbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lm1hcCggKGl0ZW0saSkgPT4gKHtcbiAgICAgIC4uLml0ZW0sXG4gICAgICBuYW1lOml0ZW0/Lm5hbWUgfHwgZnJvbnRwYWdlVHJhbnNsYXRpb24sXG4gICAgICB1cmw6aXRlbS51cmwgfHwgZHJ1cGFsU2V0dGluZ3MuaGVsZmlfbmF2aWdhdGlvbi5saW5rcy5jYW5vbmljYWwsXG4gICAgICAvLyBJZiBjdXJyZW50IGl0ZW0gaGFzIHN1Yml0ZW1zLCBzaG93IGJ1dHRvbiBmb3IgbmV4dCBwYW5lbC5cbiAgICAgIGJ1dHRvbixcbiAgICAgIGlzQWN0aXZlLFxuICAgICAgaXNJblBhdGgsXG4gICAgICBleHRlcm5hbExpbmtBdHRyaWJ1dGVzLFxuICAgICAgaGFzTGFuZyxcbiAgICAgIGV4dGVybmFsTGlua0ljb24sXG4gICAgICAvLyBTaG93IHRpdGxlIG9mIHByZXZpb3VzbHkgY2xpY2tlZCBpdGVtIGluIEJhY2stYnV0dG9uIChvciBGcm9udHBhZ2UpXG4gICAgICBiYWNrOiAoIGkgPjApID8gdGhpcy5jb250ZW50LmF0KGktMSk/Lm5hbWUgPz8gZnJvbnRwYWdlVHJhbnNsYXRpb24gOiBmYWxzZSAsXG4gICAgICAvKioqXG4gICAgICAgKiBEZWZpbmUgY29ycmVjdCBzdGFydGluZyBwb3NpdGlvbnMgZm9yIGVhY2ggcGFuZWwsIGRlcGVkaW5nIG9uIHRyYXZlcnNhbCBkaXJlY3Rpb25cbiAgICAgICAqIEF0IHN0YXJ0LCBmaXJzdCBpdGVtIGlzIG9uIHN0YWdlIGFuZCBhbnl0aGluZyBlbHNlIG11c3QgYmUgb24gcmlnaHQuXG4gICAgICAgKiBXaGVuIGdvaW5nIGZvcndhcmQgaW4gdGhlIG1lbnUsIGN1cnJlbnQgLTEgIGl0ZW0gbXVzdCBiZSBvbiBzdGFnZSBhbmQgY3VycmVudCBpdGVtIHN0YXJ0cyBmcm9tIHJpZ2h0XG4gICAgICAgKiBXaGVuIGdvaW5nIGJhY2t3YXJkIGluIHRoZSBtZW51LCBjdXJyZW50ICsxIGl0ZW0gbXVzdCBiZSBvbiBzdGFnZSBhbmQgY3VycmVudCBpdGVtIHN0YXJ0cyBmcm9tIGxlZnRcbiAgICAgICAqXG4gICAgICAgKiBBdCByZW5kZXIsIC1sZWZ0ICAoZG93biB0byByb290KSBhbmQgLXJpZ2h0ICh1cCB0aGUgdHJlZSkgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgYWNjb3JkaW5nbHkgdG8gYWNoaWV2ZSB3YW50ZWQgYW5pbWF0aW9uIGFuZCBmaW5hbCBzdGF0ZS5cbiAgICAgICAqL1xuICAgICAgcGFuZWxfY2xhc3M6IGNscyh7XG4gICAgICAgICdtbWVudV9fcGFuZWwnOnRydWUsXG4gICAgICAgICdtbWVudV9fcGFuZWwtLXZpc2libGUnOnRydWUsXG4gICAgICAgICdtbWVudV9fcGFuZWwtLWN1cnJlbnQnOmkgPT09IHRoaXMuY3VycmVudEluZGV4LFxuICAgICAgICAnbW1lbnVfX3BhbmVsLS12aXNpYmxlLXJpZ2h0JzogIChzdGF0ZSA9PT0gJ3N0YXJ0JyAmJiBpID4gdGhpcy5jdXJyZW50SW5kZXggKSB8fCAoc3RhdGUgPT09ICd1cCcgJiYgaSA+PSB0aGlzLmN1cnJlbnRJbmRleCApIHx8KCBzdGF0ZSA9PT0gJ2Rvd24nICYmIGkgPiB0aGlzLmN1cnJlbnRJbmRleCsxICksXG4gICAgICAgICdtbWVudV9fcGFuZWwtLXZpc2libGUtbGVmdCc6IChzdGF0ZSAgPT09ICd1cCcgJiYgaTx0aGlzLmN1cnJlbnRJbmRleC0xKSAgfHwgKHN0YXRlID09PSAnZG93bicgJiYgaSA8PSB0aGlzLmN1cnJlbnRJbmRleClcbiAgICAgIH0pXG4gICAgfSkpO1xuICB9LFxuICB1cDogZnVuY3Rpb24gKHBhcmVudElkKSB7XG5cbiAgICBpZighcGFyZW50SWQpIHtcbiAgICAgIHRocm93IGBJZCBtaXNzaW5nIGZvciBuZXh0IG1lbnUgaXRlbSAgJHtwYXJlbnRJZH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kIHRoZSBpdGVtIGNvcnJlc3BvbmRpbmcgdG8gZ2l2ZW4gaWQgaW4gaXRlbSBhcnJvdyBjbGljayBldmVudC5cbiAgICAgKiBJdCdzIGl0ZW1zIHdpbGwgYmUgdGhlIG5ldyBjdXJyZW50IHBhbmVsLiBPbGQgcGFuZWwgc3dpcGVzIGxlZnQuXG4gICAgICovXG5cbiAgICBjb25zdCBuZXh0ID0gdGhpcy5jb250ZW50LmF0KHRoaXMuY3VycmVudEluZGV4KS5zdWJfdHJlZS5maW5kKCh7XG4gICAgICBpZFxuICAgIH0pID0+IGlkID09PSBwYXJlbnRJZCk7XG5cbiAgICBpZighbmV4dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJRCBtaXNtYXRjaCBpbiBtZW51IGl0ZW1zJysgcGFyZW50SWQpO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudEluZGV4PSB0aGlzLmN1cnJlbnRJbmRleCsgMSA8IHRoaXMuc2l6ZSA/IHRoaXMuY3VycmVudEluZGV4KyAxIDogdGhpcy5jdXJyZW50SW5kZXg7XG4gICAgdGhpcy5jb250ZW50W3RoaXMuY3VycmVudEluZGV4XSA9IG5leHQ7XG4gICAgdGhpcy5yZW5kZXIoJ3VwJyk7XG4gIH0sXG4gIGRvd246IGZ1bmN0aW9uICgpIHtcbiAgICBpZih0aGlzLmN1cnJlbnRJbmRleD09PSAwKSB7cmV0dXJuO31cbiAgICB0aGlzLmN1cnJlbnRJbmRleD0gdGhpcy5jdXJyZW50SW5kZXgtIDEgPj0gMCA/IHRoaXMuY3VycmVudEluZGV4LSAxIDogdGhpcy5jdXJyZW50SW5kZXg7XG4gICAgdGhpcy5yZW5kZXIoJ2Rvd24nKTtcbiAgfSxcbiAgcmVuZGVyOmZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuZ2V0Um9vdCgpO1xuICAgIHJvb3QuaW5uZXJIVE1MID0gTXVzdGFjaGUucmVuZGVyKFxuICAgICAgdGhpcy50ZW1wbGF0ZXMucGFuZWwsXG4gICAgICB7XG4gICAgICAgIHBhbmVsczogdGhpcy5nZXRWaWV3KHN0YXRlKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN1Yl90cmVlOiB0aGlzLnRlbXBsYXRlcy5saXN0LFxuICAgICAgfVxuICAgICk7XG5cbiAgICBpZihzdGF0ZSA9PT0gJ2xvYWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFuZWxzID0gWy4uLnJvb3QucXVlcnlTZWxlY3RvckFsbCgnLm1tZW51X19wYW5lbCcpXTtcbiAgICBjb25zdCBjdXJyZW50ID0gIHBhbmVscy5hdCh0aGlzLmN1cnJlbnRJbmRleCk7XG5cbiAgICBpZihyb290LnBhcmVudEVsZW1lbnQuc2Nyb2xsVG9wID4gdGhpcy5TQ1JPTExfVFJFU0hPTEQgJiYgdGhpcy5jdXJyZW50SW5kZXg+IDApIHtcbiAgICAgIGN1cnJlbnQucXVlcnlTZWxlY3RvcignLm1tZW51X19iYWNrJykuc2Nyb2xsSW50b1ZpZXcoe2Jsb2NrOidzdGFydCcsYmVoYXZpb3VyOidzbW9vdGgnfSk7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKT0+e1xuXG4gICAgICBjdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ21tZW51X19wYW5lbC0tdmlzaWJsZS1yaWdodCcsJ21tZW51X19wYW5lbC0tdmlzaWJsZS1sZWZ0Jyk7XG4gICAgICBzd2l0Y2ggKHN0YXRlKSB7XG5cbiAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgcGFuZWxzLmF0KHRoaXMuY3VycmVudEluZGV4LTEpLmNsYXNzTGlzdC5hZGQoJ21tZW51X19wYW5lbC0tdmlzaWJsZS1sZWZ0Jyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgcGFuZWxzLmF0KHRoaXMuY3VycmVudEluZGV4KzEpLmNsYXNzTGlzdC5hZGQoJ21tZW51X19wYW5lbC0tdmlzaWJsZS1yaWdodCcpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcblxuICAgICAgfVxuXG4gICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIaWRlIHByZXYgJiBuZXh0IHBhbmVscyBmcm9tIHNjcmVlbiByZWFkZXJzIGJ5IGFkZGluZyB2aXNpYmlsaXR5OmhpZGRlbi5cbiAgICAgICAgICogRE8gTk9UIFVTRSBkaXNwbGF5Om5vbmUuIERpc3BsYXkgbmVlZHMgdG8gYmUgc2V0IHRvICdmbGV4JyBvciBwYW5lbHMgd2lsbCBjb2xsYXBzZS5cbiAgICAgICAgKi9cbiAgICAgICAgcGFuZWxzLmZvckVhY2goIHBhbmVsID0+IHtcbiAgICAgICAgICBpZighcGFuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtbWVudV9fcGFuZWwtLWN1cnJlbnQnKSkge1xuICAgICAgICAgICAgcGFuZWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAvKipcbiAgICAgICAqIFNlZSAkLXRyYW5zaXRpb24tZHVyYXRpb24gaW4gX21tZW51LnNjc3MuXG4gICAgICAgKiBUaW1lb3V0IG11c3Qgbm90IGJlIHNob3J0ZXIgdGhhbiBhbmltYXRpb24gZHVyYXRpb24uXG4gICAgICAgKi9cbiAgICAgIH0sMjAwKTtcblxuICAgIH0sMTApOyAvLyBUcmFuc2l0aW9uIGNsYXNzZXMgbmVlZCB0byBiZSBhZGRlZCBhZnRlciBpbml0aWFsIHJlbmRlci5cbiAgfSxcbiAgbG9hZDogYXN5bmMgZnVuY3Rpb24oKXtcblxuICAgIGNvbnN0IE1FTlUgPSBhd2FpdCBmZXRjaCh0aGlzLmdldEFQSVVybCgpKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgTUVOVS5qc29uKCk7XG5cblxuICAgIHZhciBhbGxJbnN0YW5jZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkYXRhKTtcblxuICAgIGlmICghYWxsSW5zdGFuY2VzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbnN0YW5jZXMgZm91bmQgaW4gZGF0YScsIGRhdGEpO1xuICAgIH1cbiAgICBjb25zdCBhbGxJdGVtcyA9IGFsbEluc3RhbmNlcy5tYXAoaW5zdGFuY2VOYW1lID0+IHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhW2luc3RhbmNlTmFtZV0ubWVudV90cmVlWzBdO1xuICAgICAgaXRlbS5wYXJlbnRJZCA9ICcnO1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG5cbiAgICBjb25zdCBjdXJyZW50SXRlbSA9IGFsbEl0ZW1zLmZpbmRSZWN1cnNpdmUoIGl0ZW0gPT4gYWN0aXZlLmNhbGwoaXRlbSkgLCdzdWJfdHJlZScpO1xuXG4gICAgaWYoY3VycmVudEl0ZW0pIHtcbiAgICAgIGN1cnJlbnRJdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBjdXJyZW50SXRlbS5pblBhdGggPSB0cnVlO1xuICAgIH1cblxuICAgIGxldCBwYXJlbnRJbmRleCA9IGN1cnJlbnRJdGVtPy5wYXJlbnRJZDtcblxuICAgIHdoaWxlKHBhcmVudEluZGV4KSB7XG4gICAgICBjb25zdCBmb3VuZCA9IGFsbEl0ZW1zLmZpbmRSZWN1cnNpdmUoKGl0ZW0pID0+IHtcbiAgICAgICAgaWYoaXRlbS5pZCA9PT0gcGFyZW50SW5kZXgpIHtcbiAgICAgICAgICAvL3NldCBuZXcgcGFyZW50IGlkLiBJZiB0aGlzIGlzIGVtcHR5LCBpdCB3aWxsIHN0b3AgdGhlIHdoaWxlLWxvb3AuXG4gICAgICAgICAgcGFyZW50SW5kZXggPSBpdGVtLnBhcmVudElkO1xuICAgICAgICAgIGl0ZW0uaW5QYXRoPSB0cnVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sICdzdWJfdHJlZScpO1xuXG4gICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgIC8vIFN0b3Agd2hpbGUtbG9vcC5cbiAgICAgICAgcGFyZW50SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZGF0YSA9IGFsbEl0ZW1zO1xuICB9LFxuICBzdGFydDogYXN5bmMgZnVuY3Rpb24oKXtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuc2VsZWN0b3JzLmNvbnRhaW5lcik7XG4gICAgaWYoIXRoaXMuZ2V0Um9vdCgpIHx8ICFjb250YWluZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGFuZWwgcm9vdCBub3QgZm91bmQnKTtcbiAgICB9XG4gICAgLy8gU2hvdyBjb250YWluZXIgYW5kIGxvYWRlciBvbiBzdGFydFxuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtbWVudS0tdmlzaWJsZScpO1xuICAgIHRoaXMucmVuZGVyKCdsb2FkJyk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZCgpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGxvYWQgbWVudSBkYXRhLCB1c2luZyBtb2NrIG1lbnUgZm9yIGRldmVsb3BtZW50IHB1cnBvc2VzLiBSZXNldCB0byBub2pzLWZhbGxiYWNrIHdoZW4gaW50ZWdyYXRpbmcgd2l0aCBhY3R1YWwgQVBJJyxlKTtcbiAgICAgIHRoaXMuZW5hYmxlRmFsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBwYW5lbHMgYWNjb3JkaW5nIHRvIGN1cnJlbnQgcGF0aC5cbiAgICAgKi9cbiAgICB0aGlzLnNvcnRQYW5lbHNCeVBhdGgoKTtcbiAgICB0aGlzLnJlbmRlcignc3RhcnQnKTtcbiAgICAvKipcbiAgICAgKiBQYW5lbCBldmVudCBsaXN0ZW5lcjpcbiAgICAgKlxuICAgICAqICBCaW5kIG9uZSBjbGljayBldmVudCBsaXN0ZW5lciB0byBtYWluIHBhbmVsLiBPbmUgZm9yIGFsbCBjbGljayBldmVudHMuIVxuICAgICAqICBBZGQgbW9yZSBpZiBvbmUgaGFuZGxlciBiZWNvbWVzIHRvbyBjdW1iZXJzb21lLlxuICAgICAqICAqL1xuICAgIHRoaXMuZ2V0Um9vdCgpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKHtcbiAgICAgIHRhcmdldDoge1xuICAgICAgICBjbGFzc0xpc3QsXG4gICAgICAgIHZhbHVlOiBpZCxcbiAgICAgICAgcGFyZW50RWxlbWVudFxuICAgICAgfVxuICAgIH0pID0+IHtcbiAgICAgIC8vIEFycm93IGZ1bmN0aW9uIGtlZXBzIHVzIGluIFBhbmVsIGNvbnRleHQgZm9yIFwidGhpc1wiLiBUYWtlIHdoYXQgeW91IG5lZWQgZnJvbSBldmVudFxuICAgICAgaWYgKGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29udGFpbnModGhpcy5zZWxlY3RvcnMuZm9yd2FyZCkpIHtcbiAgICAgICAgdGhpcy51cChpZCk7XG4gICAgICB9IGVsc2UgaWYgKGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29udGFpbnModGhpcy5zZWxlY3RvcnMuYmFjaykgfHwgcGFyZW50RWxlbWVudD8uY2xhc3NMaXN0ICYmIHBhcmVudEVsZW1lbnQ/LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLnNlbGVjdG9ycy5iYWNrKSkge1xuICAgICAgICB0aGlzLmRvd24oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWVudUlzT3BlbiA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gJyNtZW51JyB8fCB0aGlzLnRvZ2dsZUJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ3RydWUnO1xuICB9LFxuICBkaXNhYmxlRmFsbGJhY2sgOmZ1bmN0aW9uKCkge1xuICAgIFBhbmVsLm1lbnUuZGF0YXNldC5qcyA9IHRydWU7IC8vIFN3aXRjaCB0byB1c2UganMtZW5oYW5jZWQgdmVyc2lvbiBpbnN0ZWFkIG9mIHB1cmUgY3NzIHZlcnNpb25cbiAgfSxcbiAgZW5hYmxlRmFsbGJhY2s6ZnVuY3Rpb24oKSB7XG4gICAgUGFuZWwubWVudS5kYXRhc2V0LnRhcmdldCA9ICdmYWxzZSc7IC8vIENsb3NlIHRoZSBtZW51IHdpdGgganMgc28gdGhhdCB3ZSBjYW4gdXNlIGNzcyB2ZXJzaW9uIGluc3RlYWRcbiAgICB0aGlzLmdldFJvb3QoKS5pbm5lckhUTUwgPSAnJzsgLy8gUmVtb3ZlIHJvdGF0b3JcbiAgICBkZWxldGUgUGFuZWwubWVudS5kYXRhc2V0LmpzOyAvLyBTd2l0Y2ggdG8gdXNlIHB1cmUgY3NzIHZlcnNpb24gaW5zdGVhZCBvZiBqcy1lbmhhbmNlZCB2ZXJzaW9uXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2g9JyNtZW51JzsgLy8gT3BlbiBtZW51IHdpdGggdGhlIGNzcyB3YXlcbiAgfSxcbiAgbWVudVRvZ2dsZTogIGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm1lbnVJc09wZW4oKSkge1xuICAgICAgdGhpcy50b2dnbGVCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICB0aGlzLm1lbnUuZGF0YXNldC50YXJnZXQgPSAnZmFsc2UnO1xuICAgICAgdG9nZ2xlV2lkZ2V0cyhmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvZ2dsZVdpZGdldHModHJ1ZSk7XG4gICAgICB0aGlzLm1lbnUuZGF0YXNldC50YXJnZXQgPSAndHJ1ZSc7XG4gICAgICB0aGlzLnRvZ2dsZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgIH1cbiAgICAvLyBXZSBzaG91bGQgYWx3YXlzIGZvY3VzIHRoZSBtZW51IGJ1dHRvbiBhZnRlciB0b2dnbGluZyB0aGUgbWVudVxuICAgIHRoaXMudG9nZ2xlQnV0dG9uLmZvY3VzKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnQgdGhlIHBhbmVsIGFmdGVyIERPTSBoYXMgbG9hZGVkLlxuICogQ29tcGlsZWQgdGVtcGxhdGVzIG5lZWQgdG8gaGF2ZSByZWxpYWJsZSBhY2Nlc3MgdG8gaGVhZGVyIGFuZCBtZW51IGVsZW1lbnRzIGNsb25lZCBmcm9tIFNlcnZlciBET00uXG4gKi9cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIC8vIFNlZSAgYmxvY2stLW1vYmlsZS1uYXZpZ2F0aW9uLmh0bWwudHdpZyBmb3IgdGhlIGJ1dHRvblxuICBQYW5lbC50b2dnbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtbWVudS10b2dnbGUtYnV0dG9uJyk7XG4gIGlmKCFQYW5lbC50b2dnbGVCdXR0b24pe1xuICAgIHRocm93ICdObyB0b2dnbGUgYnV0dG9uIGZvciBKUyBtZW51Lic7XG4gIH1cbiAgLy8gVE9ETyBXaGVyZSBpcyB0aGlzICNtZW51IGNvbWluZyBmcm9tIE1heWJlIG5hbWUgaXQgYmV0dGVyP1xuICBQYW5lbC5tZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21lbnUnKTtcbiAgaWYgKCFQYW5lbC5tZW51KSB7XG4gICAgY29uc29sZS5lcnJvcignUGFuZWwgbm90IHByZXNlbnQgaW4gRE9NLiBDYW5ub3Qgc3RhcnQgSlMgbW9iaWxlIG1lbnUnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBQYW5lbC5kaXNhYmxlRmFsbGJhY2soKTtcblxuICAvKipcbiAgICogQ2xvc2UgbWVudSBvbiBFc2NhcGUgYnV0dG9uIGNsaWNrIGlmIGl0IGlzIG9wZW4uXG4gICAqL1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoKGUua2V5ID09ICdFc2NhcGUnIHx8IGUua2V5ID09ICdFc2MnIHx8IGUua2V5Q29kZSA9PSAyNykgJiYgUGFuZWwubWVudUlzT3BlbigpKSB7XG4gICAgICBQYW5lbC5tZW51VG9nZ2xlKCk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIC8qKlxuICAgICAqIERlbGF5IHRlbXBsYXRlIGNvbXBpbGF0aW9uIHRvIG1lbnUgc3RhcnQgdG8gZW5zdXJlXG4gICAgICogZm9vdGVyICYgdG9wIG1lbnUgYmxvY2tzIGFyZSByZW5kZXJlZCBpbiBtYWluIERPTSBiZWZvcmUgY2xvbmluZyB0aGVtLlxuICAgICAqXG4gICAgICogU3RhcnQgcmVtb3ZlcyBpdHNlbGYgaW4gb3JkZXIgdG8gb25seSBydW4gb25jZS5cbiAgICAgKi9cbiAgICBQYW5lbC5jb21waWxlVGVtcGxhdGVzKCk7XG4gICAgUGFuZWwudG9nZ2xlQnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxzdGFydCk7XG4gICAgUGFuZWwuc3RhcnQoKTtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIHN0YXJ0LWV2ZW50IHRvIG1lbnUgdG9nZ2xlIGJ1dHRvbi5cbiAgICpcbiAgICogQWRkIE1lbnUgdG9nZ2xlIGZ1bmN0aW9uIHRvIG1lbnUgYnV0dG9uLlxuICAgKiBTaWRlIGVmZmVjdHM6XG4gICAqIFRvZ2dsZXMgY2hhdCB3aWRnZXQgZGlzcGxheSB2YWx1ZXMgYW5kIGFyaWEtZXhwYW5kZWQgc3RhdGVzIGFuZCBjbGVhcnMgbWVudSBoYXNoIHdoZW4gY2xvc2luZy5cbiAgICovXG4gIFBhbmVsLnRvZ2dsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsc3RhcnQpO1xuICBQYW5lbC50b2dnbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT5QYW5lbC5tZW51VG9nZ2xlKCkpO1xuXG4gIC8qKlxuICAgKiBPcGVuIG1lbnUgaWYgaXQgaXMgcmVxdWlyZWQgaW4gdGhlIGhhc2gsIHRoZW4gY2xlYXIgaGFzaC5cbiAgICovXG4gIGlmIChQYW5lbC5tZW51SXNPcGVuKCkpIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIHN0YXJ0KCk7XG4gICAgUGFuZWwubWVudVRvZ2dsZSgpO1xuICB9XG59KTtcbiJdLCJuYW1lcyI6WyJNdXN0YWNoZSIsInJlcXVpcmUiLCJjbHMiLCJmcm9udHBhZ2VUcmFuc2xhdGlvbiIsIkRydXBhbCIsInQiLCJjb250ZXh0Iiwid2lkZ2V0c1RvSGlkZVNlbGVjdG9yIiwidG9nZ2xlV2lkZ2V0cyIsImhpZGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJqb2luIiwiZm9yRWFjaCIsIndpZGdldCIsImRhdGFzZXQiLCJjc3NtZW51SGlkZSIsIkFycmF5IiwicHJvdG90eXBlIiwiZmluZFJlY3Vyc2l2ZSIsInByZWRpY2F0ZSIsImNoaWxkcmVuUHJvcGVydHlOYW1lIiwiYXJyYXkiLCJpbml0aWFsRmluZCIsImZpbmQiLCJlbGVtZW50c1dpdGhDaGlsZHJlbiIsImZpbHRlciIsIngiLCJsZW5ndGgiLCJjaGlsZEVsZW1lbnRzIiwicHVzaCIsInVuZGVmaW5lZCIsImJ1dHRvbiIsInN1Yl90cmVlIiwiYWN0aXZlIiwiZXh0ZXJuYWwiLCJ1cmwiLCJVUkwiLCJwYXRobmFtZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiZSIsImNvbnNvbGUiLCJ3YXJuIiwiaXNBY3RpdmUiLCJpc0luUGF0aCIsImluUGF0aCIsImV4dGVybmFsTGlua0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwicHJvdG9jb2wiLCJoYXNMYW5nIiwibGFuZyIsImV4dGVybmFsTGlua0ljb24iLCJJQ09OUyIsIm1haWx0byIsImNsYXNzIiwidGV4dCIsInRlbCIsIlBhbmVsIiwiY29tcGlsZVRlbXBsYXRlcyIsInRlbXBsYXRlcyIsInBhbmVsIiwicXVlcnlTZWxlY3RvciIsIm91dGVySFRNTCIsImxpc3QiLCJtZW51IiwiU0NST0xMX1RSRVNIT0xEIiwic2l6ZSIsImRhdGEiLCJjdXJyZW50SW5kZXgiLCJjYWNoZUtleSIsImVuYWJsZUNhY2hlIiwic2VsZWN0b3JzIiwiY29udGFpbmVyIiwicm9vdElkIiwiZm9yd2FyZCIsImJhY2siLCJnZXRBUElVcmwiLCJkcnVwYWxTZXR0aW5ncyIsImhlbGZpX25hdmlnYXRpb24iLCJsaW5rcyIsImFwaSIsInNlYXJjaFBhcmFtcyIsInNldCIsInRvU3RyaW5nIiwiZ2V0Um9vdCIsImdldEVsZW1lbnRCeUlkIiwic29ydFBhbmVsc0J5UGF0aCIsInBhbmVscyIsImFsbEl0ZW1zIiwiY3VycmVudEl0ZW0iLCJpdGVtIiwiY2FsbCIsInBhcmVudEluZGV4IiwiaWQiLCJwYXJlbnRJZCIsImZvdW5kIiwibmFtZSIsInJldmVyc2UiLCJjb250ZW50IiwiZ2V0VmlldyIsInN0YXRlIiwibWFwIiwiaSIsImNhbm9uaWNhbCIsImF0IiwicGFuZWxfY2xhc3MiLCJ1cCIsIm5leHQiLCJFcnJvciIsInJlbmRlciIsImRvd24iLCJyb290IiwiaW5uZXJIVE1MIiwiY3VycmVudCIsInBhcmVudEVsZW1lbnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxJbnRvVmlldyIsImJsb2NrIiwiYmVoYXZpb3VyIiwic2V0VGltZW91dCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImNvbnRhaW5zIiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwibG9hZCIsIk1FTlUiLCJmZXRjaCIsImpzb24iLCJhbGxJbnN0YW5jZXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaW5zdGFuY2VOYW1lIiwibWVudV90cmVlIiwic3RhcnQiLCJlcnJvciIsImVuYWJsZUZhbGxiYWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRhcmdldCIsInZhbHVlIiwibWVudUlzT3BlbiIsImhhc2giLCJ0b2dnbGVCdXR0b24iLCJnZXRBdHRyaWJ1dGUiLCJkaXNhYmxlRmFsbGJhY2siLCJqcyIsIm1lbnVUb2dnbGUiLCJzZXRBdHRyaWJ1dGUiLCJmb2N1cyIsImtleSIsImtleUNvZGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/nav-global.js\n");

/***/ }),

/***/ "./node_modules/classnames/index.js":
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif ( true && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxnQkFBZ0I7QUFDaEI7O0FBRUE7QUFDQTs7QUFFQSxrQkFBa0Isc0JBQXNCO0FBQ3hDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxLQUFLLEtBQTZCO0FBQ2xDO0FBQ0E7QUFDQSxHQUFHLFNBQVMsSUFBNEU7QUFDeEY7QUFDQSxFQUFFLGlDQUFxQixFQUFFLG1DQUFFO0FBQzNCO0FBQ0EsR0FBRztBQUFBLGtHQUFDO0FBQ0osR0FBRyxLQUFLLEVBRU47QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGRidC8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzRkMjYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/classnames/index.js\n");

/***/ }),

/***/ "./node_modules/mustache/mustache.js":
/*!*******************************************!*\
  !*** ./node_modules/mustache/mustache.js ***!
  \*******************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mustache/mustache.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/nav-global.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=nav-global.min.js.map