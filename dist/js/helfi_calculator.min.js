/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/calculator/_globalTranslations.js":
/*!**************************************************!*\
  !*** ./src/js/calculator/_globalTranslations.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-template-curly-in-string */\n\nconst globalTranslations = {\n  has_required_fields: {\n    fi: 'Pakolliset kentät on merkitty tähdellä ${required}.',\n    sv: 'Obligatoriska fält är markerade med en asterisk ${required}.',\n    en: 'Required fields are indicated with an asterisk ${required}.'\n  },\n  not_saved: {\n    fi: 'Huomioithan, että laskuriin antamiasi tietoja ei tallenneta eikä lähetetä eteenpäin. Jos muutat laskurin tietoja, muista painaa \"${calculate}\" uudelleen.',\n    sv: 'Observera att de uppgifter som du anger i räknaren inte sparas eller skickas vidare. Om du ändrar uppgifterna i räknaren ska du komma ihåg att klicka på \"${calculate}\" på nytt.',\n    en: 'Please note that the information you enter will not be stored or forwarded. If you change any of the calculator information, remember to click \"${calculate}\" again.'\n  },\n  unit_euro: {\n    fi: 'euroa',\n    sv: 'euro',\n    en: 'euros'\n  },\n  unit_person: {\n    fi: 'henkilöä',\n    sv: 'personer',\n    en: 'persons'\n  },\n  unit_day: {\n    fi: 'päivää',\n    sv: 'dagar',\n    en: 'days'\n  },\n  unit_hour: {\n    fi: 'tuntia',\n    sv: 'timmar',\n    en: 'hours'\n  },\n  unit_amount: {\n    fi: 'kpl',\n    sv: 'st.',\n    en: 'pcs'\n  },\n  required: {\n    fi: '(Pakollinen kenttä)',\n    sv: '(Obligatoriskt fält)',\n    en: '(Required field)'\n  },\n  required_explanation: {\n    fi: 'ja saavutettavalla tekstillä ',\n    sv: 'och med tillgänglig text ',\n    en: 'and with accessible text '\n  },\n  calculate: {\n    fi: 'Laske arvio',\n    sv: 'Beräkna uppskattning',\n    en: 'Calculate estimate'\n  },\n  reset: {\n    fi: 'Tyhjennä tiedot',\n    sv: 'Radera uppgifterna',\n    en: 'Clear data'\n  },\n  reset_aria_live: {\n    fi: 'Lomakkeen tiedot on nyt tyhjennetty.',\n    sv: 'Uppgifterna har nu raderats från blanketten.',\n    en: 'The data on the form has now been cleared.'\n  },\n  missing_input: {\n    fi: 'Tarkistathan vielä nämä kohdat',\n    sv: 'Kontrollera ännu dessa punkter',\n    en: 'Please check these items'\n  },\n  error_with_link: {\n    fi: '${error}: ${labelLink}.',\n    sv: '${error}: ${labelLink}.',\n    en: '${error}: ${labelLink}.'\n  },\n  select_radio: {\n    fi: 'Valinta on pakollinen',\n    sv: 'Valet är obligatoriskt',\n    en: 'Selection is required'\n  },\n  enter_value: {\n    fi: 'Kenttä on pakollinen',\n    sv: 'Fältet är obligatoriskt',\n    en: 'Field is required'\n  },\n  must_be_number: {\n    fi: 'Kenttään on syötettävä numero',\n    sv: 'Du måste ange en siffra i fältet',\n    en: 'You must enter a number in the field'\n  },\n  must_be_whole_number: {\n    fi: 'Kenttään on syötettävä kokonaisluku',\n    sv: 'Du måste ange ett heltal i fältet',\n    en: 'You must enter a whole number in the field'\n  },\n  min_or_max_out_of_bounds: {\n    fi: 'Arvon pitää olla väliltä ${min} ja ${max}',\n    sv: 'Siffran måste vara mellan ${min} och ${max}',\n    en: 'The value must be between ${min} and ${max}'\n  },\n  min_out_of_bounds: {\n    fi: 'Arvon pitää olla ${min} tai enemmän',\n    sv: 'Siffran måste vara ${min} eller mer',\n    en: 'The value must be ${min} or more'\n  },\n  max_out_of_bounds: {\n    fi: 'Arvon pitää olla ${max} tai vähemmän',\n    sv: 'Siffran måste vara ${max} eller mindre',\n    en: 'The value must be ${max} or less'\n  },\n  result: {\n    fi: 'Lopputulos',\n    sv: 'Resultat',\n    en: 'Result'\n  },\n  notification_aria_label_for_error: {\n    fi: 'Virheilmoitus',\n    sv: 'Felanmälan',\n    en: 'Error message'\n  },\n  notification_aria_label_for_alert: {\n    fi: 'Varoitus',\n    sv: 'Varning',\n    en: 'Warning'\n  },\n  notification_aria_label_for_info: {\n    fi: 'Tiedoksi',\n    sv: 'För kännedom',\n    en: 'For information'\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (globalTranslations);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/calculator/_globalTranslations.js\n");

/***/ }),

/***/ "./src/js/calculator/helfi_calculator.js":
/*!***********************************************!*\
  !*** ./src/js/calculator/helfi_calculator.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _globalTranslations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_globalTranslations */ \"./src/js/calculator/_globalTranslations.js\");\n\nconst Mustache = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\nclass HelfiCalculator {\n  constructor({\n    name,\n    translations\n  }) {\n    this.name = name;\n    this.templates = null;\n    this.id = null;\n    this.translations = {\n      ..._globalTranslations__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n      ...translations\n    };\n  }\n  t(key, values) {\n    return this.translate(key, values);\n  }\n  translate(key, values) {\n    if (!this.translations) {\n      throw new Error('Translations are missing');\n    }\n\n    // https://stackoverflow.com/a/41540381\n    function index(obj, is, value) {\n      if (typeof is === 'string') {\n        is = is.split('.');\n      }\n      if (is.length === 1 && value !== undefined) {\n        obj[is[0]] = value;\n        return value;\n      }\n      if (is.length === 0) {\n        return obj;\n      }\n      return index(obj[is[0]], is.slice(1), value);\n    }\n    const lang = drupalSettings.path.currentLanguage || 'fi';\n    const translation = this.translations[key] ? this.translations[key][lang] : null;\n    if (translation) {\n      return translation.replace(/\\$\\{.+?\\}/g, match => {\n        const stripDollarAndParenthesis = match.replace(/(^\\$\\{|\\}$)/g, '');\n        return index(values, stripDollarAndParenthesis);\n      });\n    }\n    return `Missing translation: ${key}:${lang}`;\n  }\n  parseSettings(settings) {\n    let parsed;\n    try {\n      parsed = JSON.parse(settings);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(`Problem with ${this.name} settings:`, settings);\n      throw e;\n    }\n    return parsed;\n  }\n  getElement(elemID) {\n    const elem = document.querySelector(`#${elemID}_${this.id}`);\n    if (!elem) {\n      throw new Error(`Element #${elemID}_${this.id} missing from ${this.name} at getElement`);\n    }\n    return elem;\n  }\n  getPartialRender(template, partialData) {\n    this.preprocessData(partialData);\n\n    // console.log('template:', template);\n    // console.log('preprocessed:', partialData);\n    // console.log('partials:', this.templates.partials);\n\n    return Mustache.render(template, partialData, this.templates.partials);\n  }\n\n  // Finds the smallest matching value >= key from object\n  // eslint-disable-next-line class-methods-use-this\n  getMinimumRange(value, range) {\n    const rangeKeys = Object.keys(range).reverse();\n    for (let i = 0; i < rangeKeys.length; i++) {\n      const valueLimit = rangeKeys[i];\n      if (Number(valueLimit) <= value) {\n        return range[valueLimit];\n      }\n    }\n    throw new Error(`Minimum range not found for ${value} from ${range}`);\n  }\n  // Clamps value within min-max range\n  // eslint-disable-next-line class-methods-use-this\n  clamp(min, value, max) {\n    return Math.max(min, Math.min(value, max));\n  }\n  // Format number as string with two decimal points, used with screen reader texts as computers handle . better than , as separator.\n  // eslint-disable-next-line class-methods-use-this\n  formatEuroCents(num) {\n    // Round the number to two decimal places\n    num = `${Math.round(num * 100) / 100}`;\n\n    // Pad the number with zeros if necessary\n    const decimalPos = num.indexOf('.');\n    if (decimalPos === -1) {\n      num += '.00';\n    } else if (num.length - decimalPos === 2) {\n      num += '0';\n    }\n    return num;\n  }\n\n  // Format number as string with Finnish euro cents style\n  formatFinnishEuroCents(num) {\n    return this.formatEuroCents(num).replace('.', ',');\n  }\n  preprocessData(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      const value = obj[keys[i]];\n      if (typeof value === 'object' && value !== null) {\n        this.preprocessData(value);\n        if (!value.hasOwnProperty('items')) {\n          value.items = null;\n        }\n        if (!value.hasOwnProperty('group')) {\n          value.group = null;\n        }\n        if (!value.hasOwnProperty('dynamic_area')) {\n          value.dynamic_area = null;\n        }\n      } else if (typeof value === 'number') {\n        obj[keys[i]] += ''; // convert numeric values to strings so that mustache does not think 0 === false and skip it.\n      }\n    }\n  }\n  getFieldValue(elemID) {\n    const elem = document.querySelector(`#${elemID}_${this.id}`);\n    if (!elem) {\n      throw new Error(`Element #${elemID}_${this.id} missing from ${this.name} at getFieldValue`);\n    }\n    if (elem.dataset?.type === 'radio') {\n      const checked = elem.querySelector('input:checked');\n      if (checked) {\n        return checked.value;\n      }\n      return null;\n    }\n    if (elem.dataset?.type === 'checkbox') {\n      return elem.checked;\n    }\n    if (elem.dataset?.type === 'input_integer' || elem.dataset?.type === 'input_float') {\n      // Check that required input has value\n      if (elem.value === 'undefined' || elem.value === '') {\n        return null;\n      }\n      let elemValue = elem.value.replace(',', '.');\n      if (elem.dataset.strip) {\n        const regex = new RegExp(elem.dataset.strip, 'g');\n        elemValue = elemValue.replaceAll(regex, '');\n      }\n      if (elem.dataset.type === 'input_integer' && Number.isNaN(Number.parseInt(elemValue, 10))) {\n        return null;\n      }\n      if (elem.dataset.type === 'input_float' && Number.isNaN(Number.parseFloat(elemValue))) {\n        return null;\n      }\n      return elemValue;\n    }\n  }\n  getError(elemID, translationKey, translationParams) {\n    const elem = document.querySelector(`#${elemID}_${this.id}`);\n    if (!elem) {\n      throw new Error(`Element #${elemID}_${this.id} missing from ${this.name} at validateBasics`);\n    }\n    const labelText = document.querySelector(`#labelText_${elem.id}`)?.innerText || elem.id;\n    let labelLink = `<a href=\"#${elem.id}\">${labelText}</a>`;\n    if (elem.tagName === 'FIELDSET') {\n      const firstRadio = elem.querySelector('input[type=\"radio\"]');\n      if (firstRadio) {\n        labelLink = `<a href=\"#${firstRadio.id}\">${labelText}</a>`;\n      }\n    }\n    const error = this.translate(translationKey, {\n      labelLink,\n      labelText,\n      ...translationParams\n    });\n    const errorHtml = `<span class=\"hdbt-error-text\">${error}.</span>`;\n    const elemFormItem = elem.closest('.form-item');\n    if (elemFormItem) {\n      elemFormItem.classList.add('hds-text-input--invalid');\n      const errorContainer = elemFormItem.querySelector('.helfi-calculator__error-placeholder');\n      if (errorContainer) {\n        errorContainer.innerHTML = errorHtml;\n      }\n    }\n    const errorWithLink = this.translate('error_with_link', {\n      error,\n      labelLink\n    });\n    return [errorWithLink];\n  }\n  validateBasics(elemID) {\n    const elem = document.querySelector(`#${elemID}_${this.id}`);\n    if (!elem) {\n      throw new Error(`Element #${elemID}_${this.id} missing from ${this.name} at validateBasics`);\n    }\n    if (elem.dataset?.type === 'radio') {\n      const checked = elem.querySelector('input:checked');\n      if (!checked && elem.dataset.required) {\n        return this.getError(elemID, 'select_radio');\n      }\n    }\n\n    // Check number inputs\n    if (elem.dataset?.type === 'input_integer' || elem.dataset?.type === 'input_float') {\n      // Optional empty inputs can be ignored\n      if (!elem.dataset.required && (typeof elem.value === 'undefined' || elem.value === '')) {\n        return [];\n      }\n\n      // Check that required input has value\n      if (elem.value === 'undefined' || elem.value === '') {\n        return this.getError(elemID, 'enter_value');\n      }\n      let elemValue = elem.value.replace(',', '.');\n      if (elem.dataset.strip) {\n        const regex = new RegExp(elem.dataset.strip, 'g');\n        elemValue = elemValue.replaceAll(regex, '');\n      }\n\n      // Check if it's an integer number\n      const integerRegex = /^-?([1-9][0-9]*|0)$/;\n      if (elem.dataset.type === 'input_integer' && !integerRegex.test(elemValue)) {\n        return this.getError(elemID, 'must_be_whole_number');\n      }\n\n      // Check if it's a decimal number or integer\n      const floatRegex = /^-?([1-9][0-9]*|0)(\\.[0-9]+)?$/;\n      if (elem.dataset.type === 'input_float' && !floatRegex.test(elemValue)) {\n        return this.getError(elemID, 'must_be_number');\n      }\n\n      // If both bounds are set\n      if (typeof elem.dataset.min !== 'undefined' && typeof elem.dataset.max !== 'undefined') {\n        if (Number.parseFloat(elem.dataset.min) > Number.parseFloat(elemValue) || elemValue > Number.parseFloat(elem.dataset.max)) {\n          return this.getError(elemID, 'min_or_max_out_of_bounds', {\n            min: elem.dataset.min,\n            max: elem.dataset.max\n          });\n        }\n        // Less than min\n      } else if (typeof elem.dataset.min !== 'undefined') {\n        if (Number.parseFloat(elem.dataset.min) > Number.parseFloat(elemValue)) {\n          return this.getError(elemID, 'min_out_of_bounds', {\n            min: elem.dataset.min\n          });\n        }\n        // More than max\n      } else if (typeof elem.dataset.max !== 'undefined') {\n        if (Number.parseFloat(elemValue) > Number.parseFloat(elem.dataset.max)) {\n          return this.getError(elemID, 'max_out_of_bounds', {\n            max: elem.dataset.max\n          });\n        }\n      }\n    }\n    return [];\n  }\n  hideGroup(id) {\n    const elem = document.querySelector(`#${id}_${this.id}:not([data-hide-group='true'])`);\n    if (elem && elem.dataset) {\n      elem.dataset.hideGroup = true;\n    }\n  }\n  showGroup(id) {\n    const elem = document.querySelector(`#${id}_${this.id}[data-hide-group='true']`);\n    if (elem && elem.dataset) {\n      elem.dataset.hideGroup = false;\n    }\n  }\n  showAriaLiveText(text) {\n    const ariaLiveElem = document.getElementById(`aria_live_${this.id}`);\n    ariaLiveElem.innerText = text;\n    // console.log('setting aria_live to:', text);\n    window.setTimeout(() => {\n      ariaLiveElem.innerText = '';\n      // console.log('clearing aria_live');\n    }, 1000);\n  }\n  static renderNotification(element, notificationClass, result, notificationAriaLabel) {\n    let {\n      message\n    } = result;\n    if (Array.isArray(result.message) && result.message.length > 1) {\n      message = `<ul><li>${result.message.join('</li><li>')}</li></ul>`;\n    }\n    element.innerHTML = `\n      <section aria-label=\"${notificationAriaLabel}\" class=\"hds-notification ${notificationClass}\">\n        <div class=\"hds-notification__content\">\n          <h2 class=\"hds-notification__label\">\n            <span>${result.title}</span>\n          </h2>\n          <div class=\"hds-notification__body\">${message}</div>\n        </div>\n      </section>`;\n  }\n  static renderReceipt(element, notificationClass, result, notificationAriaLabel) {\n    let {\n      message\n    } = result;\n    if (Array.isArray(result.message) && result.message.length > 1) {\n      message = `<ul><li>${result.message.join('</li><li>')}</li></ul>`;\n    }\n    const html = `\n      <section aria-label=\"${notificationAriaLabel}\" class=\"hds-notification ${notificationClass}\">\n        <div class=\"hds-notification__content\">\n          <h2 class=\"hds-notification__label\">\n            <span>${result.title}</span>\n          </h2>\n          <div class=\"hds-notification__body\">${message}</div>\n        </div>\n      </section>`;\n    element.innerHTML = '';\n    element.insertAdjacentHTML('beforeend', html);\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: 'end',\n      inline: 'nearest'\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  focusReceiptHeading(element) {\n    const titleElem = element.querySelector('h2');\n    titleElem.setAttribute('tabindex', '0');\n    titleElem.focus();\n    titleElem.setAttribute('tabindex', '-1');\n  }\n  renderResult(result) {\n    if (result.error) {\n      HelfiCalculator.renderNotification(document.querySelector(`#${this.id} .helfi-calculator-notification--error`), 'hds-notification--error', result.error, this.translate('notification_aria_label_for_error'));\n      const titleElem = document.querySelector(`#${this.id} .helfi-calculator-notification--error .hds-notification__label`);\n      titleElem.setAttribute('tabindex', '0');\n      titleElem.focus();\n      titleElem.scrollIntoViewIfNeeded();\n      titleElem.setAttribute('tabindex', '-1');\n    }\n    if (result.ariaLive) {\n      this.showAriaLiveText(result.ariaLive);\n    }\n    if (result.receipt) {\n      const element = document.querySelector(`#${this.id} .helfi-calculator-notification--result`);\n      element.innerHTML = result.receipt;\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n        inline: 'nearest'\n      }); // Scroll receipt into view while it's animating.\n      window.setTimeout(() => {\n        this.focusReceiptHeading(element);\n      }, this.receiptOpenMs + 10); // Add 10ms after animation so that title is in place when focusing into it.\n    } else if (result.alert) {\n      HelfiCalculator.renderNotification(document.querySelector(`#${this.id} .helfi-calculator-notification--result`), 'hds-notification--alert', result.alert, this.translate('notification_aria_label_for_alert'));\n    } else if (result.info) {\n      HelfiCalculator.renderReceipt(document.querySelector(`#${this.id} .helfi-calculator-notification--result`), 'hds-notification--info', result.info, this.translate('notification_aria_label_for_info'));\n    }\n  }\n  clearResult() {\n    document.querySelector(`#${this.id} .helfi-calculator-notification--error`).innerHTML = '';\n    document.querySelector(`#${this.id} .helfi-calculator-notification--result`).innerHTML = '';\n    const errors = document.querySelectorAll(`#${this.id} .hds-text-input--invalid`);\n    Object.values(errors).forEach(error => {\n      error.classList.remove('hds-text-input--invalid');\n    });\n    const errorsMessages = document.querySelectorAll(`#${this.id} .helfi-calculator__error-placeholder`);\n    Object.values(errorsMessages).forEach(errorMessage => {\n      errorMessage.innerHTML = '';\n    });\n    // this.init(this.initParams);\n  }\n  init({\n    id,\n    formData,\n    eventHandlers\n  }) {\n    this.initParams = {\n      id,\n      formData,\n      eventHandlers\n    };\n    this.id = id;\n    this.receiptOpenMs = 300; // Should be same as in src/scss/06_components/helfi_calculator/_helfi_calculator.scss:141 with.helfi-calculator__receipt animation-duration.\n\n    this.templates = {\n      form: `\n        <div class=\"visually-hidden\" aria-live=\"polite\" aria-atomic=\"true\" id=\"aria_live_{{form_id}}\"></div>\n        <div class=\"helfi-calculator-disclaimer\">\n          {{#has_required_fields}}\n            ${this.translate('has_required_fields', {\n        required: '{{>required_explanation}} {{>required}}'\n      })}\n          {{/has_required_fields}}\n          ${this.translate('not_saved', {\n        calculate: this.translate('calculate')\n      })}\n        </div>\n        <div class=\"helfi-calculator-notification helfi-calculator-notification--error\" aria-live=\"polite\" aria-atomic=\"true\"></div>\n        <form class=\"helfi-calculator\" action=\"\" method=\"post\">\n          {{#items}}\n            {{>form_item}}\n          {{/items}}\n          <div class=\"helfi-calculator__buttons\">\n            <input type=\"submit\" enterkeyhint=\"done\" value=\"{{#submit}}{{submit}}{{/submit}}{{^submit}}${this.translate('calculate')}{{/submit}}\" class=\"hds-button hds-button--primary\">\n            <input type=\"reset\" value=\"{{#reset}}{{reset}}{{/reset}}{{^reset}}${this.translate('reset')}{{/reset}}\" class=\"hds-button hds-button--secondary\">\n          </div>\n        </form>\n        <div class=\"helfi-calculator-notification helfi-calculator-notification--result\"></div>\n      `,\n      partials: {\n        required: `\n          <span class=\"visually-hidden\">${this.translate('required')}</span><span aria-hidden=\"true\" class=\"helfi-calculator-required\">*</span>`,\n        required_explanation: `\n          <span class=\"visually-hidden\">${this.translate('required_explanation')}</span>\n        `,\n        form_item: `\n          <div class=\"helfi-calculator__item\">\n            {{#group}}{{>group}}{{/group}}\n            {{#dynamic_area}}{{>dynamic_area}}{{/dynamic_area}}\n            {{#heading}}{{>heading}}{{/heading}}\n            {{#legend}}{{>legend}}{{/legend}}\n            {{#paragraph}}{{>paragraph}}{{/paragraph}}\n            {{#hr}}{{>hr}}{{/hr}}\n            {{#input}}{{>input}}{{/input}}\n            {{#input_integer}}{{>input_integer}}{{/input_integer}}\n            {{#input_float}}{{>input_float}}{{/input_float}}\n            {{#radio}}{{>radio}}{{/radio}}\n            {{#checkbox}}{{>checkbox}}{{/checkbox}}\n          </div>\n        `,\n        group: `\n          <div id=\"{{id}}_{{form_id}}\" class=\"helfi-calculator__group\" {{#hide_group}}data-hide-group=\"true\"{{/hide_group}}>\n            <div>\n              {{#items}}\n                {{>form_item}}\n              {{/items}}\n            </div>\n          </div>\n        `,\n        dynamic_slot: `\n          <div id=\"{{id}}_{{form_id}}\" class=\"helfi-calculator__dynamic-slot\" {{#slotNumber}}data-slot-number=\"{{slotNumber}}\"{{/slotNumber}}>\n            <fieldset class=\"helfi-calculator__dynamic_slot__fieldset\">\n              {{#items}}\n                {{>form_item}}\n              {{/items}}\n              {{#remove_label}}\n                <div class=\"helfi-calculator__dynamic-remove-wrapper\"><button class=\"helfi-calculator__dynamic-remove hds-button hds-button--supplementary\"><span class=\"hds-button__label\">{{remove_label}}</span><span class=\"hel-icon hel-icon--cross\" role=\"img\" aria-hidden=\"true\"></button></div>\n              {{/remove_label}}\n            </fieldset>\n          </div>\n        `,\n        dynamic_area: `\n          <div id=\"{{id}}_{{form_id}}\" class=\"helfi-calculator__dynamic-area\">\n            <div id=\"slots_{{id}}_{{form_id}}\" class=\"helfi-calculator__dynamic-area__slots\">\n              {{#dynamic_slots}}\n                {{>dynamic_slot}}\n              {{/dynamic_slots}}\n            </div>\n            {{#add_button_label}}\n              <button id=\"add-button_{{id}}_{{form_id}}\" class=\"hds-button hds-button--secondary\"><span class=\"hel-icon hel-icon--plus\" role=\"img\" aria-hidden=\"true\"></span><span class=\"hds-button__label\">{{add_button_label}}</span></button>\n            {{/add_button_label}}\n          </div>\n        `,\n        heading: `\n          <h{{level}}{{^level}}2{{/level}}>{{text}}</h{{level}}{{^level}}2{{/level}}>\n        `,\n        legend: `\n          <legend class=\"helfi-calculator__legend helfi-calculator__legend--level_{{level}}{{^level}}2{{/level}}\">{{text}}</legend>\n        `,\n        paragraph: `\n          <p{{#class}} class=\"{{class}}\"{{/class}}>{{text}}</p>\n        `,\n        hr: `\n          <hr>\n        `,\n        label: `\n          <label\n            class=\"hds-text-input__label\"\n            for=\"{{id}}_{{form_id}}\"\n            id=\"label_{{id}}_{{form_id}}\"\n            ><span\n              id=\"labelText_{{id}}_{{form_id}}\"\n              class=\"label_text\"\n              >{{label}}</span>{{#unit}} ({{unit}}){{/unit}}{{#required}}{{>required}}{{/required}}</label>\n        `,\n        error_placeholder: `\n          <div class=\"helfi-calculator__error-placeholder\" id=\"error_text_{{id}}_{{form_id}}\"></div>\n        `,\n        helper_text: `\n          <span class=\"hdbt-helper-text\" id=\"helper_text_{{id}}_{{form_id}}\">{{helper_text}}</span>\n        `,\n        input: `\n          <div class=\"form-item hds-text-input {{#required}}input--required{{/required}}\">\n            {{>label}}\n            <div class=\"hds-text-input__input-wrapper\">\n              <input\n                type=\"{{type}}\"\n                data-type=\"input\"\n                id=\"{{id}}_{{form_id}}\"\n                name=\"{{id}}\"\n                {{#inputmode}}inputmode=\"{{inputmode}}\"{{/inputmode}}\n                {{#pattern}}pattern=\"{{pattern}}\"{{/pattern}}\n                {{#min}}data-min=\"{{min}}\"{{/min}}\n                {{#max}}data-max=\"{{max}}\"{{/max}}\n                {{#size}}size=\"{{size}}\"{{/size}}\n                {{#maxlength}}maxlength=\"{{maxlength}}\"{{/maxlength}}\n                {{#required}}data-required=\"required\"{{/required}}\n                {{#strip}}data-strip=\"{{strip}}\"{{/strip}}\n                {{#label}}data-label=\"{{label}}\"{{/label}}\n                {{#value}}value=\"{{value}}\"{{/value}}\n                aria-describedby=\"error_text_{{id}}_{{form_id}}{{#helper_text}} helper_text_{{id}}_{{form_id}}{{/helper_text}}\"\n                class=\"form-text hds-text-input__input\">\n            </div>\n            {{>error_placeholder}}\n            {{>helper_text}}\n          </div>\n        `,\n        input_integer: `\n          <div class=\"form-item hds-text-input {{#required}}input--required{{/required}}\">\n            {{>label}}\n            <div class=\"hds-text-input__input-wrapper\">\n              <input\n                type=\"text\"\n                data-type=\"input_integer\"\n                id=\"{{id}}_{{form_id}}\"\n                name=\"{{id}}\"\n                inputmode=\"numeric\"\n                {{#min}}data-min=\"{{min}}\"{{/min}}\n                {{#max}}data-max=\"{{max}}\"{{/max}}\n                {{#size}}size=\"{{size}}\"{{/size}}\n                {{#maxlength}}maxlength=\"{{maxlength}}\"{{/maxlength}}\n                {{#required}}data-required=\"required\"{{/required}}\n                {{#strip}}data-strip=\"{{strip}}\"{{/strip}}\n                data-label=\"label_{{id}}_{{form_id}}\"\n                {{#value}}value=\"{{value}}\"{{/value}}\n                aria-describedby=\"error_text_{{id}}_{{form_id}}{{#helper_text}} helper_text_{{id}}_{{form_id}}{{/helper_text}}\"\n                class=\"form-text hds-text-input__input\">\n            </div>\n            {{>error_placeholder}}\n            {{>helper_text}}\n          </div>\n        `,\n        input_float: `\n          <div class=\"form-item hds-text-input {{#required}}input--required{{/required}}\">\n            {{>label}}\n            <div class=\"hds-text-input__input-wrapper\">\n              <input\n                type=\"text\"${'' /* We can not use numeric here, nor can we use inputmode decimal https://design-system.service.gov.uk/components/text-input/#asking-for-decimal-numbers */}\n                data-type=\"input_float\"\n                id=\"{{id}}_{{form_id}}\"\n                name=\"{{id}}\"\n                {{#min}}data-min=\"{{min}}\"{{/min}}\n                {{#max}}data-max=\"{{max}}\"{{/max}}\n                {{#size}}size=\"{{size}}\"{{/size}}\n                {{#maxlength}}maxlength=\"{{maxlength}}\"{{/maxlength}}\n                {{#required}}data-required=\"required\"{{/required}}\n                {{#strip}}data-strip=\"{{strip}}\"{{/strip}}\n                {{#value}}value=\"{{value}}\"{{/value}}\n                aria-describedby=\"error_text_{{id}}_{{form_id}}{{#helper_text}} helper_text_{{id}}_{{form_id}}{{/helper_text}}\"\n                class=\"form-text hds-text-input__input\">\n            </div>\n            {{>error_placeholder}}\n            {{>helper_text}}\n          </div>\n        `,\n        checkbox: `\n          <div class=\"hds-checkbox\">\n            <input\n              type=\"checkbox\"\n              data-type=\"checkbox\"\n              id=\"{{id}}_{{form_id}}\"\n              class=\"hds-checkbox__input\"\n              aria-describedby=\"error_text_{{id}}_{{form_id}}{{#helper_text}} helper_text_{{id}}_{{form_id}}{{/helper_text}}\"\n              {{#checked}}checked{{/checked}}\n              >\n            <label\n              class=\"hds-checkbox__label\"\n              for=\"{{id}}_{{form_id}}\"\n              id=\"label_{{id}}_{{form_id}}\"\n              ><span\n                id=\"labelText_{{id}}_{{form_id}}\"\n                class=\"label_text\"\n                >{{label}}</span></label>\n            {{>error_placeholder}}\n            {{>helper_text}}\n          </div>\n        `,\n        radio: `\n          <fieldset\n            data-type=\"radio\"\n            id=\"{{id}}_{{form_id}}\"\n            {{#required}}data-required=\"true\"{{/required}}\n            class=\"form-item hds-selection-group {{#required}}input--required{{/required}}\"\n            >\n            <legend\n              class=\"hds-selection-group__legend\"\n              id=\"label_{{id}}_{{form_id}}\"\n              aria-describedby=\"error_text_{{id}}_{{form_id}}{{#helper_text}} helper_text_{{id}}_{{form_id}}{{/helper_text}}\"\n              ><span\n                id=\"labelText_{{id}}_{{form_id}}\"\n                class=\"label_text\"\n                >{{label}}</span>{{#unit}} ({{unit}}){{/unit}}{{#required}}{{>required}}{{/required}}</legend>\n            <div class=\"hds-selection-group__items\">\n              {{#radio_items}}\n                {{>radio_item}}\n              {{/radio_items}}\n            </div>\n            {{>error_placeholder}}\n            {{>helper_text}}\n          </fieldset>\n        `,\n        radio_item: `\n          <div class=\"hds-selection-group__item\">\n            <div class=\"hds-radio-button\">\n              <input\n                type=\"radio\"\n                id=\"{{item_id}}_{{form_id}}\"\n                name=\"{{name}}\"\n                {{#required}}data-required=\"required\"{{/required}}\n                data-label=\"label_{{id}}_{{form_id}}\"\n                value=\"{{value}}\"\n                class=\"hds-radio-button__input\">\n              <label for=\"{{item_id}}_{{form_id}}\" class=\"hds-radio-button__label\">{{label}}</label>\n            </div>\n          </div>\n        `,\n        receipt: `\n          <div class=\"helfi-calculator__receipt\" id=\"receipt_{{id}}\">\n            <div class=\"helfi-calculator__receipt__wrapper\">\n              <div class=\"helfi-calculator__receipt__container\">\n                <h2>{{title}}</h2>\n                <p class=\"helfi-calculator__receipt-total\">\n                  <span class=\"helfi-calculator__receipt-total__prefix\">{{total_prefix}}</span>\n                  <span class=\"helfi-calculator__receipt-total__value\">{{total_value}}</span>\n                  <span class=\"helfi-calculator__receipt-total__suffix\">{{total_suffix}}</span>\n                </p>\n                {{#total_explanation}}\n                  <p class=\"helfi-calculator__receipt-total-explanation\">{{total_explanation}}</p>\n                {{/total_explanation}}\n                {{#hr}}\n                  <hr class=\"helfi-calculator__receipt-hr\" />\n                {{/hr}}\n                {{#breakdown}}\n                  <h3>{{title}}</h3>\n                  {{#subtotals}}\n                    {{>subtotal}}\n                  {{/subtotals}}\n                  {{#additional_details}}\n                    {{#title}}<h4>{{.}}</h4>{{/title}}\n                    {{#text}}<p>{{.}}</p>{{/text}}\n                  {{/additional_details}}\n                {{/breakdown}}\n              </div>\n            </div>\n          </div>\n        `,\n        subtotal: `\n          <div class=\"helfi-calculator__receipt-subtotal\">\n            <h4>{{title}}</h4>\n            <span class=\"helfi-calculator__receipt-subtotal-sum\">\n              {{#sum_screenreader}}\n                <span aria-hidden=\"true\">{{sum}}</span>\n                <span class=\"visually-hidden\">{{sum_screenreader}}</span>\n              {{/sum_screenreader}}\n              {{^sum_screenreader}}\n                {{sum}}\n              {{/sum_screenreader}}\n            </span>\n            {{#has_details}}\n              <ul>\n              {{#details}}\n                <li>{{.}}</li>\n              {{/details}}\n              </ul>\n            {{/has_details}}\n          </div>\n        `\n      }\n    };\n    this.preprocessData(formData);\n    const processedData = formData;\n    const render = Mustache.render(this.templates.form, processedData, this.templates.partials);\n    document.getElementById(this.id).innerHTML = render;\n    const events = Object.keys(eventHandlers);\n    for (let i = 0; i < events.length; i++) {\n      const event = events[i];\n      document.getElementById(id).addEventListener(event, eventHandlers[event]);\n      // console.log('Started waiting for', event, '-events');\n    }\n  }\n}\n\n// module.exports = () => new HelfiCalculator();\nwindow.HelfiCalculator = translations => new HelfiCalculator(translations);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/calculator/helfi_calculator.js\n");

/***/ }),

/***/ "./node_modules/mustache/mustache.js":
/*!*******************************************!*\
  !*** ./node_modules/mustache/mustache.js ***!
  \*******************************************/
/***/ (function(module) {

eval("(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `config` argument is given here, then it should be an\n   * object with a `tags` attribute or an `escape` attribute or both.\n   * If an array is passed, then it will be interpreted the same way as\n   * a `tags` attribute on a `config` object.\n   *\n   * The `tags` attribute of a `config` object must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   *\n   * The `escape` attribute of a `config` object must be a function which\n   * accepts a string as input and outputs a safely escaped string.\n   * If an `escape` function is not provided, then an HTML-safe string\n   * escaping function is used as the default.\n   */\n  Writer.prototype.render = function render (template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context, config);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials, config);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      var tokens = this.parse(indentedValue, tags);\n      return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  Writer.prototype.getConfigTags = function getConfigTags (config) {\n    if (isArray(config)) {\n      return config;\n    }\n    else if (config && typeof config === 'object') {\n      return config.tags;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  Writer.prototype.getConfigEscape = function getConfigEscape (config) {\n    if (config && typeof config === 'object' && !isArray(config)) {\n      return config.escape;\n    }\n    else {\n      return undefined;\n    }\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.2.0',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view`, `partials`, and `config`\n   * using the default writer.\n   */\n  mustache.render = function render (template, view, partials, config) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, config);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mustache/mustache.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/calculator/helfi_calculator.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=helfi_calculator.min.js.map