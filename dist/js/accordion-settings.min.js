/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/accordion-settings.js":
/*!**************************************!*\
  !*** ./src/js/accordion-settings.js ***!
  \**************************************/
/***/ (function() {

eval("document.addEventListener('DOMContentLoaded', function () {\n  // Bind closing function to the additional close button at the bottom of\n  // the content. For reasons unknown to man the close button cannot be\n  // actual button. If you change it from span to button the click event\n  // is no longer registered and the functionality doesn't work.\n  function closeFold(folds) {\n    let closeButton = folds.content.querySelector('.accordion-item__button--close');\n\n    function moveFocus(element) {\n      element.closest('.accordion__wrapper').querySelector('.accordion-item__button--toggle').focus();\n    }\n\n    closeButton.addEventListener('mousedown', function (e) {\n      folds.close();\n      e.preventDefault();\n      moveFocus(this);\n    });\n    closeButton.addEventListener('keypress', function (e) {\n      if (e.which === 13 || e.which === 32) {\n        folds.close();\n        e.preventDefault();\n        moveFocus(this);\n      }\n    });\n  } // Find all accordions.\n\n\n  const accordions = document.getElementsByClassName('handorgel');\n  window.handorgel_accordions = [];\n\n  for (let singleAccordion of accordions) {\n    /* global handorgel */\n    const accordion = new handorgel(singleAccordion, {\n      // whether multiple folds can be opened at once\n      multiSelectable: false,\n      // whether the folds are collapsible\n      collapsible: true,\n      // whether ARIA attributes are enabled\n      ariaEnabled: true,\n      // whether W3C keyboard shortcuts are enabled\n      keyboardInteraction: true,\n      // whether to loop header focus (sets focus back to first/last header when end/start reached)\n      carouselFocus: true,\n      // attribute for the header or content to open folds at initialization\n      initialOpenAttribute: 'data-open',\n      // whether to use transition at initial open\n      initialOpenTransition: true,\n      // delay used to show initial transition\n      initialOpenTransitionDelay: 200,\n      // header/content class if fold is open\n      headerOpenClass: 'handorgel__header--open',\n      contentOpenClass: 'handorgel__content--open',\n      // header/content class if fold has been opened (transition finished)\n      headerOpenedClass: 'handorgel__header--opened',\n      contentOpenedClass: 'handorgel__content--opened',\n      // header/content class if fold has been focused\n      headerFocusClass: 'handorgel__header--focus',\n      contentFocusClass: 'handorgel__content--focus',\n      // header/content class if fold is disabled\n      headerDisabledClass: 'handorgel__header--disabled',\n      contentDisabledClass: 'handorgel__content--disabled'\n    }); // Add a global variable so that we can open accordions with anchor links where needed\n\n    window.handorgel_accordions.push(accordion); // Get all the folds associated to the accordion.\n\n    let folds = accordion.folds; // Go through each fold.\n\n    folds.forEach(closeFold);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvYWNjb3JkaW9uLXNldHRpbmdzLmpzLmpzIiwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xvc2VGb2xkIiwiZm9sZHMiLCJjbG9zZUJ1dHRvbiIsImNvbnRlbnQiLCJxdWVyeVNlbGVjdG9yIiwibW92ZUZvY3VzIiwiZWxlbWVudCIsImNsb3Nlc3QiLCJmb2N1cyIsImUiLCJjbG9zZSIsInByZXZlbnREZWZhdWx0Iiwid2hpY2giLCJhY2NvcmRpb25zIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIndpbmRvdyIsImhhbmRvcmdlbF9hY2NvcmRpb25zIiwic2luZ2xlQWNjb3JkaW9uIiwiYWNjb3JkaW9uIiwiaGFuZG9yZ2VsIiwibXVsdGlTZWxlY3RhYmxlIiwiY29sbGFwc2libGUiLCJhcmlhRW5hYmxlZCIsImtleWJvYXJkSW50ZXJhY3Rpb24iLCJjYXJvdXNlbEZvY3VzIiwiaW5pdGlhbE9wZW5BdHRyaWJ1dGUiLCJpbml0aWFsT3BlblRyYW5zaXRpb24iLCJpbml0aWFsT3BlblRyYW5zaXRpb25EZWxheSIsImhlYWRlck9wZW5DbGFzcyIsImNvbnRlbnRPcGVuQ2xhc3MiLCJoZWFkZXJPcGVuZWRDbGFzcyIsImNvbnRlbnRPcGVuZWRDbGFzcyIsImhlYWRlckZvY3VzQ2xhc3MiLCJjb250ZW50Rm9jdXNDbGFzcyIsImhlYWRlckRpc2FibGVkQ2xhc3MiLCJjb250ZW50RGlzYWJsZWRDbGFzcyIsInB1c2giLCJmb3JFYWNoIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZGJ0Ly4vc3JjL2pzL2FjY29yZGlvbi1zZXR0aW5ncy5qcz8zNzQ1Il0sInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gIC8vIEJpbmQgY2xvc2luZyBmdW5jdGlvbiB0byB0aGUgYWRkaXRpb25hbCBjbG9zZSBidXR0b24gYXQgdGhlIGJvdHRvbSBvZlxuICAvLyB0aGUgY29udGVudC4gRm9yIHJlYXNvbnMgdW5rbm93biB0byBtYW4gdGhlIGNsb3NlIGJ1dHRvbiBjYW5ub3QgYmVcbiAgLy8gYWN0dWFsIGJ1dHRvbi4gSWYgeW91IGNoYW5nZSBpdCBmcm9tIHNwYW4gdG8gYnV0dG9uIHRoZSBjbGljayBldmVudFxuICAvLyBpcyBubyBsb25nZXIgcmVnaXN0ZXJlZCBhbmQgdGhlIGZ1bmN0aW9uYWxpdHkgZG9lc24ndCB3b3JrLlxuICBmdW5jdGlvbiBjbG9zZUZvbGQoZm9sZHMpIHtcbiAgICBsZXQgY2xvc2VCdXR0b24gPSBmb2xkcy5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnLmFjY29yZGlvbi1pdGVtX19idXR0b24tLWNsb3NlJ1xuICAgICk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlRm9jdXMoZWxlbWVudCkge1xuICAgICAgZWxlbWVudFxuICAgICAgICAuY2xvc2VzdCgnLmFjY29yZGlvbl9fd3JhcHBlcicpXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuYWNjb3JkaW9uLWl0ZW1fX2J1dHRvbi0tdG9nZ2xlJylcbiAgICAgICAgLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGZvbGRzLmNsb3NlKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXModGhpcyk7XG4gICAgfSk7XG5cbiAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS53aGljaCA9PT0gMTMgfHwgZS53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgZm9sZHMuY2xvc2UoKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBtb3ZlRm9jdXModGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBGaW5kIGFsbCBhY2NvcmRpb25zLlxuICBjb25zdCBhY2NvcmRpb25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaGFuZG9yZ2VsJyk7XG4gIHdpbmRvdy5oYW5kb3JnZWxfYWNjb3JkaW9ucyA9IFtdO1xuXG4gIGZvciAobGV0IHNpbmdsZUFjY29yZGlvbiBvZiBhY2NvcmRpb25zKSB7XG4gICAgLyogZ2xvYmFsIGhhbmRvcmdlbCAqL1xuICAgIGNvbnN0IGFjY29yZGlvbiA9IG5ldyBoYW5kb3JnZWwoc2luZ2xlQWNjb3JkaW9uLCB7XG4gICAgICAvLyB3aGV0aGVyIG11bHRpcGxlIGZvbGRzIGNhbiBiZSBvcGVuZWQgYXQgb25jZVxuICAgICAgbXVsdGlTZWxlY3RhYmxlOiBmYWxzZSxcbiAgICAgIC8vIHdoZXRoZXIgdGhlIGZvbGRzIGFyZSBjb2xsYXBzaWJsZVxuICAgICAgY29sbGFwc2libGU6IHRydWUsXG5cbiAgICAgIC8vIHdoZXRoZXIgQVJJQSBhdHRyaWJ1dGVzIGFyZSBlbmFibGVkXG4gICAgICBhcmlhRW5hYmxlZDogdHJ1ZSxcbiAgICAgIC8vIHdoZXRoZXIgVzNDIGtleWJvYXJkIHNob3J0Y3V0cyBhcmUgZW5hYmxlZFxuICAgICAga2V5Ym9hcmRJbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICAgIC8vIHdoZXRoZXIgdG8gbG9vcCBoZWFkZXIgZm9jdXMgKHNldHMgZm9jdXMgYmFjayB0byBmaXJzdC9sYXN0IGhlYWRlciB3aGVuIGVuZC9zdGFydCByZWFjaGVkKVxuICAgICAgY2Fyb3VzZWxGb2N1czogdHJ1ZSxcblxuICAgICAgLy8gYXR0cmlidXRlIGZvciB0aGUgaGVhZGVyIG9yIGNvbnRlbnQgdG8gb3BlbiBmb2xkcyBhdCBpbml0aWFsaXphdGlvblxuICAgICAgaW5pdGlhbE9wZW5BdHRyaWJ1dGU6ICdkYXRhLW9wZW4nLFxuICAgICAgLy8gd2hldGhlciB0byB1c2UgdHJhbnNpdGlvbiBhdCBpbml0aWFsIG9wZW5cbiAgICAgIGluaXRpYWxPcGVuVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgIC8vIGRlbGF5IHVzZWQgdG8gc2hvdyBpbml0aWFsIHRyYW5zaXRpb25cbiAgICAgIGluaXRpYWxPcGVuVHJhbnNpdGlvbkRlbGF5OiAyMDAsXG5cbiAgICAgIC8vIGhlYWRlci9jb250ZW50IGNsYXNzIGlmIGZvbGQgaXMgb3BlblxuICAgICAgaGVhZGVyT3BlbkNsYXNzOiAnaGFuZG9yZ2VsX19oZWFkZXItLW9wZW4nLFxuICAgICAgY29udGVudE9wZW5DbGFzczogJ2hhbmRvcmdlbF9fY29udGVudC0tb3BlbicsXG5cbiAgICAgIC8vIGhlYWRlci9jb250ZW50IGNsYXNzIGlmIGZvbGQgaGFzIGJlZW4gb3BlbmVkICh0cmFuc2l0aW9uIGZpbmlzaGVkKVxuICAgICAgaGVhZGVyT3BlbmVkQ2xhc3M6ICdoYW5kb3JnZWxfX2hlYWRlci0tb3BlbmVkJyxcbiAgICAgIGNvbnRlbnRPcGVuZWRDbGFzczogJ2hhbmRvcmdlbF9fY29udGVudC0tb3BlbmVkJyxcblxuICAgICAgLy8gaGVhZGVyL2NvbnRlbnQgY2xhc3MgaWYgZm9sZCBoYXMgYmVlbiBmb2N1c2VkXG4gICAgICBoZWFkZXJGb2N1c0NsYXNzOiAnaGFuZG9yZ2VsX19oZWFkZXItLWZvY3VzJyxcbiAgICAgIGNvbnRlbnRGb2N1c0NsYXNzOiAnaGFuZG9yZ2VsX19jb250ZW50LS1mb2N1cycsXG5cbiAgICAgIC8vIGhlYWRlci9jb250ZW50IGNsYXNzIGlmIGZvbGQgaXMgZGlzYWJsZWRcbiAgICAgIGhlYWRlckRpc2FibGVkQ2xhc3M6ICdoYW5kb3JnZWxfX2hlYWRlci0tZGlzYWJsZWQnLFxuICAgICAgY29udGVudERpc2FibGVkQ2xhc3M6ICdoYW5kb3JnZWxfX2NvbnRlbnQtLWRpc2FibGVkJyxcbiAgICB9KTtcblxuICAgIC8vIEFkZCBhIGdsb2JhbCB2YXJpYWJsZSBzbyB0aGF0IHdlIGNhbiBvcGVuIGFjY29yZGlvbnMgd2l0aCBhbmNob3IgbGlua3Mgd2hlcmUgbmVlZGVkXG4gICAgd2luZG93LmhhbmRvcmdlbF9hY2NvcmRpb25zLnB1c2goYWNjb3JkaW9uKTtcblxuICAgIC8vIEdldCBhbGwgdGhlIGZvbGRzIGFzc29jaWF0ZWQgdG8gdGhlIGFjY29yZGlvbi5cbiAgICBsZXQgZm9sZHMgPSBhY2NvcmRpb24uZm9sZHM7XG5cbiAgICAvLyBHbyB0aHJvdWdoIGVhY2ggZm9sZC5cbiAgICBmb2xkcy5mb3JFYWNoKGNsb3NlRm9sZCk7XG4gIH1cbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBWTtFQUN4RDtFQUNBO0VBQ0E7RUFDQTtFQUNBLFNBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0lBQ3hCLElBQUlDLFdBQVcsR0FBR0QsS0FBSyxDQUFDRSxPQUFOLENBQWNDLGFBQWQsQ0FDaEIsZ0NBRGdCLENBQWxCOztJQUlBLFNBQVNDLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCO01BQzFCQSxPQUFPLENBQ0pDLE9BREgsQ0FDVyxxQkFEWCxFQUVHSCxhQUZILENBRWlCLGlDQUZqQixFQUdHSSxLQUhIO0lBSUQ7O0lBRUROLFdBQVcsQ0FBQ0gsZ0JBQVosQ0FBNkIsV0FBN0IsRUFBMEMsVUFBVVUsQ0FBVixFQUFhO01BQ3JEUixLQUFLLENBQUNTLEtBQU47TUFDQUQsQ0FBQyxDQUFDRSxjQUFGO01BQ0FOLFNBQVMsQ0FBQyxJQUFELENBQVQ7SUFDRCxDQUpEO0lBTUFILFdBQVcsQ0FBQ0gsZ0JBQVosQ0FBNkIsVUFBN0IsRUFBeUMsVUFBVVUsQ0FBVixFQUFhO01BQ3BELElBQUlBLENBQUMsQ0FBQ0csS0FBRixLQUFZLEVBQVosSUFBa0JILENBQUMsQ0FBQ0csS0FBRixLQUFZLEVBQWxDLEVBQXNDO1FBQ3BDWCxLQUFLLENBQUNTLEtBQU47UUFDQUQsQ0FBQyxDQUFDRSxjQUFGO1FBQ0FOLFNBQVMsQ0FBQyxJQUFELENBQVQ7TUFDRDtJQUNGLENBTkQ7RUFPRCxDQTlCdUQsQ0FnQ3hEOzs7RUFDQSxNQUFNUSxVQUFVLEdBQUdmLFFBQVEsQ0FBQ2dCLHNCQUFULENBQWdDLFdBQWhDLENBQW5CO0VBQ0FDLE1BQU0sQ0FBQ0Msb0JBQVAsR0FBOEIsRUFBOUI7O0VBRUEsS0FBSyxJQUFJQyxlQUFULElBQTRCSixVQUE1QixFQUF3QztJQUN0QztJQUNBLE1BQU1LLFNBQVMsR0FBRyxJQUFJQyxTQUFKLENBQWNGLGVBQWQsRUFBK0I7TUFDL0M7TUFDQUcsZUFBZSxFQUFFLEtBRjhCO01BRy9DO01BQ0FDLFdBQVcsRUFBRSxJQUprQztNQU0vQztNQUNBQyxXQUFXLEVBQUUsSUFQa0M7TUFRL0M7TUFDQUMsbUJBQW1CLEVBQUUsSUFUMEI7TUFVL0M7TUFDQUMsYUFBYSxFQUFFLElBWGdDO01BYS9DO01BQ0FDLG9CQUFvQixFQUFFLFdBZHlCO01BZS9DO01BQ0FDLHFCQUFxQixFQUFFLElBaEJ3QjtNQWlCL0M7TUFDQUMsMEJBQTBCLEVBQUUsR0FsQm1CO01Bb0IvQztNQUNBQyxlQUFlLEVBQUUseUJBckI4QjtNQXNCL0NDLGdCQUFnQixFQUFFLDBCQXRCNkI7TUF3Qi9DO01BQ0FDLGlCQUFpQixFQUFFLDJCQXpCNEI7TUEwQi9DQyxrQkFBa0IsRUFBRSw0QkExQjJCO01BNEIvQztNQUNBQyxnQkFBZ0IsRUFBRSwwQkE3QjZCO01BOEIvQ0MsaUJBQWlCLEVBQUUsMkJBOUI0QjtNQWdDL0M7TUFDQUMsbUJBQW1CLEVBQUUsNkJBakMwQjtNQWtDL0NDLG9CQUFvQixFQUFFO0lBbEN5QixDQUEvQixDQUFsQixDQUZzQyxDQXVDdEM7O0lBQ0FwQixNQUFNLENBQUNDLG9CQUFQLENBQTRCb0IsSUFBNUIsQ0FBaUNsQixTQUFqQyxFQXhDc0MsQ0EwQ3RDOztJQUNBLElBQUlqQixLQUFLLEdBQUdpQixTQUFTLENBQUNqQixLQUF0QixDQTNDc0MsQ0E2Q3RDOztJQUNBQSxLQUFLLENBQUNvQyxPQUFOLENBQWNyQyxTQUFkO0VBQ0Q7QUFDRixDQXBGRCJ9\n//# sourceURL=webpack-internal:///./src/js/accordion-settings.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/accordion-settings.js"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=accordion-settings.min.js.map