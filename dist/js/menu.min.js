/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/nav-global/menu.js":
/*!***********************************!*\
  !*** ./src/js/nav-global/menu.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.mjs\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst frontpageTranslation = Drupal.t('Frontpage', {}, {\n  context: 'Global navigation mobile menu top level'\n});\nconst openSubMenuTranslation = Drupal.t('Open submenu:', {}, {\n  context: 'Mobile navigation menu prefix'\n});\nconst openParentMenuTranslation = Drupal.t('Open parent menu:', {}, {\n  context: 'Mobile navigation menu prefix'\n});\n\n// eslint-disable-next-line no-extend-native\nArray.prototype.findRecursive = function findRecursivelyFromArray(predicate, childrenPropertyName) {\n  if (!childrenPropertyName) {\n    throw new Error('findRecursive requires parameter `childrenPropertyName`');\n  }\n  let array = [];\n  array = this;\n  const initialFind = array.find(predicate);\n  const elementsWithChildren = array.filter(x => x[childrenPropertyName]);\n  if (initialFind) {\n    return initialFind;\n  }\n  if (elementsWithChildren.length) {\n    const childElements = [];\n    elementsWithChildren.forEach(x => {\n      childElements.push(...x[childrenPropertyName]);\n    });\n    return childElements.findRecursive(predicate, childrenPropertyName);\n  }\n  return undefined;\n};\n\n/**\n * Generic object helpers for template contexts\n */\n\n/**\n * Check if current given menu item has items\n * @return {boolean} current object has sub_tree with items in it.\n */\nfunction button() {\n  // return this.hasItems\n  return this.sub_tree?.length > 0;\n}\n\n/**\n * Check if  given menu item url pathname matches current browser pathname\n * @return {boolean} current object has url and url pathname matches current location pathname\n */\nfunction isCurrentPath() {\n  try {\n    return !this.external && this.url && new URL(this.url).pathname === window.location.pathname;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn('Invalid url given to \"isCurrentPath\"-helper', this.url);\n  }\n  return false;\n}\n\n/**\n * Convert null `active` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have active set and trueish\n */\nfunction isActive() {\n  return !!this.active;\n}\n\n/**\n * Convert null `inPath` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have inPath set and trueish\n */\nfunction isInPath() {\n  return !!this.inPath;\n}\n\n/**\n * Convert null `is_injected` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have is_injected set and trueish\n */\nfunction isInjected() {\n  return !!this.is_injected;\n}\n\n/** *\n * Convert attributes to to template-friendly object\n * @return {object}  {external:bool, protocol:bool}\n */\nfunction externalLinkAttributes() {\n  return {\n    external: this.attributes['data-external'] || this.external || false,\n    protocol: this.attributes['data-protocol'] || false\n  };\n}\n\n/**\n * Convert null `attributes.lang` values to boolean for mustache templates to avoid using parent values\n * @return {boolean} does current object have attributes.lang set and trueish\n */\nfunction hasLang() {\n  return !!this.attributes?.lang;\n}\n\n/**\n * Determinine icon type and text for external link\n * @return {object} {class: list of related CSS classes, text: translated description text }\n */\nfunction externalLinkIcon() {\n  if (!this.external) {\n    return false;\n  }\n  return externalLinkIcon.ICONS[this.attributes['data-protocol']] || externalLinkIcon.ICONS.external;\n}\nexternalLinkIcon.ICONS = {\n  mailto: {\n    class: 'link__type link__type--mailto',\n    text: Drupal.t('Link opens default mail program', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link opens default mail program.'\n    })\n  },\n  tel: {\n    class: 'link__type link__type--tel',\n    text: Drupal.t('Link starts a phone call', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link starts a phone call.'\n    })\n  },\n  external: {\n    class: 'link__type link__type--external',\n    text: Drupal.t('Link leads to external service', {}, {\n      context: 'Explanation for screen-reader software that the icon visible next to this link means that the link leads to an external service.'\n    })\n  }\n};\n\n/**\n * Panel main object.\n */\n\nconst MobilePanel = {\n  compileTemplates() {\n    this.templates = {\n      panel: `\n  {{#panels}}\n    <section class=\"{{panel_class}}\">\n      <div class=\"mmenu__panel-body\">\n        {{#back}}\n          <button class=\"mmenu__back\">\n            <span class=\"visually-hidden\">{{openParentMenuTranslation}}</span>\n            <span class=\"mmenu__back-wrapper\">{{back}}</span>\n          </button>\n        {{/back}}\n        <a href=\"{{url}}\" class=\"mmenu__title-link{{#isInPath}} mmenu__title-link--in-path{{/isInPath}}\"{{#isActive}} aria-current=\"page\"{{/isActive}}\n\n        {{#externalLinkAttributes.external}}\n          data-external=\"true\"\n        {{/externalLinkAttributes.external}}\n\n        {{#externalLinkAttributes.protocol}}\n          data-protocol=\"{{externalLinkAttributes.protocol}}\"\n        {{/externalLinkAttributes.protocol}}\n\n        ><span class=\"mmenu__link__text\"\n\n        {{#hasLang}}\n          lang=\"{{attributes.lang}}\"\n        {{/hasLang}}\n\n        >{{name}}</span>{{#externalLinkIcon}} <span class=\"{{class}}\"></span><span class=\"visually-hidden\">({{ text }})</span>{{/externalLinkIcon}}</a>\n        {{>sub_tree}}\n      </div>\n      ${document.querySelector('.js-mmenu__footer')?.outerHTML}\n    </section>\n  {{/panels}}\n\n  {{^panels}}\n  <div class=\"mmenu__loading\">\n    <div class=\"hds-loading-spinner\">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n  {{/panels}}\n  `,\n      list: `\n    <ul class=\"mmenu__items\">\n      {{#sub_tree}}\n        <li class=\"mmenu__item\">\n          <a href=\"{{url}}\" class=\"mmenu__item-link{{#isInPath}} mmenu__item-link--in-path{{/isInPath}}{{#isInjected}} mmenu__item-link--injected{{/isInjected}}\"{{#isActive}} aria-current=\"page\"{{/isActive}}\n          {{#externalLinkAttributes.external}}\n            data-external=\"true\"\n          {{/externalLinkAttributes.external}}\n          {{#externalLinkAttributes.protocol}}\n            data-protocol={{externalLinkAttributes.protocol}}\n          {{/externalLinkAttributes.protocol}}\n\n          ><span class=\"mmenu__link__text\"\n\n          {{#hasLang}}\n            lang=\"{{attributes.lang}}\"\n          {{/hasLang}}\n\n            >{{name}}</span>{{#externalLinkIcon}} <span class=\"{{class}}\"></span><span class=\"visually-hidden\">({{ text }})</span>{{/externalLinkIcon}}\n          </a>\n          {{#button}}\n            <button class=\"mmenu__forward \" value={{id}}><span class=\"visually-hidden\">{{openSubMenuTranslation}} {{name}}</span></button>\n          {{/button}}\n        </li>\n      {{/sub_tree}}\n    </ul>\n   `\n    };\n  },\n  menu: null,\n  templates: null,\n  SCROLL_TRESHOLD: 100,\n  size: 10,\n  // Maximum assumed depth of tree. Used for checking if going up is allowed\n  running: false,\n  data: null,\n  currentIndex: 0,\n  cacheKey: 'hdbt-mobile-menu',\n  enableCache: false,\n  selectors: {\n    container: '#mmenu',\n    rootId: 'mmenu__panels',\n    forward: 'mmenu__forward',\n    back: 'mmenu__back'\n  },\n  getAPIUrl() {\n    const url = new URL(drupalSettings?.helfi_navigation?.links?.api);\n    url.searchParams.set('_format', 'json');\n    url.searchParams.set('max-depth', drupalSettings?.menu_depth);\n    return url.toString();\n  },\n  getRoot() {\n    return document.getElementById(this.selectors.rootId);\n  },\n  sortPanelsByPath() {\n    const panels = [];\n    const allItems = this.data;\n    const currentItem = allItems.findRecursive(item => isCurrentPath.call(item), 'sub_tree');\n    let parentIndex = currentItem?.sub_tree?.length ? currentItem.id : currentItem?.parentId;\n    while (parentIndex) {\n      const found = allItems.findRecursive(\n      // sub_tree is api  data key.\n      // eslint-disable-next-line no-loop-func, camelcase,\n      ({\n        id,\n        url,\n        name,\n        sub_tree,\n        parentId,\n        inPath,\n        active\n      }) => {\n        if (id === parentIndex) {\n          // eslint-disable-next-line camelcase\n          panels.push({\n            sub_tree,\n            name,\n            url,\n            parentId,\n            inPath,\n            active\n          });\n          // Set new parent id. If this is empty, it will stop the while-loop.\n          parentIndex = parentId;\n          return true;\n        }\n        return false;\n      }, 'sub_tree');\n      if (!found) {\n        // Stop while-loop.\n        parentIndex = undefined;\n      }\n    }\n    panels.push({\n      sub_tree: allItems,\n      inPath: true\n    });\n    panels.reverse();\n    this.currentIndex = panels.length - 1;\n    this.content = [...panels];\n  },\n  content: [],\n  getView(state) {\n    // Note the use of arrow functions and non-arrow functions for scope of \"this\" in panel rendering.\n    // Use arrow to access Panel object, non-lexical function for accessing current iterable object in template.\n    return this.content.map((item, i) => ({\n      ...item,\n      name: item?.name || frontpageTranslation,\n      url: item.url || drupalSettings.helfi_navigation.links.canonical,\n      // If current item has subitems, show button for next panel.\n      button,\n      isActive,\n      isInPath,\n      isInjected,\n      externalLinkAttributes,\n      hasLang,\n      externalLinkIcon,\n      // Show title of previously clicked item in Back-button (or Frontpage)\n      back: i > 0 ? this.content.at(i - 1)?.name ?? frontpageTranslation : false,\n      openSubMenuTranslation,\n      openParentMenuTranslation,\n      /** *\n       * Define correct starting positions for each panel, depeding on traversal direction\n       * At start, first item is on stage and anything else must be on right.\n       * When going forward in the menu, current -1  item must be on stage and current item starts from right\n       * When going backward in the menu, current +1 item must be on stage and current item starts from left\n       *\n       * At render, -left  (down to root) and -right (up the tree) classes are added and removed accordingly to achieve wanted animation and final state.\n       */\n      panel_class: classnames__WEBPACK_IMPORTED_MODULE_1___default()({\n        mmenu__panel: true,\n        'mmenu__panel--visible': true,\n        'mmenu__panel--current': i === this.currentIndex,\n        'mmenu__panel--visible-right': state === 'start' && i > this.currentIndex || state === 'up' && i >= this.currentIndex || state === 'down' && i > this.currentIndex + 1,\n        'mmenu__panel--visible-left': state === 'up' && i < this.currentIndex - 1 || state === 'down' && i <= this.currentIndex\n      })\n    }));\n  },\n  up(parentId) {\n    if (!parentId) {\n      throw new Error(`Id missing for next menu item  ${parentId}`);\n    }\n    /**\n     * Find the item corresponding to given id in item arrow click event.\n     * It's items will be the new current panel. Old panel swipes left.\n     */\n    const next = this.content.at(this.currentIndex).sub_tree.find(({\n      id\n    }) => id === parentId);\n    if (!next) {\n      throw new Error(`ID mismatch in menu items${parentId}`);\n    }\n    this.currentIndex = this.currentIndex + 1 < this.size ? this.currentIndex + 1 : this.currentIndex;\n    this.content[this.currentIndex] = next;\n    this.render('up');\n  },\n  down() {\n    if (this.currentIndex === 0) {\n      return;\n    }\n    this.currentIndex = this.currentIndex - 1 >= 0 ? this.currentIndex - 1 : this.currentIndex;\n    this.render('down');\n  },\n  render(state) {\n    const root = this.getRoot();\n    root.innerHTML = mustache__WEBPACK_IMPORTED_MODULE_0__[\"default\"].render(this.templates.panel, {\n      panels: this.getView(state)\n    }, {\n      sub_tree: this.templates.list\n    });\n    if (state === 'load') {\n      return;\n    }\n    const panels = [...root.querySelectorAll('.mmenu__panel')];\n    const current = panels.at(this.currentIndex);\n    if (root.parentElement.scrollTop > this.SCROLL_TRESHOLD && this.currentIndex > 0) {\n      current.querySelector('.mmenu__back').scrollIntoView({\n        block: 'start',\n        behaviour: 'smooth'\n      });\n    }\n    setTimeout(() => {\n      current.classList.remove('mmenu__panel--visible-right', 'mmenu__panel--visible-left');\n      switch (state) {\n        case 'up':\n          panels.at(this.currentIndex - 1).classList.add('mmenu__panel--visible-left');\n          break;\n        case 'down':\n          panels.at(this.currentIndex + 1).classList.add('mmenu__panel--visible-right');\n          break;\n        default:\n      }\n      setTimeout(() => {\n        /**\n         * Hide prev & next panels from screen readers by adding visibility:hidden.\n         * DO NOT USE display:none. Display needs to be set to 'flex' or panels will collapse.\n         */\n        panels.forEach(panel => {\n          if (!panel.classList.contains('mmenu__panel--current')) {\n            panel.style.visibility = 'hidden';\n          }\n        });\n        /**\n         * See $-transition-duration in _mmenu.scss.\n         * Timeout must not be shorter than animation duration.\n         */\n      }, 200);\n    }, 10); // Transition classes need to be added after initial render.\n  },\n\n  async load() {\n    const MENU = await fetch(this.getAPIUrl());\n    const data = await MENU.json();\n    const allInstances = Object.getOwnPropertyNames(data);\n    if (!allInstances.length) {\n      throw new Error('No instances found in data', data);\n    }\n    const allItems = allInstances.map(instanceName => {\n      const item = data[instanceName].menu_tree[0];\n      item.parentId = '';\n      return item;\n    });\n    const currentItem = allItems.findRecursive(item => isCurrentPath.call(item), 'sub_tree');\n    if (currentItem) {\n      currentItem.active = true;\n      currentItem.inPath = true;\n    }\n    let parentIndex = currentItem?.parentId;\n    while (parentIndex) {\n      // eslint-disable-next-line no-loop-func\n      const found = allItems.findRecursive(item => {\n        if (item.id === parentIndex) {\n          // set new parent id. If this is empty, it will stop the while-loop.\n          parentIndex = item.parentId;\n          item.inPath = true;\n          return true;\n        }\n        return false;\n      }, 'sub_tree');\n      if (!found) {\n        // Stop while-loop.\n        parentIndex = undefined;\n      }\n    }\n    this.data = allItems;\n  },\n  async start() {\n    const container = document.querySelector(this.selectors.container);\n    if (!this.getRoot() || !container) {\n      throw new Error('Panel root not found');\n    }\n    // Show container and loader on start\n    container.classList.add('mmenu--visible');\n    this.render('load');\n    try {\n      await this.load();\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Unable to load menu API, using fallback menu instead', e);\n      this.enableFallback();\n      return;\n    }\n    /**\n     * Set the panels according to current path.\n     */\n    this.sortPanelsByPath();\n    this.render('start');\n    /**\n     * Panel event listener:\n     *\n     *  Bind one click event listener to main panel. One for all click events.!\n     *  Add more if one handler becomes too cumbersome.\n     *  */\n    this.getRoot().addEventListener('click', e => {\n      // Arrow function keeps us in Panel context for \"this\". Take what you need from event\n      const {\n        target: {\n          classList,\n          value: id,\n          parentElement\n        }\n      } = e;\n      e.stopImmediatePropagation();\n      // Or outside-of-menu-click listener will be triggered incorrectly due to rerender before parent lookup.\n      // See nav-global.js\n\n      if (classList && classList.contains(this.selectors.forward)) {\n        this.up(id);\n      } else if (classList && classList.contains(this.selectors.back) || parentElement?.classList && parentElement?.classList.contains(this.selectors.back)) {\n        this.down();\n      }\n    });\n  },\n  isOpen() {\n    return window.location.hash === '#menu' || this.toggleButton.getAttribute('aria-expanded') === 'true';\n  },\n  disableFallback() {\n    this.menu.dataset.js = true; // Switch to use js-enhanced version instead of pure css version\n  },\n\n  enableFallback() {\n    this.menu.dataset.target = 'false'; // Close the menu with js so that we can use css version instead\n    this.getRoot().innerHTML = ''; // Remove rotator\n    delete this.menu.dataset.js; // Switch to use pure css version instead of js-enhanced version\n    window.location.hash = '#menu'; // Open menu with the css way\n  },\n\n  close() {\n    this.toggleButton.setAttribute('aria-expanded', 'false');\n    this.menu.dataset.target = 'false';\n    if (this.onClose) {\n      this.onClose();\n    }\n  },\n  open() {\n    this.menu.dataset.target = 'true';\n    this.toggleButton.setAttribute('aria-expanded', 'true');\n    if (this.onOpen) {\n      this.onOpen();\n    }\n  },\n  toggle() {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n    // We should always focus the menu button after toggling the menu\n    this.toggleButton.focus();\n  },\n  init({\n    onOpen,\n    onClose\n  }) {\n    /**\n     * Start the panel after DOM has loaded.\n     * Compiled templates need to have reliable access to header and menu elements cloned from Server DOM.\n     */\n    if (this.running) {\n      // eslint-disable-next-line no-console\n      console.warn('MobilePanel already initiated. Is it include more than once?');\n      return;\n    }\n    this.onOpen = onOpen;\n    this.onClose = onClose;\n\n    // This used to load after DOM was loaded, but we added defer for the javascript.\n    // See  block--mobile-navigation.html.twig for the button\n    this.toggleButton = document.querySelector('.js-menu-toggle-button');\n    if (!this.toggleButton) {\n      throw new Error('No toggle button for JS menu.');\n    }\n    // TODO: UHF-8791 Where is this #menu coming from? Maybe name it better (https://helsinkisolutionoffice.atlassian.net/browse/UHF-8791).\n    this.menu = document.querySelector('#menu');\n    if (!this.menu) {\n      // eslint-disable-next-line no-console\n      console.error('Panel not present in DOM. Cannot start JS mobile menu');\n      return;\n    }\n    this.disableFallback();\n\n    /**\n     * Close menu on Escape button click if it is open.\n     */\n    document.addEventListener('keydown', e => {\n      if ((e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) && this.isOpen()) {\n        this.close();\n        this.toggleButton.focus();\n      }\n    });\n    const start = () => {\n      /**\n       * Delay template compilation to menu start to ensure\n       * footer & top menu blocks are rendered in main DOM before cloning them.\n       *\n       * Start removes itself in order to only run once.\n       */\n      this.compileTemplates();\n      this.toggleButton.removeEventListener('click', start);\n      this.start();\n    };\n    /**\n     * Add start-event to menu toggle button.\n     *\n     * Add Menu toggle function to menu button.\n     * Side effects:\n     * Toggles chat widget display values and aria-expanded states and clears menu hash when closing.\n     */\n    this.toggleButton.addEventListener('click', start);\n    this.toggleButton.addEventListener('click', () => this.toggle());\n\n    /**\n     * Open menu if it is required in the hash, then clear hash.\n     */\n    if (this.isOpen()) {\n      window.location.hash = '';\n      start();\n      this.open();\n    }\n    this.running = true;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (MobilePanel);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/nav-global/menu.js\n");

/***/ }),

/***/ "./node_modules/classnames/index.js":
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif ( true && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7O0FBRUEsa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEtBQUssS0FBNkI7QUFDbEM7QUFDQTtBQUNBLEdBQUcsU0FBUyxJQUE0RTtBQUN4RjtBQUNBLEVBQUUsaUNBQXFCLEVBQUUsbUNBQUU7QUFDM0I7QUFDQSxHQUFHO0FBQUEsa0dBQUM7QUFDSixHQUFHLEtBQUssRUFFTjtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZGJ0Ly4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanM/NGQyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/classnames/index.js\n");

/***/ }),

/***/ "./node_modules/mustache/mustache.mjs":
/*!********************************************!*\
  !*** ./node_modules/mustache/mustache.mjs ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\nvar objectToString = Object.prototype.toString;\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\n  return objectToString.call(object) === '[object Array]';\n};\n\nfunction isFunction (object) {\n  return typeof object === 'function';\n}\n\n/**\n * More correct typeof string handling array\n * which normally returns typeof 'object'\n */\nfunction typeStr (obj) {\n  return isArray(obj) ? 'array' : typeof obj;\n}\n\nfunction escapeRegExp (string) {\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Null safe way of checking whether or not an object,\n * including its prototype, has a given property\n */\nfunction hasProperty (obj, propName) {\n  return obj != null && typeof obj === 'object' && (propName in obj);\n}\n\n/**\n * Safe way of detecting whether or not the given thing is a primitive and\n * whether it has the given property\n */\nfunction primitiveHasOwnProperty (primitive, propName) {\n  return (\n    primitive != null\n    && typeof primitive !== 'object'\n    && primitive.hasOwnProperty\n    && primitive.hasOwnProperty(propName)\n  );\n}\n\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n// See https://github.com/janl/mustache.js/issues/189\nvar regExpTest = RegExp.prototype.test;\nfunction testRegExp (re, string) {\n  return regExpTest.call(re, string);\n}\n\nvar nonSpaceRe = /\\S/;\nfunction isWhitespace (string) {\n  return !testRegExp(nonSpaceRe, string);\n}\n\nvar entityMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nfunction escapeHtml (string) {\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n    return entityMap[s];\n  });\n}\n\nvar whiteRe = /\\s*/;\nvar spaceRe = /\\s+/;\nvar equalsRe = /\\s*=/;\nvar curlyRe = /\\s*\\}/;\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n/**\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\n * argument is given here it must be an array with two string values: the\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n * course, the default is to use mustaches (i.e. mustache.tags).\n *\n * A token is an array with at least 4 elements. The first element is the\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n * all text that appears outside a symbol this element is \"text\".\n *\n * The second element of a token is its \"value\". For mustache tags this is\n * whatever else was inside the tag besides the opening symbol. For text tokens\n * this is the text itself.\n *\n * The third and fourth elements of the token are the start and end indices,\n * respectively, of the token in the original template.\n *\n * Tokens that are the root node of a subtree contain two more elements: 1) an\n * array of tokens in the subtree and 2) the index in the original template at\n * which the closing tag for that section begins.\n *\n * Tokens for partials also contain two more elements: 1) a string value of\n * indendation prior to that tag and 2) the index of that tag on that line -\n * eg a value of 2 indicates the partial is the third tag on this line.\n */\nfunction parseTemplate (template, tags) {\n  if (!template)\n    return [];\n  var lineHasNonSpace = false;\n  var sections = [];     // Stack to hold section tokens\n  var tokens = [];       // Buffer to hold the tokens\n  var spaces = [];       // Indices of whitespace tokens on the current line\n  var hasTag = false;    // Is there a {{tag}} on the current line?\n  var nonSpace = false;  // Is there a non-space char on the current line?\n  var indentation = '';  // Tracks indentation for tags that use it\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n  // Strips all whitespace tokens array for the current line\n  // if there was a {{#tag}} on it and otherwise only space.\n  function stripSpace () {\n    if (hasTag && !nonSpace) {\n      while (spaces.length)\n        delete tokens[spaces.pop()];\n    } else {\n      spaces = [];\n    }\n\n    hasTag = false;\n    nonSpace = false;\n  }\n\n  var openingTagRe, closingTagRe, closingCurlyRe;\n  function compileTags (tagsToCompile) {\n    if (typeof tagsToCompile === 'string')\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n      throw new Error('Invalid tags: ' + tagsToCompile);\n\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n  }\n\n  compileTags(tags || mustache.tags);\n\n  var scanner = new Scanner(template);\n\n  var start, type, value, chr, token, openSection;\n  while (!scanner.eos()) {\n    start = scanner.pos;\n\n    // Match any text between tags.\n    value = scanner.scanUntil(openingTagRe);\n\n    if (value) {\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n        chr = value.charAt(i);\n\n        if (isWhitespace(chr)) {\n          spaces.push(tokens.length);\n          indentation += chr;\n        } else {\n          nonSpace = true;\n          lineHasNonSpace = true;\n          indentation += ' ';\n        }\n\n        tokens.push([ 'text', chr, start, start + 1 ]);\n        start += 1;\n\n        // Check for whitespace on the current line.\n        if (chr === '\\n') {\n          stripSpace();\n          indentation = '';\n          tagIndex = 0;\n          lineHasNonSpace = false;\n        }\n      }\n    }\n\n    // Match the opening tag.\n    if (!scanner.scan(openingTagRe))\n      break;\n\n    hasTag = true;\n\n    // Get the tag type.\n    type = scanner.scan(tagRe) || 'name';\n    scanner.scan(whiteRe);\n\n    // Get the tag value.\n    if (type === '=') {\n      value = scanner.scanUntil(equalsRe);\n      scanner.scan(equalsRe);\n      scanner.scanUntil(closingTagRe);\n    } else if (type === '{') {\n      value = scanner.scanUntil(closingCurlyRe);\n      scanner.scan(curlyRe);\n      scanner.scanUntil(closingTagRe);\n      type = '&';\n    } else {\n      value = scanner.scanUntil(closingTagRe);\n    }\n\n    // Match the closing tag.\n    if (!scanner.scan(closingTagRe))\n      throw new Error('Unclosed tag at ' + scanner.pos);\n\n    if (type == '>') {\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n    } else {\n      token = [ type, value, start, scanner.pos ];\n    }\n    tagIndex++;\n    tokens.push(token);\n\n    if (type === '#' || type === '^') {\n      sections.push(token);\n    } else if (type === '/') {\n      // Check section nesting.\n      openSection = sections.pop();\n\n      if (!openSection)\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n      if (openSection[1] !== value)\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n    } else if (type === 'name' || type === '{' || type === '&') {\n      nonSpace = true;\n    } else if (type === '=') {\n      // Set the tags for the next time around.\n      compileTags(value);\n    }\n  }\n\n  stripSpace();\n\n  // Make sure there are no open sections when we're done.\n  openSection = sections.pop();\n\n  if (openSection)\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n  return nestTokens(squashTokens(tokens));\n}\n\n/**\n * Combines the values of consecutive text tokens in the given `tokens` array\n * to a single token.\n */\nfunction squashTokens (tokens) {\n  var squashedTokens = [];\n\n  var token, lastToken;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    if (token) {\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n        lastToken[1] += token[1];\n        lastToken[3] = token[3];\n      } else {\n        squashedTokens.push(token);\n        lastToken = token;\n      }\n    }\n  }\n\n  return squashedTokens;\n}\n\n/**\n * Forms the given array of `tokens` into a nested tree structure where\n * tokens that represent a section have two additional items: 1) an array of\n * all tokens that appear in that section and 2) the index in the original\n * template that represents the end of that section.\n */\nfunction nestTokens (tokens) {\n  var nestedTokens = [];\n  var collector = nestedTokens;\n  var sections = [];\n\n  var token, section;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n    }\n  }\n\n  return nestedTokens;\n}\n\n/**\n * A simple string scanner that is used by the template parser to find\n * tokens in template strings.\n */\nfunction Scanner (string) {\n  this.string = string;\n  this.tail = string;\n  this.pos = 0;\n}\n\n/**\n * Returns `true` if the tail is empty (end of string).\n */\nScanner.prototype.eos = function eos () {\n  return this.tail === '';\n};\n\n/**\n * Tries to match the given regular expression at the current position.\n * Returns the matched text if it can match, the empty string otherwise.\n */\nScanner.prototype.scan = function scan (re) {\n  var match = this.tail.match(re);\n\n  if (!match || match.index !== 0)\n    return '';\n\n  var string = match[0];\n\n  this.tail = this.tail.substring(string.length);\n  this.pos += string.length;\n\n  return string;\n};\n\n/**\n * Skips all text until the given regular expression can be matched. Returns\n * the skipped string, which is the entire tail if no match can be made.\n */\nScanner.prototype.scanUntil = function scanUntil (re) {\n  var index = this.tail.search(re), match;\n\n  switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = '';\n      break;\n    case 0:\n      match = '';\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n  }\n\n  this.pos += match.length;\n\n  return match;\n};\n\n/**\n * Represents a rendering context by wrapping a view object and\n * maintaining a reference to the parent context.\n */\nfunction Context (view, parentContext) {\n  this.view = view;\n  this.cache = { '.': this.view };\n  this.parent = parentContext;\n}\n\n/**\n * Creates a new context using the given view with this context\n * as the parent.\n */\nContext.prototype.push = function push (view) {\n  return new Context(view, this);\n};\n\n/**\n * Returns the value of the given name in this context, traversing\n * up the context hierarchy if the value is absent in this context's view.\n */\nContext.prototype.lookup = function lookup (name) {\n  var cache = this.cache;\n\n  var value;\n  if (cache.hasOwnProperty(name)) {\n    value = cache[name];\n  } else {\n    var context = this, intermediateValue, names, index, lookupHit = false;\n\n    while (context) {\n      if (name.indexOf('.') > 0) {\n        intermediateValue = context.view;\n        names = name.split('.');\n        index = 0;\n\n        /**\n         * Using the dot notion path in `name`, we descend through the\n         * nested objects.\n         *\n         * To be certain that the lookup has been successful, we have to\n         * check if the last object in the path actually has the property\n         * we are looking for. We store the result in `lookupHit`.\n         *\n         * This is specially necessary for when the value has been set to\n         * `undefined` and we want to avoid looking up parent contexts.\n         *\n         * In the case where dot notation is used, we consider the lookup\n         * to be successful even if the last \"object\" in the path is\n         * not actually an object but a primitive (e.g., a string, or an\n         * integer), because it is sometimes useful to access a property\n         * of an autoboxed primitive, such as the length of a string.\n         **/\n        while (intermediateValue != null && index < names.length) {\n          if (index === names.length - 1)\n            lookupHit = (\n              hasProperty(intermediateValue, names[index])\n              || primitiveHasOwnProperty(intermediateValue, names[index])\n            );\n\n          intermediateValue = intermediateValue[names[index++]];\n        }\n      } else {\n        intermediateValue = context.view[name];\n\n        /**\n         * Only checking against `hasProperty`, which always returns `false` if\n         * `context.view` is not an object. Deliberately omitting the check\n         * against `primitiveHasOwnProperty` if dot notation is not used.\n         *\n         * Consider this example:\n         * ```\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n         * ```\n         *\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\n         * in the dot notation case, then render call would return:\n         *\n         * \"The length of a football field is 9.\"\n         *\n         * rather than the expected:\n         *\n         * \"The length of a football field is 100 yards.\"\n         **/\n        lookupHit = hasProperty(context.view, name);\n      }\n\n      if (lookupHit) {\n        value = intermediateValue;\n        break;\n      }\n\n      context = context.parent;\n    }\n\n    cache[name] = value;\n  }\n\n  if (isFunction(value))\n    value = value.call(this.view);\n\n  return value;\n};\n\n/**\n * A Writer knows how to take a stream of tokens and render them to a\n * string, given a context. It also maintains a cache of templates to\n * avoid the need to parse the same template twice.\n */\nfunction Writer () {\n  this.templateCache = {\n    _cache: {},\n    set: function set (key, value) {\n      this._cache[key] = value;\n    },\n    get: function get (key) {\n      return this._cache[key];\n    },\n    clear: function clear () {\n      this._cache = {};\n    }\n  };\n}\n\n/**\n * Clears all cached templates in this writer.\n */\nWriter.prototype.clearCache = function clearCache () {\n  if (typeof this.templateCache !== 'undefined') {\n    this.templateCache.clear();\n  }\n};\n\n/**\n * Parses and caches the given `template` according to the given `tags` or\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n * that is generated from the parse.\n */\nWriter.prototype.parse = function parse (template, tags) {\n  var cache = this.templateCache;\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n  var isCacheEnabled = typeof cache !== 'undefined';\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n  if (tokens == undefined) {\n    tokens = parseTemplate(template, tags);\n    isCacheEnabled && cache.set(cacheKey, tokens);\n  }\n  return tokens;\n};\n\n/**\n * High-level method that is used to render the given `template` with\n * the given `view`.\n *\n * The optional `partials` argument may be an object that contains the\n * names and templates of partials that are used in the template. It may\n * also be a function that is used to load partial templates on the fly\n * that takes a single argument: the name of the partial.\n *\n * If the optional `config` argument is given here, then it should be an\n * object with a `tags` attribute or an `escape` attribute or both.\n * If an array is passed, then it will be interpreted the same way as\n * a `tags` attribute on a `config` object.\n *\n * The `tags` attribute of a `config` object must be an array with two\n * string values: the opening and closing tags used in the template (e.g.\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n *\n * The `escape` attribute of a `config` object must be a function which\n * accepts a string as input and outputs a safely escaped string.\n * If an `escape` function is not provided, then an HTML-safe string\n * escaping function is used as the default.\n */\nWriter.prototype.render = function render (template, view, partials, config) {\n  var tags = this.getConfigTags(config);\n  var tokens = this.parse(template, tags);\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\n  return this.renderTokens(tokens, context, partials, template, config);\n};\n\n/**\n * Low-level method that renders the given array of `tokens` using\n * the given `context` and `partials`.\n *\n * Note: The `originalTemplate` is only ever used to extract the portion\n * of the original template that was contained in a higher-order section.\n * If the template doesn't use higher-order sections, this argument may\n * be omitted.\n */\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n  var buffer = '';\n\n  var token, symbol, value;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    value = undefined;\n    token = tokens[i];\n    symbol = token[0];\n\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n    else if (symbol === '&') value = this.unescapedValue(token, context);\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\n    else if (symbol === 'text') value = this.rawValue(token);\n\n    if (value !== undefined)\n      buffer += value;\n  }\n\n  return buffer;\n};\n\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n  var self = this;\n  var buffer = '';\n  var value = context.lookup(token[1]);\n\n  // This function is used to render an arbitrary template\n  // in the current context by higher-order sections.\n  function subRender (template) {\n    return self.render(template, context, partials, config);\n  }\n\n  if (!value) return;\n\n  if (isArray(value)) {\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n    }\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n  } else if (isFunction(value)) {\n    if (typeof originalTemplate !== 'string')\n      throw new Error('Cannot use higher-order sections without the original template');\n\n    // Extract the portion of the original template that the section contains.\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n    if (value != null)\n      buffer += value;\n  } else {\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n  }\n  return buffer;\n};\n\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n  var value = context.lookup(token[1]);\n\n  // Use JavaScript's definition of falsy. Include empty arrays.\n  // See https://github.com/janl/mustache.js/issues/186\n  if (!value || (isArray(value) && value.length === 0))\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\n};\n\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n  var partialByNl = partial.split('\\n');\n  for (var i = 0; i < partialByNl.length; i++) {\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n      partialByNl[i] = filteredIndentation + partialByNl[i];\n    }\n  }\n  return partialByNl.join('\\n');\n};\n\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n  if (!partials) return;\n  var tags = this.getConfigTags(config);\n\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n  if (value != null) {\n    var lineHasNonSpace = token[6];\n    var tagIndex = token[5];\n    var indentation = token[4];\n    var indentedValue = value;\n    if (tagIndex == 0 && indentation) {\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n    }\n    var tokens = this.parse(indentedValue, tags);\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\n  }\n};\n\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return value;\n};\n\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\n  var escape = this.getConfigEscape(config) || mustache.escape;\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n};\n\nWriter.prototype.rawValue = function rawValue (token) {\n  return token[1];\n};\n\nWriter.prototype.getConfigTags = function getConfigTags (config) {\n  if (isArray(config)) {\n    return config;\n  }\n  else if (config && typeof config === 'object') {\n    return config.tags;\n  }\n  else {\n    return undefined;\n  }\n};\n\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\n  if (config && typeof config === 'object' && !isArray(config)) {\n    return config.escape;\n  }\n  else {\n    return undefined;\n  }\n};\n\nvar mustache = {\n  name: 'mustache.js',\n  version: '4.2.0',\n  tags: [ '{{', '}}' ],\n  clearCache: undefined,\n  escape: undefined,\n  parse: undefined,\n  render: undefined,\n  Scanner: undefined,\n  Context: undefined,\n  Writer: undefined,\n  /**\n   * Allows a user to override the default caching strategy, by providing an\n   * object with set, get and clear methods. This can also be used to disable\n   * the cache by setting it to the literal `undefined`.\n   */\n  set templateCache (cache) {\n    defaultWriter.templateCache = cache;\n  },\n  /**\n   * Gets the default or overridden caching object from the default writer.\n   */\n  get templateCache () {\n    return defaultWriter.templateCache;\n  }\n};\n\n// All high-level mustache.* functions use this writer.\nvar defaultWriter = new Writer();\n\n/**\n * Clears all cached templates in the default writer.\n */\nmustache.clearCache = function clearCache () {\n  return defaultWriter.clearCache();\n};\n\n/**\n * Parses and caches the given template in the default writer and returns the\n * array of tokens it contains. Doing this ahead of time avoids the need to\n * parse templates on the fly as they are rendered.\n */\nmustache.parse = function parse (template, tags) {\n  return defaultWriter.parse(template, tags);\n};\n\n/**\n * Renders the `template` with the given `view`, `partials`, and `config`\n * using the default writer.\n */\nmustache.render = function render (template, view, partials, config) {\n  if (typeof template !== 'string') {\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\n                        'argument for mustache#render(template, view, partials)');\n  }\n\n  return defaultWriter.render(template, view, partials, config);\n};\n\n// Export the escaping function so that the user may override it.\n// See https://github.com/janl/mustache.js/issues/244\nmustache.escape = escapeHtml;\n\n// Export these mainly for testing, but also for advanced usage.\nmustache.Scanner = Scanner;\nmustache.Context = Context;\nmustache.Writer = Writer;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (mustache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mustache/mustache.mjs\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/nav-global/menu.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=menu.min.js.map