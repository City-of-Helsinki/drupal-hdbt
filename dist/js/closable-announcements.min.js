/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/closable-announcements.js":
/*!******************************************!*\
  !*** ./src/js/closable-announcements.js ***!
  \******************************************/
/***/ (function() {

eval("// eslint-disable-next-line func-names\n(function (Drupal) {\n  Drupal.behaviors.closable_announcements = {\n    attach: function attach() {\n      const ANNOUCEMENT = 'js-announcement';\n      const ANNOUCEMENT_HIDE = 'js-announcement--hide';\n      const DISABLED = 'js-announcement__close--disabled';\n      const KEYNAME = 'hidden-helfi-announcements';\n      function addToAnnouncementStorage(announcement) {\n        const {\n          uuid\n        } = announcement.dataset;\n        if (uuid) {\n          const item = window.localStorage.getItem(KEYNAME);\n          let itemArray = [];\n          if (item) {\n            try {\n              itemArray = JSON.parse(item);\n            } catch (error) {\n              // eslint-disable-next-line no-console\n              console.error(error);\n            }\n          }\n          itemArray.push(uuid);\n\n          // console.log('Hiding uuid', uuid);\n          window.localStorage.setItem(KEYNAME, JSON.stringify(itemArray));\n        }\n      }\n      function closeAnnouncement(announcement) {\n        addToAnnouncementStorage(announcement);\n        // Set fixed height to allow CSS animation\n        announcement.style = `--js-announcement-height: ${announcement.offsetHeight}px`;\n        window.setTimeout(() => {\n          let focused = false;\n          const allAnnouncements = document.querySelectorAll('.announcement:not(.js-announcement--hide)');\n          announcement.classList.add(ANNOUCEMENT_HIDE);\n          // Moving focus to correct place after closing the announcement.\n          // NOTICE: This is very dependent on the html-structure of the header and its components.\n          // Go through all announcements and use the uuid to determine which focusable announcement is before\n          // the closed announcement.\n          for (let i = 0, max = allAnnouncements.length; i < max; i++) {\n            if (allAnnouncements[i].dataset.uuid === announcement.dataset.uuid && i > 0) {\n              const focusableAnnouncement = allAnnouncements[i - 1].querySelectorAll('.announcement__close, .announcement__link a');\n              focusableAnnouncement[focusableAnnouncement.length - 1].focus();\n              focused = true;\n              break;\n            }\n          }\n          // If there is no more announcements to focus to we need to figure out if we are viewing the page with mobile\n          // or desktop navigation. We check if the header-bottom menu is visible to determine this.\n          if (focused === false) {\n            const desktopMenu = document.querySelector('.header-bottom .desktop-menu > .menu');\n            const desktopMenuHidden = window.getComputedStyle(desktopMenu).display === 'none';\n            // Depending on the visible menu we move the focus straight to nav-toggle buttons or the menu links if no\n            // breadcrumb is set.\n            if (desktopMenuHidden === true) {\n              // Move the focus on mobile:\n              const focusableElements = document.querySelectorAll('.nav-toggle__button, .breadcrumb a:last-of-type');\n              focusableElements[focusableElements.length - 1].focus();\n            } else {\n              // Move the focus on desktop:\n              const focusableElements = document.querySelectorAll('.nav-toggle__button, .header-bottom .menu--level-0 > .menu__item:last-child > .menu__link-wrapper :where(a, button), .breadcrumb a:last-of-type');\n              focusableElements[focusableElements.length - 1].focus();\n            }\n          }\n        }, 1); // Delay setting class a bit to allow css accept fixed height before animating\n      }\n\n      function triggerAnnouncementClose(e) {\n        const announcement = e.target.closest(`.${ANNOUCEMENT}`);\n        closeAnnouncement(announcement);\n      }\n      function enableAnnouncementClosing() {\n        const disabledAnnouncements = document.querySelectorAll(`.${DISABLED}`);\n        for (let i = 0; i < disabledAnnouncements.length; i++) {\n          const announcement = disabledAnnouncements[i];\n          announcement.addEventListener('click', triggerAnnouncementClose);\n          announcement.classList.remove(DISABLED);\n        }\n      }\n\n      // This can be called from addressbar using `javascript:unhideAnnouncements();`\n      window.unhideAnnouncements = function unhideAnnouncements() {\n        window.localStorage.removeItem(KEYNAME);\n        window.location.reload();\n      };\n      enableAnnouncementClosing();\n    }\n  };\n})(Drupal);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/closable-announcements.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/closable-announcements.js"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=closable-announcements.min.js.map