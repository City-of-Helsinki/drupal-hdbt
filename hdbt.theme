<?php

/**
 * @file
 * Functions to support theming in the hdbt theme.
 */

use Drupal\Core\Cache\Cache;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess().
 */
function hdbt_preprocess(&$variables) {
  $variables['icons_path'] = hdbt_get_icons_path();
  $variables['koro'] = hdbt_get_settings('koro');
  $variables['theme_color'] = hdbt_get_settings('theme_color');
  $variables['image_placeholder'] = hdbt_get_settings('default_icon');
  $language = Drupal::languageManager()->getCurrentLanguage();
  $variables['current_langcode'] = $language->getId();
  $variables['current_language'] = $language->getName();
  $variables['#attached']['drupalSettings']['iconsPath'] = $variables['icons_path'];
}

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function hdbt_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    global $base_secure_url;
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = $base_secure_url . '/' . $theme_handler->getTheme('hdbt')->getPath() . '/dist/icons/sprite.svg';

    if (!empty($icon_path)) {
      // Add icons path as a global variable.
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Helper function to get the settings from configurations.
 *
 * @param string $setting
 *   Setting to be retrieved from config/cache.
 * @param string $group
 *   Indicates which group does the settings belong to.
 *
 * @return string|null
 *   Returns the desired setting as a string or false.
 */
function hdbt_get_settings($setting, $group = 'site_settings') {
  if (empty($setting)) {
    return FALSE;
  }

  $cached = \Drupal::cache()->get("hdbt_settings:$setting");

  if ($cached) {
    return $cached->data;
  }

  $settings = \Drupal::config('hdbt_admin_tools.site_settings');

  try {
    $data = $settings->get("$group.$setting");

    if (!empty($data)) {
      \Drupal::cache()->set("hdbt_settings:$setting", $data, Cache::PERMANENT);
      return $data;
    }
    return FALSE;
  }
  catch (RequestException $error) {
    watchdog_exception('hdbt', $error);
    return FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_page(&$variables) {
  if ($data = hdbt_get_settings('footer_color', 'footer_settings')) {
    $variables['page']['footer_color'] = $data;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_component_library_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'component_library__hdbt';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_component_library(&$variables) {
  $variables['#attached']['library'][] = 'hdbt/component-library';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#type'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_form_element(&$variables) {
  if (isset($variables['type']) && is_array($variables['label'])) {
    switch ($variables['type']) {
      case 'checkbox':
        $element_label_class = 'hds-checkbox__label';
        break;

      case 'radio':
        $element_label_class = 'hds-radio-button__label';
        break;

      case 'textfield':
      case 'password':
      case 'textarea':
        $element_label_class = 'hds-text-input__label';
        break;
    }

    if (isset($element_label_class)) {
      $variables['label']['#element_type'] = $element_label_class;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_menu(&$variables) {
  foreach ($variables['items'] as $key => &$item) {
    if (isset($item['url'])) {
      /** @var \Drupal\Core\Url $url */
      $url = $item['url'];

      if ($url->isExternal()) {
        $item['is_external'] = TRUE;
      }

      if (!$url->isExternal() && $url->getRouteName() === '<nolink>') {
        $item['is_nolink'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_block(&$variables) {
  // Handle only Page title block.
  if ($variables['plugin_id'] == 'page_title_block') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      // Retrieve the node object for revisions.
      $node = (is_numeric($node) && !$node instanceof Node)
        ? Node::load($node) : $node;

      // Hide block if current node is front page.
      if (
        $node->hasField('field_hero') &&
        $node->hasField('field_has_hero')
      ) {
        if (boolval($node->get('field_has_hero')->getString())) {
          $variables['hide_block'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
function hdbt_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  // Check if the paragraph is type list of links item and tell it its parents design.
  if ($paragraph_type == 'list_of_links_item') {
    $paragraph_parent = $paragraph->getParentEntity();
    $design = $paragraph_parent->get('field_list_of_links_design')->getString();
    $variables['list_of_links_design'] = $design;
  }

  if ($paragraph_type == 'accordion') {
    $variables['#attached']['library'][] = 'hdbt/accordion';
  }

  // Check if the paragraph is type accordion and tell its children the heading level.
  if ($paragraph_type == 'accordion_item') {
    $paragraph_parent = $paragraph->getParentEntity();
    $accordion_heading_level = $paragraph_parent->get('field_accordion_heading_level')->getString();
    $variables['accordion_heading_level'] = $accordion_heading_level;
  }

  if ($paragraph_type == 'gallery') {
    $variables['#attached']['library'][] = 'hdbt/gallery';

    $slide_paragraphs = $paragraph->get('field_gallery_slides')->getValue();
    $slide_ids = [];

    foreach ($slide_paragraphs as $slide_paragraph) {
      $slide_ids[] = $slide_paragraph['target_id'];
    }

    // Get a paragraph storage object.
    $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
    // Load all slide paragraphs.
    $slides = $paragraph_storage->loadMultiple($slide_ids);

    $slide_thumbnails = [];
    foreach ($slides as $slide) {
      $slide_media = $slide
        ->get('field_gallery_slide_media')
        ->first()
        ->get('entity')
        ->getTarget()
        ->getValue();
      $image = $slide_media
        ->get('field_media_image')
        ->first()
        ->get('entity')
        ->getTarget()
        ->getValue();
      $slide_thumbnails[] = $image;
    }

    $variables['gallery_slide_thumbnails'] = $slide_thumbnails;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_image(&$variables) {
  // Convert double double quotes to empty string for image alt-texts.
  if (isset($variables['alt']) && $variables['alt'] === '""') {
    $variables['attributes']['alt'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_field(&$variables) {
  if ($variables['field_name'] === 'field_unit_main_image_url') {
    $token = $variables['items'][0]['content']['#text'];
    $rendered_token = \Drupal::token()->replace("$token");

    $variables['unit_main_image_rendered_token'] = $rendered_token;
  }

  if ($variables['field_name'] === 'field_unit_visible_title') {
    $token = $variables['items'][0]['content']['#text'];
    $rendered_token = \Drupal::token()->replace("$token");

    $variables['unit_visible_title_rendered_token'] = $rendered_token;
  }
}
