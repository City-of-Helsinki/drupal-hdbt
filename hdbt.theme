<?php

/**
 * @file
 * Functions to support theming in the hdbt theme.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Template\Attribute;
use Drupal\helfi_tpr\Entity\Channel;
use Drupal\helfi_tpr\Entity\ErrandService;
use Drupal\helfi_tpr\Entity\Unit;
use Drupal\image\Entity\ImageStyle;
use Drupal\image\Plugin\Field\FieldType\ImageItem;
use Drupal\node\Entity\Node;
use Drupal\Core\Site\Settings;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_preprocess().
 */
function hdbt_preprocess(&$variables, $hook) {
  $variables['koro'] = hdbt_get_settings('koro');
  $variables['theme_color'] = hdbt_get_settings('theme_color');
  $variables['image_placeholder'] = hdbt_get_settings('default_icon');
  $language = Drupal::languageManager()->getCurrentLanguage();
  $variables['current_langcode'] = $language->getId();
  $variables['current_language'] = $language->getName();

  // Apply override for the theme color.
  if (!empty($theme_color = hdbt_get_theme_color_override())) {
    $variables['theme_color'] = $theme_color;
  }
}

/**
 * Retrieve possible theme color palette override.
 */
function hdbt_get_theme_color_override() {
  $color = &drupal_static(__FUNCTION__);

  if (!isset($color)) {
    $color = FALSE;
    if (Drupal::moduleHandler()->moduleExists('hdbt_content')) {
      $page_entity = hdbt_content_get_page_entity();
      if (
        !empty($page_entity) &&
        $page_entity instanceof ContentEntityInterface &&
        $page_entity->hasField('color_palette') &&
        !empty($page_entity->color_palette->value)
      ) {
        $color = $page_entity->color_palette->value;
      }
    }
  }
  return $color;
}

/**
 * Implements hook_library_info_build().
 */
function hdbt_library_info_build() {
  $libraries = [];

  $siteimprove_id = Settings::get('siteimprove_id');

  if ($siteimprove_id) {
    $siteimprove_js_url = Url::fromUri('https://siteimproveanalytics.com/js/siteanalyze_' . $siteimprove_id . '.js')->toString();

    $libraries['siteimprove'] = [
      'version' => '1.x',
      'js' => [
        $siteimprove_js_url => [
          'type' => 'external',
          'attributes' => [
            'async' => TRUE,
          ],
        ],
      ],
    ];
  }

  return $libraries;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_html(&$variables) {
  // See if the page we are has exception.
  $page_status = Drupal::requestStack()
    ->getCurrentRequest()?->attributes->get('exception');

  // Check if the page is error-page and add class error-page for the body.
  if (
    $page_status?->getStatusCode() > 400
  ) {
    $variables['attributes']['class'][] = 'error-page';
  }

  $variables['#attached']['library'][] = 'hdbt/mmenu-settings';

  $matomo_site_id = Settings::get('matomo_site_id');

  if ($matomo_site_id) {
    $variables['#attached']['library'][] = 'hdbt/matomo';
    $variables['#attached']['drupalSettings']['matomo_site_id'] = $matomo_site_id;
  }

  $siteimprove_id = Settings::get('siteimprove_id');

  if ($siteimprove_id) {
    $variables['#attached']['library'][] = 'hdbt/siteimprove';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_region(&$variables) {
  // Set site information to variables.
  _hdbt_set_site_information($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_media(&$variables) {
  if (empty($variables['media']) || !$variables['media'] instanceof EntityInterface) {
    return;
  }
  if ($variables['media']->bundle() === 'remote_video') {
    $variables['privacy_policy_url'] = _hdbt_eu_cookie_compliance_get_privacy_policy_url();
    $variables['#attached']['library'][] = 'hdbt/embedded-content-cookie-compliance';

    // If Oembed providers module is installed, get provider URL based on
    // current remote video URL.
    if (
      Drupal::moduleHandler()->moduleExists('oembed_providers') &&
      $variables['media']->hasField('field_media_oembed_video')
    ) {
      $url_resolver = Drupal::service('media.oembed.url_resolver');
      $video_url = $variables['media']->field_media_oembed_video->value;
      $provider = $url_resolver->getProviderByUrl($video_url);
      $variables['video_service_url'] = rtrim($provider->getUrl(), '/');
    }
  }
}

/**
 * Helper function to get the settings from configurations.
 *
 * @param string $setting
 *   Setting to be retrieved from config/cache.
 * @param string $group
 *   Indicates which group does the settings belong to.
 *
 * @return string|null
 *   Returns the desired setting as a string or false.
 */
function hdbt_get_settings(string $setting, string $group = 'site_settings') {
  return Drupal::config('hdbt_admin_tools.site_settings')?->getOriginal("$group.$setting", FALSE);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_page(&$variables) {
  // Check what language is set and provide links to homepage and feedback
  // accordingly.
  switch ($variables['current_langcode']) {
    case 'fi':
      $variables['error_page_home_link'] = 'https://www.hel.fi/helsinki/fi';
      $variables['error_page_feedback_link'] = 'https://www.hel.fi/helsinki/fi/kaupunki-ja-hallinto/osallistu-ja-vaikuta/palaute';
      break;

    case 'sv':
      $variables['error_page_home_link'] = 'https://www.hel.fi/helsinki/sv';
      $variables['error_page_feedback_link'] = 'https://www.hel.fi/helsinki/sv/stad-och-forvaltning/delta/feedback';
      break;

    default:
      $variables['error_page_home_link'] = 'https://www.hel.fi/helsinki/en';
      $variables['error_page_feedback_link'] = 'https://www.hel.fi/helsinki/en/administration/participate/feedback';
      break;
  }

  if (!Drupal::currentUser()->isAuthenticated()) {
    $variables['user_not_logged_in'] = TRUE;
  }

  if ($data = hdbt_get_settings('footer_color', 'footer_settings')) {
    $variables['page']['footer_color'] = $data;
  }

  // Check if current entity is published and set variable accordingly.
  $page_entity = hdbt_content_get_page_entity();
  if (
    $page_entity instanceof ContentEntityInterface &&
    method_exists($page_entity, 'isPublished')
  ) {
    $variables['published'] = $page_entity->isPublished();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Add current node Url to variable.
  $variables['node_url'] = !$node->isNew() ? $node->toUrl('canonical') : NULL;

  // If node has hero block, set variable accordingly.
  if ($node->hasField('field_has_hero')) {
    $variables['hide_label'] = boolval($node->field_has_hero->value);
  }

  // If node has "published_at" field, set it as variable for the node template.
  if ($node->hasField('published_at') && $node->isPublished()) {
    $variables['published_at'] = $node->get('published_at')->getString();
  }

  // Set "modified_at" variable for the node template.
  // Do not show modified timestamp if it's less or equal to published_at date.
  if (
    !empty($node->getChangedTime()) &&
    isset($variables['published_at']) &&
    $variables['published_at'] < $node->getChangedTime()
  ) {
    $variables['modified_at'] = $node->getChangedTime();
  }

  // Handle image caption preprocessing.
  if ($node->hasField('field_main_image')) {
    _hdbt_preprocess_image_caption(
      $variables,
      'node',
      'field_main_image',
      'field_main_image_caption'
    );
  }

  // Handle short title for the templates.
  if ($node->hasField('field_short_title')) {
    $variables['short_title'] = $node->getTitle();

    // If node has short title set, use it as short-title.
    if (!$node->field_short_title->isEmpty()) {
      $variables['short_title'] = $node->field_short_title->value;
    }
  }
}

/**
 * Preprocess image caption.
 *
 * @param array $variables
 *   Render array.
 * @param string $entity_type
 *   Current entity type.
 * @param string $image
 *   Image field name.
 * @param string $image_caption
 *   Image caption field name.
 */
function _hdbt_preprocess_image_caption(array &$variables, string $entity_type, string $image, string $image_caption) {
  $entity = $variables[$entity_type];

  if (!$entity instanceof ContentEntityInterface) {
    return;
  }

  // Check for image and image caption availability.
  if ($entity->hasField($image) && $entity->hasField($image_caption)) {
    $caption_variable = str_replace('field_', '', $image_caption);
    $alt = '';
    $caption = '';

    // If caption exists, set it as initial variable for the alt text and
    // image caption.
    if (!$entity->{$image_caption}->isEmpty()) {
      $alt = $caption = $entity->{$image_caption}->value;
    }

    // Combine photographer field value with caption and alt text.
    if (
      $entity->{$image}->entity?->hasField('field_photographer') &&
      !$entity->{$image}->entity->field_photographer->isEmpty()
    ) {
      $photographer = $entity->{$image}->entity->field_photographer->value;

      // If both caption and photographer exists, use targeted translation
      // for the caption and photographer. Otherwise set only photographer as
      // caption.
      if (!empty($caption)) {
        $alt = $caption = t(
          '@caption Photo: @photographer',
          ['@photographer' => $photographer, '@caption' => $caption],
          ['context' => 'Image caption and photographer']
        );
      }
      else {
        $caption = t(
          'Photo: @photographer',
          ['@photographer' => $photographer],
          ['context' => 'Image photographer']
        );
      }
    }

    // Set image caption variable to render array for the templates.
    $variables[$caption_variable] = $caption;

    if (
      !empty($alt) &&
      $entity->{$image}->entity?->hasField('field_media_image') &&
      !$entity->{$image}->entity->field_media_image->first()->isEmpty()
    ) {
      // Set altered_alt_text variable based on modified alt text
      // for the responsive image preprocesses.
      $entity->{$image}->entity->field_media_image->first()->altered_alt_text = $alt;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_component_library_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'component_library__hdbt';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_component_library(&$variables) {
  $variables['#attached']['library'][] = 'hdbt/component-library';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#type'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide block based menu suggestions.
 */
function hdbt_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    switch ($variables['attributes']['block_id']) {
      case 'mobile_navigation':
        $suggestions[] = 'menu__mobile';
        break;

      case 'mainnavigation':
        $suggestions[] = 'menu__main__desktop';
        break;

      case 'main_navigation_level_2':
        $suggestions[] = 'menu__main__sidebar';
        break;

      case 'brandingnavigation':
        $suggestions[] = 'menu__main__branding';
        break;

      default:
        $suggestions[] = 'menu__' . $variables['attributes']['block_id'];
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_form_element(&$variables) {
  if (isset($variables['type']) && is_array($variables['label'])) {
    switch ($variables['type']) {
      case 'checkbox':
        $element_label_class = 'hds-checkbox__label';
        break;

      case 'radio':
        $element_label_class = 'hds-radio-button__label';
        break;

      case 'email':
      case 'password':
      case 'textarea':
      case 'textfield':
        $element_label_class = 'hds-text-input__label';
        break;
    }

    if (isset($element_label_class)) {
      $variables['label']['#element_type'] = $element_label_class;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_menu(&$variables) {
  foreach ($variables['items'] as &$item) {
    _hdbt_menu_item_apply_attributes($item);
  }
}

/**
 * Iterate through menu items and apply custom attributes to each item.
 *
 * @param array $item
 *   Menu item.
 */
function _hdbt_menu_item_apply_attributes(array &$item) {
  // Iterate through child menu items.
  if (!empty($item['below'])) {
    foreach ($item['below'] as &$item_below) {
      _hdbt_menu_item_apply_attributes($item_below);
    }
  }

  // Check if URL is present.
  if (isset($item['url'])) {
    /** @var \Drupal\Core\Url $url */
    $url = $item['url'];

    // Check if the URL is <nolink> and add variable accordingly.
    if ($url->isRouted() && $url->getRouteName() === '<nolink>') {
      $item['is_nolink'] = TRUE;
    }

    // Check if url is current page where we are now.
    $current_path = Drupal::request()->getRequestUri();
    if ($item['url']->toString() == $current_path) {
      $item['is_currentPage'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_block(&$variables) {
  // Set site information to variables.
  _hdbt_set_site_information($variables);

  // Set block_id variable.
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }

  // Handle Page title block.
  if ($variables['plugin_id'] == 'page_title_block') {
    if ($node = Drupal::routeMatch()->getParameter('node')) {
      // Retrieve the node object for revisions.
      $node = (is_numeric($node) && !$node instanceof Node)
        ? Node::load($node) : $node;

      // Hide block if current node is front page.
      if (
        $node->hasField('field_hero') &&
        $node->hasField('field_has_hero')
      ) {
        if (boolval($node->get('field_has_hero')->getString())) {
          $variables['hide_block'] = TRUE;
        }
      }
    }
  }

  // Handle Sidebar menu block.
  if (
    $variables['base_plugin_id'] === 'menu_block_current_language' &&
    str_contains($variables['elements']['#id'], 'main_navigation_level_2') &&
    !empty($variables['content']['#items'])
  ) {
    // Get any current menu level item.
    $current_level_menu_item = reset($variables['content']['#items']);

    if (isset($current_level_menu_item['original_link'])) {
      $original_link = $current_level_menu_item['original_link'];
      $parent = $original_link->getParent();
      $menu_link_manager = Drupal::service('plugin.manager.menu.link');
      $page_entity = hdbt_content_get_page_entity();

      // Compare the current page menu link and parent menu link.
      if (!empty($page_entity) && $page_entity instanceof ContentEntityInterface) {
        $menu_links = $menu_link_manager->loadLinksByRoute(
          "entity.{$page_entity->getEntityTypeId()}.canonical",
          [$page_entity->getEntityTypeId() => $page_entity->id()]
        );
        // Set parent link false if it matches to current page menu link.
        if (!empty($menu_links) && array_key_exists($parent, $menu_links)) {
          $parent = FALSE;
        }
      }

      $menu_link_title = '';
      $menu_link_url = FALSE;

      // Check if current menu item has parent and serve it as variable.
      if ($parent) {
        $parent_item = $menu_link_manager->createInstance($parent);

        if ($parent_item) {
          $menu_link_title = $parent_item->getTitle();
          $menu_link_url = $parent_item->getUrlObject();
        }
      }
      else {
        $front_page = Url::fromRoute('<front>', [], ['absolute' => TRUE]);
        $uri_parts = parse_url($front_page->toString());
        $url = Url::fromUri('internal:' . $uri_parts['path']);
        $params = $url->getRouteParameters();

        if (!empty($params)) {
          $entity_type = key($params);
          $node = Drupal::entityTypeManager()
            ->getStorage($entity_type)
            ->load($params[$entity_type])
            ->getTranslation($variables['current_langcode']);
          $menu_link_title = $node->getTitle();
          $menu_link_url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();
        }
      }

      $variables['menu_link_parent'] = [
        'title' => $menu_link_title,
        'url' => $menu_link_url,
      ];
    }
  }

  // Attach "closable_announcements" library to "announcements" block.
  if ($variables['plugin_id'] == 'announcements') {
    $variables['#attached']['library'][] = 'hdbt/closable_announcements';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_breadcrumb(&$variables) {
  // If current entity has short title field set, use it to override
  // current page breadcrumb.
  if (Drupal::moduleHandler()->moduleExists('hdbt_content')) {
    $page_entity = hdbt_content_get_page_entity();
    if (
      !empty($page_entity) &&
      $page_entity instanceof ContentEntityInterface &&
      $page_entity->hasField('field_short_title') &&
      !empty($page_entity->field_short_title->value)
    ) {
      /** @var \Drupal\Core\Link $current */
      $current = array_pop($variables['links']);
      $current->setText($page_entity->field_short_title->value);
      array_push($variables['links'], $current);
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
function hdbt_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  // Check if the paragraph is a type of list of links item
  // and tell it its parents design.
  if ($paragraph_type == 'list_of_links_item') {
    $paragraph_parent = $paragraph->getParentEntity();
    $design = $paragraph_parent->get('field_list_of_links_design')->getString();
    $variables['list_of_links_design'] = $design;
  }

  // Check if the paragraph is a type of accordion
  // and dig out the title level.
  if ($paragraph_type == 'accordion') {
    $accordion_title_level = $paragraph->get('field_accordion_title_level')->getString();
    $variables['accordion_title_level'] = $accordion_title_level;
  }

  // Check if the paragraph is a type of accordion item
  // and tell its children the heading level.
  if ($paragraph_type == 'accordion_item') {
    $paragraph_parent = $paragraph->getParentEntity();
    $accordion_item_heading_level = $paragraph_parent->get('field_accordion_heading_level')->getString();
    $variables['accordion_item_heading_level'] = $accordion_item_heading_level;
  }

  // Check if the paragraph is a type of image.
  if ($paragraph_type == 'image' && $paragraph->hasField('field_image')) {
    // Handle image caption preprocessing.
    _hdbt_preprocess_image_caption(
      $variables,
      'paragraph',
      'field_image',
      'field_image_caption'
    );

    // Check if the image should be printed in original aspect ratio and
    // set variable accordingly. If not, use image 3:2 responsive style.
    if ($paragraph->hasField('field_original_aspect_ratio')) {
      $image_style = $paragraph->field_original_aspect_ratio->value
        ? 'original'
        : 'image__3_2';

      _hdbt_set_image_style(
        $variables,
        'paragraph',
        'field_image',
        $image_style
      );
    }
  }

  // Check if the paragraph is a type of hero and it has image field available.
  if (
    $paragraph_type == 'hero' &&
    $paragraph->hasField('field_hero_image')
  ) {

    // Determine based on hero design which responsive image style
    // should be used when rendering the hero image.
    if ($paragraph->hasField('field_hero_design')) {

      switch ($paragraph->field_hero_design->value) {
        case 'with-image-right':
        case 'with-image-left':
          $image_style = 'hero__left_right';
          break;

        case 'with-image-bottom':
          $image_style = 'hero__bottom';
          break;

        case 'diagonal':
          $image_style = 'hero__diagonal';
          break;

        default:
          $image_style = 'hero__background';
          break;
      }

      _hdbt_set_image_style(
        $variables,
        'paragraph',
        'field_hero_image',
        $image_style
      );
    }
  }

  // Check if the paragraph is a type of liftup with image.
  if (
    $paragraph_type == 'liftup_with_image' &&
    $paragraph->hasField('field_liftup_with_image_image')
  ) {

    // Determine based on image design which responsive image style
    // should be used when rendering the liftup with image image.
    if ($paragraph->hasField('field_liftup_with_image_design')) {

      switch ($paragraph->field_liftup_with_image_design->value) {
        case 'image-on-right':
        case 'image-on-left':
        case 'image-on-right-secondary':
        case 'image-on-left-secondary':
          $image_style = 'image__3_2';
          break;

        default:
          $image_style = 'hero__background';
          break;
      }

      _hdbt_set_image_style(
        $variables,
        'paragraph',
        'field_liftup_with_image_image',
        $image_style
      );
    }
  }

  // Check if the paragraph is a type of gallery and prepare the slides
  // and generate the thumbnails.
  if ($paragraph_type == 'gallery') {
    $variables['#attached']['library'][] = 'hdbt/gallery';

    $slide_paragraphs = $paragraph->get('field_gallery_slides')->getValue();
    $slide_ids = [];

    foreach ($slide_paragraphs as $slide_paragraph) {
      $slide_ids[] = $slide_paragraph['target_id'];
    }

    // Get a paragraph storage object.
    $paragraph_storage = Drupal::entityTypeManager()->getStorage('paragraph');
    // Load all slide paragraphs.
    $slides = $paragraph_storage->loadMultiple($slide_ids);
    $slide_thumbnails = [];

    // Construct an array of slides and handle the image caption + alt texts.
    foreach ($slides as $id => $slide) {
      $slides[$id] = ['gallery_slide' => $slide];
      _hdbt_preprocess_image_caption(
        $slides[$id],
        'gallery_slide',
        'field_gallery_slide_media',
        'field_gallery_slide_caption'
      );
      $slides[$id]['gallery_slide'] = $slides[$id]['gallery_slide']->field_gallery_slide_media->entity->field_media_image->entity;
      $slide_thumbnails[] = $slides[$id];
    }
    $variables['gallery_slide_thumbnails'] = $slide_thumbnails;
  }

  // Check if the paragraph is a type of gallery_slide and handle the slide
  // image width and height attributes.
  if (
    $paragraph_type == 'gallery_slide' &&
    $paragraph->hasField('field_gallery_slide_media')
  ) {
    // Handle image caption preprocessing.
    _hdbt_preprocess_image_caption(
      $variables,
      'paragraph',
      'field_gallery_slide_media',
      'field_gallery_slide_caption'
    );
  }

  // Unit search paragraph.
  if (
    $paragraph_type == 'unit_search' &&
    $paragraph->hasField('field_unit_search_units')
  ) {
    $variables['search_parent_paragraph'] = $paragraph->id();
    $variables['units_list'] = implode(',', array_map(function ($unit) {
      return $unit['target_id'];
    }, $paragraph->field_unit_search_units->getValue()));
  }

  // Service list paragraph.
  if (
    $paragraph_type == 'service_list' &&
    $paragraph->hasField('field_service_list_services')
  ) {
    $variables['search_parent_paragraph'] = $paragraph->id();
    $variables['services_list'] = implode(',', array_map(function ($service) {
      return $service['target_id'];
    }, $paragraph->field_service_list_services->getValue()));
  }
}

/**
 * Set site information as variables for templates.
 *
 * @param array $variables
 *   Variables array.
 */
function _hdbt_set_site_information(array &$variables) {
  // Set site_name as variable.
  $site_config = \Drupal::config('system.site');
  $variables['site_name'] = $site_config->get('name');

  // Set site front page absolute url as variable.
  $variables['site_front_url'] = Url::fromRoute('<front>', [], ['absolute' => TRUE]);
}

/**
 * Set image style programmatically.
 *
 * @param array $variables
 *   Render array.
 * @param string $entity_type
 *   Current entity type.
 * @param string $image
 *   Image field name.
 * @param string $image_style
 *   Image style name.
 */
function _hdbt_set_image_style(array &$variables, string $entity_type, string $image, string $image_style) {
  $entity = &$variables[$entity_type];

  if (!$entity instanceof ContentEntityInterface) {
    return;
  }

  // Check that image has proper fields.
  if (
    $entity->hasField($image) &&
    $entity->{$image}->entity &&
    $entity->{$image}->entity->hasField('field_media_image') &&
    !$entity->{$image}->entity->field_media_image->first()->isEmpty()
  ) {
    // Set altered_image_style variable based on modified image style
    // for the responsive image preprocesses.
    $entity->{$image}->entity->field_media_image->first()->altered_image_style = $image_style;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_image(&$variables) {
  // Convert double double quotes to empty string for image alt-texts.
  if (isset($variables['alt']) && $variables['alt'] === '""') {
    $variables['attributes']['alt'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_responsive_image_formatter(&$variables) {
  if (!$variables['item'] instanceof ImageItem) {
    return;
  }

  // Override alt text if alteration exists.
  if (!empty($variables['item']->altered_alt_text)) {
    $variables['responsive_image']['#attributes']['alt'] = $variables['item']->altered_alt_text;
  }

  // Override responsive image style if alteration exists.
  if (!empty($variables['item']->altered_image_style)) {
    $variables['responsive_image']['#responsive_image_style_id'] = $variables['item']->altered_image_style;
  }

  // Add width and height for the image, if the width and height can be
  // retrieved from responsive image style. If aforesaid is not possible,
  // use image width and height as fallback values.
  // See. https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/
  $image_width = FALSE;
  $image_height = FALSE;

  if (isset($variables['responsive_image']['#responsive_image_style_id'])) {
    $variables['responsive_image_style_id'] = $variables['responsive_image']['#responsive_image_style_id'];
    $responsive_image_style = ResponsiveImageStyle::load($variables['responsive_image']['#responsive_image_style_id']);
    $fallback_image_style_config = ImageStyle::load($responsive_image_style->getFallbackImageStyle())->getEffects()->getConfiguration();

    foreach ($fallback_image_style_config as $config) {
      if (
        isset($config['data']) &&
        isset($config['data']['width'])
      ) {
        $image_width = $config['data']['width'];
        // If image height is null, treat the image as square image.
        $image_height = !empty($config['data']['height'])
          ? $config['data']['height']
          : $config['data']['width'];
      }
    }
  }
  elseif (
    !empty($variables['responsive_image']['#width']) &&
    !empty($variables['responsive_image']['#height'])
  ) {
    $image_width = $variables['responsive_image']['#width'];
    $image_height = $variables['responsive_image']['#height'];
  }

  // Set responsive image width and height values if available.
  if ($image_height && $image_width) {
    $variables['responsive_image']['#attributes']['width'] = $image_width;
    $variables['responsive_image']['#attributes']['height'] = $image_height;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_imagecache_external_responsive(&$variables) {
  if (!isset($variables['img_element'])) {
    return;
  }

  // Add width and height for the imagecache external image, if the width and
  // height can be retrieved from responsive image style. If aforesaid is not
  // possible, use image width and height as fallback values.
  // See. https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/
  $image_width = FALSE;
  $image_height = FALSE;

  if (isset($variables['responsive_image_style_id'])) {
    $responsive_image_style = ResponsiveImageStyle::load($variables['responsive_image_style_id']);
    $fallback_image_style_config = ImageStyle::load($responsive_image_style->getFallbackImageStyle())->getEffects()->getConfiguration();

    foreach ($fallback_image_style_config as $config) {
      if (
        isset($config['data']) &&
        isset($config['data']['width'])
      ) {
        $image_width = $config['data']['width'];
        // If image height is null, treat the image as square image.
        $image_height = !empty($config['data']['height'])
          ? $config['data']['height']
          : $config['data']['width'];
      }
    }
  }
  elseif (!empty($variables['width']) && !empty($variables['height'])) {
    $image_width = $variables['width'];
    $image_height = $variables['height'];
  }

  // Set responsive image width and height values if available.
  if ($image_height && $image_width) {
    $variables['img_element']['#attributes']['width'] = $image_width;
    $variables['img_element']['#attributes']['height'] = $image_height;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_field(&$variables) {
  switch ($variables['field_name']) {
    // Units.
    case 'field_unit_main_image_url':
      // Craft a rendered token variable for Unit main image.
      _hdbt_craft_token('unit_main_image_rendered_token', $variables);
      break;

    case 'field_unit_visible_title':
      // Craft a rendered token variable for Unit visible title.
      _hdbt_craft_token('unit_visible_title_rendered_token', $variables);
      break;

    case 'field_unit_short_description':
      // Craft a rendered token variable for Unit short description.
      _hdbt_craft_token('unit_short_description_rendered_token', $variables);
      break;

    case 'field_unit_address_tpr':
      // Craft a rendered token variable for Unit address.
      _hdbt_craft_token('unit_address_tpr_rendered_token', $variables);
      break;

    case 'field_unit_email':
      // Craft a rendered token variable for Unit email.
      _hdbt_craft_token('unit_email_rendered_token', $variables);
      break;

    case 'field_unit_phone_number':
      // Craft a rendered token variable for Unit phone number.
      _hdbt_craft_token('unit_phone_number_rendered_token', $variables);
      break;

    case 'field_unit_postal_address_tpr':
      // Craft a rendered token variable for Unit postal address.
      _hdbt_craft_token('unit_postal_address_tpr_rendered_token', $variables);
      break;

    // Services.
    case 'field_service_visible_title':
      // Craft a rendered token variable for Service visible title.
      _hdbt_craft_token('service_visible_title_rendered_token', $variables);
      break;

    case 'field_service_short_description':
      // Craft a rendered token variable for Service short description.
      _hdbt_craft_token('service_short_description_rendered_token', $variables);
      break;

    case 'links':
      // Craft Service channel links url and title for the templates.
      if (
        isset($variables['entity_type']) &&
        $variables['entity_type'] === 'tpr_service_channel'
      ) {
        foreach ($variables['items'] as &$item) {
          $item['link_url'] = $item['content']['#url'];
          $item['link_title'] = $item['content']['#title'];
        }
      }
      break;
  }
}

/**
 * Helper function to craft rendered token.
 *
 * @param string $name
 *   Variable name for the template.
 * @param array $variables
 *   Variables array.
 */
function _hdbt_craft_token(string $name, array &$variables) {
  $token = $variables['items'][0]['content']['#text'];
  if (
    strpos($token, '[') !== FALSE &&
    strpos($token, ']') !== FALSE
  ) {
    $rendered_token = Drupal::token()->replace("$token");
    if ($rendered_token !== $token) {
      $variables[$name] = $rendered_token;
    }
  }
  else {
    $variables[$name] = $token;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  if (
    isset($variables['view']) &&
    !empty($variables['view']->id())
  ) {
    $suggestions[] = 'views_view__' . $variables['view']->id();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  if (isset($variables['view'])) {
    $view = $variables['view'];

    if (!empty($view->id())) {
      $suggestions[] = 'views_view_unformatted__' . $view->id();

      if (!empty($view->getDisplay()->display['id'])) {
        $suggestions[] = 'views_view_unformatted__' . $view->id() . '__' . $view->getDisplay()->display['id'];
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_views_infinite_scroll_pager_alter(array &$suggestions, array $variables) {
  if (isset($variables['view'])) {
    $view = $variables['view'];

    if (!empty($view->id())) {
      $suggestions[] = 'views_infinite_scroll_pager__' . $view->id();

      if (!empty($view->getDisplay()->display['id'])) {
        $suggestions[] = 'views_infinite_scroll_pager__' . $view->id() . '__' . $view->getDisplay()->display['id'];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_views_view(&$variables) {
  // Add pager items per page as a variable.
  $variables['pager_items_per_page'] = $variables['view']->pager->options['items_per_page'];
  // Add total rows as a variable.
  $variables['total_rows'] = $variables['view']->total_rows;
}

/**
 * Implements hook_views_pre_render().
 */
function hdbt_views_pre_render(ViewExecutable $view) {
  // Add library to all for ajax progress.
  if (!isset($view->element["#name"]) || $view->element["#name"] !== 'high_school_search') {
    return;
  }

  if ($view->ajaxEnabled()) {
    $view->element['#attached']['library'][] = 'hdbt/tabs';
    $view->element['#attached']['drupalSettings']['tabsParent'] = $view->element["#name"];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_tpr_unit(&$variables) {
  if (!isset($variables['entity']) || !$variables['entity'] instanceof Unit) {
    return;
  }
  $entity = $variables['entity'];

  // Convert email link to Url object and set as new variable for the template.
  if (!$entity->email->isEmpty()) {
    $variables['unit_email_link'] = Url::fromUri('mailto:' . $entity->email->value);
  }

  // Add current Unit Url to variable.
  $variables['unit_url'] = !$entity->isNew() ? $entity->toUrl('canonical') : NULL;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_tpr_service_channel(&$variables) {
  if (!isset($variables['entity']) || !$variables['entity'] instanceof Channel) {
    return;
  }
  $entity = $variables['entity'];

  // Convert email link to Url object and set as new variable for the template.
  if (!$entity->email->isEmpty()) {
    $variables['service_channel_email_link'] = Url::fromUri('mailto:' . $entity->email->value);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_tpr_errand_service(&$variables) {
  if (!isset($variables['entity']) || !$variables['entity'] instanceof ErrandService) {
    return;
  }
  $entity = $variables['entity'];
  $details = [];

  $detail_fields = [
    'processing_time' => t('Processing time', [], ['context' => 'Errand service detail heading']),
    'costs' => t('Fees', [], ['context' => 'Errand service detail heading']),
    'expiration_time' => t('Validity period', [], ['context' => 'Errand service detail heading']),
    'information' => t('Additional information', [], ['context' => 'Errand service detail heading']),
    'links' => t('Additional links', [], ['context' => 'Errand service detail heading']),
    'process_description' => t('How the process works', [], ['context' => 'Errand service detail heading']),
  ];

  foreach ($detail_fields as $detail_key => $heading) {
    if (!$entity->{$detail_key}->isEmpty()) {
      $content = [];
      if ($detail_key !== 'links') {
        $content['#theme'] = 'tpr_errand_service_detail';
        $content['#title'] = $heading;
        $content['#content'] = [
          '#type' => 'processed_text',
          '#text' => $entity->{$detail_key}->value,
          '#format' => 'full_html',
        ];
      }
      else {
        $content['#theme'] = 'tpr_errand_service_detail_link';
        $content['#title'] = $heading;
        $content['#links'] = $entity->links;
      }

      $details[] = $content;
    }
  }

  $variables['errand_service_details'] = $details;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_maintenance_page(&$variables) {
  // This same preprocess needs to be done separately for maintenance page.
  // We check what language is set and provide links to homepage and feedback
  // accordingly.
  switch ($variables['current_langcode']) {
    case 'fi':
      $variables['maintenance_page_home_link'] = 'https://www.hel.fi/helsinki/fi';
      $variables['maintenance_page_feedback_link'] = 'https://www.hel.fi/helsinki/fi/kaupunki-ja-hallinto/osallistu-ja-vaikuta/palaute';
      break;

    case 'sv':
      $variables['maintenance_page_home_link'] = 'https://www.hel.fi/helsinki/sv';
      $variables['maintenance_page_feedback_link'] = 'https://www.hel.fi/helsinki/sv/stad-och-forvaltning/delta/feedback';
      break;

    default:
      $variables['maintenance_page_home_link'] = 'https://www.hel.fi/helsinki/en';
      $variables['maintenance_page_feedback_link'] = 'https://www.hel.fi/helsinki/en/administration/participate/feedback';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_social_media_links(&$variables) {
  // Convert Attributes to strings.
  if (isset($variables['elements'])) {
    foreach ($variables['elements'] as &$element) {
      // Convert href attribute to URL.
      if (
        $element['api'] instanceof Attribute &&
        $element['api']->offsetExists('href')
      ) {
        $element['url'] = $element['api']
          ->offsetGet('href')
          ->__toString();
      }
      // Convert class attribute to classes.
      if (
        $element['attr']['class'] instanceof Attribute &&
        $element['attr']['class']->offsetExists('class')
      ) {
        $element['classes'][] = $element['attr']['class']
          ->offsetGet('class')
          ->__toString();
      }
    }
  }
}

/**
 * Helper function to get the privacy policy link URL.
 */
function _hdbt_eu_cookie_compliance_get_privacy_policy_url(): Url {
  $config = Drupal::config('eu_cookie_compliance.settings');
  $link = $config->get('popup_link');

  return (UrlHelper::isExternal($link))
    ? Url::fromUri($link)
    : Url::fromUserInput($link === '<front>' ? '/' : $link);
}
