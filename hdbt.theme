<?php

/**
 * @file
 * Functions to support theming in the hdbt theme.
 */

declare(strict_types=1);

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Language\Language;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\helfi_api_base\Environment\Project;
use Drupal\helfi_react_search\LinkedEvents;
use Drupal\helfi_tpr\Entity\ErrandService;
use Drupal\helfi_tpr\Entity\Service;
use Drupal\helfi_tpr\Entity\TprEntityBase;
use Drupal\helfi_tpr\Entity\Unit;
use Drupal\image\Entity\ImageStyle;
use Drupal\image\Plugin\Field\FieldType\ImageItem;
use Drupal\language\ConfigurableLanguageManagerInterface;
use Drupal\link\LinkItemInterface;
use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;

/**
 * Retrieve possible theme color palette override.
 */
function hdbt_get_theme_color_override(): string|FALSE {
  $color = &drupal_static(__FUNCTION__);

  if (!isset($color)) {
    $color = FALSE;
    if (Drupal::moduleHandler()->moduleExists('hdbt_admin_tools')) {
      $page_entity = hdbt_admin_tools_get_page_entity();
      if (
        !empty($page_entity) &&
        $page_entity instanceof ContentEntityInterface &&
        $page_entity->hasField('color_palette') &&
        !empty($page_entity->color_palette->value)
      ) {
        $color = $page_entity->color_palette->value;
      }
    }
  }
  return $color;
}

/**
 * Helper function to hdbt theme path.
 */
function _hdbt_get_theme_path(): string {
  /** @var \Drupal\Core\File\FileUrlGeneratorInterface $service */
  $service = \Drupal::service('file_url_generator');

  // Add theme path to as variable.
  $theme = \Drupal::service('theme_handler')->getTheme('hdbt');
  return $service->generate($theme->getPath())
    ->toString(TRUE)->getGeneratedUrl();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_html(&$variables): void {
  // See if the page we are has exception.
  $page_status = Drupal::requestStack()
    ->getCurrentRequest()?->attributes->get('exception');

  // Check if the page is error-page and add class error-page for the body.
  if ($page_status instanceof HttpExceptionInterface && $page_status->getStatusCode() > 400) {
    $variables['attributes']['class'][] = 'error-page';
  }

  $route_name = \Drupal::routeMatch()->getRouteName();

  // Check if the page is user-login-page and add class
  // user-login-page for the body.
  if ($route_name === 'user.login') {
    $variables['attributes']['class'][] = 'user-login-page';
  }

  $variables['#attached']['library'][] = 'hdbt/cssmenu';

  // Add Matomo analytics for certain users (now anonymous only)
  // Possibly some other roles on future.
  $user_roles = Drupal::currentUser()->getAccount()->getRoles();
  $allowed_roles = ['anonymous'];
  $add_matomo = FALSE;
  foreach ($user_roles as $role) {
    if (in_array($role, $allowed_roles)) {
      $add_matomo = TRUE;
      break;
    }
  }
  if ($add_matomo) {
    $variables['#attached']['library'][] = 'hdbt/matomo';
  }

  // Toggle between global and local navigation libraries for CSS and JS.
  $navigation_enabled = \Drupal::moduleHandler()->moduleExists('helfi_navigation');
  $variables['#attached']['library'][] = $navigation_enabled ? 'hdbt/nav-global' : 'hdbt/nav-local';

  // Toggle between global and local navigation in twig templates.
  $variables['use_global_navigation'] = $navigation_enabled;
  $variables['#attached']['drupalSettings']['hdbt']['global_menu'] = $navigation_enabled;
  $variables['#attached']['drupalSettings']['hdbt']['search_dropdown'] = $navigation_enabled;

  // Set theme path variable.
  $variables['theme_path'] = _hdbt_get_theme_path();

  // Add helfi-environment as a JS variable.
  if (\Drupal::hasService('helfi_api_base.environment_resolver')) {
    try {
      /** @var \Drupal\helfi_api_base\Environment\EnvironmentResolverInterface $service */
      $service = \Drupal::service('helfi_api_base.environment_resolver');

      $variables['#attached']['drupalSettings']['helfi_instance_name'] = $service->getActiveProject()
        ->getName();

      if ($add_matomo) {
        $variables['#attached']['drupalSettings']['helfi_environment'] = $service->getActiveEnvironmentName();
      }
    }
    catch (\InvalidArgumentException) {
    }
  }

  // Apply override for the theme color.
  if (!empty($theme_color = hdbt_get_theme_color_override())) {
    $variables['theme_color'] = $theme_color;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_region(&$variables): void {
  // Set site information to variables.
  _hdbt_set_site_information($variables);
}

/**
 * Helper function to get the settings from configurations.
 *
 * @param string $setting
 *   Setting to be retrieved from config/cache.
 * @param string $group
 *   Indicates which group does the settings belong to.
 *
 * @return string|null
 *   Returns the desired setting as a string or FALSE.
 */
function hdbt_get_settings(string $setting, string $group = 'site_settings'): string|NULL {
  return Drupal::config('hdbt_admin_tools.site_settings')
    ?->getOriginal("$group.$setting", FALSE);
}

/**
 * Retrieves urls by langcode.
 */
function hdbt_get_global_url(string $langcode): array {
  if ($langcode == 'fi') {
    $urls = [
      'events_link_url' => 'https://tapahtumat.hel.fi/fi/',
      'decisions_link_url' => 'https://paatokset.hel.fi/fi/asia',
      'helfi_search_form_url' => 'https://www.hel.fi/haku',
      'error_page_home_link' => 'https://www.hel.fi/fi',
      'error_page_feedback_link' => 'https://palautteet.hel.fi/fi/',
    ];
  }
  elseif ($langcode == 'sv') {
    $urls = [
      'events_link_url' => 'https://tapahtumat.hel.fi/sv',
      'decisions_link_url' => 'https://paatokset.hel.fi/sv/arende',
      'helfi_search_form_url' => 'https://www.hel.fi/sok',
      'error_page_home_link' => 'https://www.hel.fi/sv',
      'error_page_feedback_link' => 'https://palautteet.hel.fi/sv/',
    ];
  }
  else {
    $urls = [
      'events_link_url' => 'https://tapahtumat.hel.fi/en',
      'decisions_link_url' => 'https://paatokset.hel.fi/en/case',
      'helfi_search_form_url' => 'https://www.hel.fi/search',
      'error_page_home_link' => 'https://www.hel.fi/en',
      'error_page_feedback_link' => 'https://palautteet.hel.fi/en/',
    ];
  }
  return $urls;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_page(&$variables): void {
  if (!Drupal::currentUser()->isAuthenticated()) {
    $variables['user_not_logged_in'] = TRUE;
  }

  if ($data = hdbt_get_settings('footer_color', 'footer_settings')) {
    $variables['page']['footer_color'] = $data;
  }

  // Check if current entity is published and set variable accordingly.
  $page_entity = hdbt_admin_tools_get_page_entity();
  if (
    $page_entity instanceof ContentEntityInterface &&
    method_exists($page_entity, 'isPublished')
  ) {
    $variables['published'] = $page_entity->isPublished();
  }

  foreach (hdbt_get_global_url($variables['language']->getId()) as $key => $value) {
    $variables[$key] = $value;
  }

  // Toggle between global and local navigation in twig templates.
  $navigation_enabled = \Drupal::moduleHandler()->moduleExists('helfi_navigation');
  $variables['use_global_navigation'] = $navigation_enabled;

  // Check if the search block is added to header branding.
  // This is currently tied to global navigation since you can't have search
  // without global navigation being enabled.
  $variables['use_search_block'] = $navigation_enabled;

  // Check that language switcher is added to the header branding.
  if (isset($variables['page']['header_branding'])) {
    $variables['use_language_switcher_block'] = array_filter(
      array_keys($variables['page']['header_branding']
    ), function ($key) {
      return str_contains($key, 'language_switcher');
    });
    if ($variables['use_language_switcher_block']) {
      $variables['#attached']['drupalSettings']['hdbt']['language_toast_dropdown'] = TRUE;
      $variables['#attached']['drupalSettings']['hdbt']['current_language'] = $variables['language']->getId();
      $variables['#attached']['library'][] = 'hdbt/language-toast';
    }
  }

  // Check if the otherlangs block is added to header branding.
  // Notice that the block machine name needs to be exactly same as here.
  if (isset($variables['page']['header_branding']['external_header_language_links'])) {
    $variables['use_otherlangs_block'] = TRUE;
  }

  // Check if the profile block is added to header branding.
  // Notice that the block machine name needs to be exactly same as here.
  if (isset($variables['page']['header_branding']['profileblock'])) {
    $variables['use_profile_block'] = TRUE;
  }

  // Set active theme and theme path variables.
  $variables['active_theme'] = \Drupal::theme()->getActiveTheme()->getName();
  $variables['theme_path'] = _hdbt_get_theme_path();

  // Add the figcaption source order handler JS to current page.
  // CKEditor creates a <table> markup with <figcaption> after the <tbody>.
  // Fix the source order with JS.
  $variables['#attached']['library'][] = 'hdbt/table-figcaption';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_node(&$variables): void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Change news archive teasers to use h4 headers instead of the default h3.
  if (
    !empty($variables['view']) &&
    is_object($variables['view']) &&
    $variables['view']->current_display === 'news_archive_block'
  ) {
    $variables['node_header_level'] = 'h4';
  }

  // Add current node langcode for easy access.
  $variables['node_langcode'] = $node->get('langcode')->value;

  // Add current node Url to variable.
  $variables['node_url'] = !$node->isNew() ? $node->toUrl('canonical') : NULL;

  // If node has "published_at" field, set it as variable for the node template.
  if ($node->hasField('published_at') && $node->isPublished()) {
    $variables['published_at'] = $node->get('published_at')->getString();
  }

  // Set "modified_at" variable for the node template.
  // Do not show modified timestamp if it's less or equal to published_at date.
  if (
    !empty($node->getChangedTime()) &&
    isset($variables['published_at']) &&
    $variables['published_at'] < $node->getChangedTime()
  ) {
    $variables['modified_at'] = $node->getChangedTime();
  }

  // Handle image caption preprocessing.
  if ($node->hasField('field_main_image')) {
    _hdbt_preprocess_image_caption(
      $variables,
      'node',
      'field_main_image',
      'field_main_image_caption'
    );
  }

  // Handle short title for the templates.
  if ($node->hasField('field_short_title')) {
    $variables['short_title'] = $node->getTitle();

    // If node has short title set, use it as short-title.
    if (!$node->get('field_short_title')->isEmpty()) {
      $variables['short_title'] = $node->get('field_short_title')->value;
    }
  }
}

/**
 * Preprocess image caption.
 *
 * @param array $variables
 *   Render array.
 * @param string $entity_type
 *   Current entity type.
 * @param string $image
 *   Image field name.
 * @param string $image_caption
 *   Image caption field name.
 */
function _hdbt_preprocess_image_caption(array &$variables, string $entity_type, string $image, string $image_caption): void {
  $entity = $variables[$entity_type];

  if (!$entity instanceof ContentEntityInterface) {
    return;
  }

  // Check for image and image caption availability.
  if ($entity->hasField($image) && $entity->hasField($image_caption)) {
    $caption_variable = str_replace('field_', '', $image_caption);
    $caption = '';

    // If caption exists, set it as initial variable for the image caption.
    if (!$entity->{$image_caption}->isEmpty()) {
      $caption = $entity->{$image_caption}->value;
    }

    // Combine photographer field value with caption.
    if (
      $entity->{$image}->entity?->hasField('field_photographer') &&
      !$entity->{$image}->entity->field_photographer->isEmpty()
    ) {
      // Get translated photographer text if available.
      if ($entity->{$image}->entity->hasTranslation($variables['language']->getId())) {
        $photographer = $entity->{$image}->entity->getTranslation($variables['language']->getId())->field_photographer->value;
      }
      else {
        $photographer = $entity->{$image}->entity->field_photographer->value;
      }

      // If both caption and photographer exists, use targeted translation
      // for the caption and photographer. Otherwise, set only photographer as
      // caption.
      if (!empty($caption)) {
        $caption = t(
          '@caption Photo: @photographer',
          ['@photographer' => $photographer, '@caption' => $caption],
          ['context' => 'Image caption and photographer']
        );
      }
      else {
        $caption = t(
          'Photo: @photographer',
          ['@photographer' => $photographer],
          ['context' => 'Image photographer']
        );
      }
    }

    // Set image caption variable to render array for the templates.
    $variables[$caption_variable] = $caption;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_input_alter(array &$suggestions, array $variables): void {
  if (isset($variables['element']['#name'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . str_replace('-', '_', $variables['element']['#name']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_form_element_alter(array &$suggestions, array $variables): void {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#type'];

  if (isset($variables['element']['#name'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#type'] . '__' . str_replace('-', '_', $variables['element']['#name']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables): void {
  if (isset($variables['element']['#id']) && strpos($variables['element']['#id'], 'edit-unit-search') === 0) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'unit_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide block based menu suggestions.
 */
function hdbt_theme_suggestions_form_alter(array &$suggestions, array $variables): void {
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);

  if (isset($variables['element']['unit_search']) && $variables['element']['unit_search']) {
    $suggestions[] = 'form__unit_search';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide block based menu suggestions.
 */
function hdbt_theme_suggestions_menu_alter(&$suggestions, $variables): void {
  if (isset($variables['attributes']['block_id'])) {
    $suggestions[] = match ($variables['attributes']['block_id']) {
      'mobile_navigation' => 'menu__mobile',
      'mainnavigation' => 'menu__main__desktop',
      'main_navigation_level_2' => 'menu__main__sidebar',
      default => 'menu__' . $variables['attributes']['block_id'],
    };
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_feed_icon(&$variables): void {
  if (!isset($variables['title'])) {
    return;
  }

  if (in_array(strtolower($variables['title']), ['news', 'nyheter', 'uutiset'])) {
    $variables['title'] = t('all news', [], ['context' => 'Feed icon altered title']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_form_element(&$variables): void {
  if (isset($variables['type']) && is_array($variables['label'])) {
    switch ($variables['type']) {
      case 'checkbox':
        $element_label_class = 'hds-checkbox__label';
        break;

      case 'radio':
        $element_label_class = 'hds-radio-button__label';
        break;

      case 'email':
      case 'password':
      case 'textarea':
      case 'textfield':
      case 'select':
        // Use the same label class for selects as well since there is no
        // select specific class on hds core.
        $element_label_class = 'hds-text-input__label';
        break;
    }

    if (isset($element_label_class)) {
      $variables['label']['#element_type'] = $element_label_class;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_input__submit(&$variables): void {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name === 'user.login' && $variables['element']['#id'] === 'edit-submit') {
    $variables['is_login_submit'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_menu(&$variables): void {
  // Toggle between global and local navigation in twig templates.
  $variables['use_global_navigation'] = \Drupal::moduleHandler()
    ->moduleExists('helfi_navigation');

  // Menu, mobile menu, fallback menu and sidebar menu tree depth.
  // Counting from "instance", "main level", "level 3", "level 4", "level 5"...
  $menu_depth = 5;
  $variables['menu_depth'] = $menu_depth;
  $variables['#attached']['drupalSettings']['menu_depth'] = $menu_depth;

  if (isset($variables['attributes']['block_id']) && str_starts_with('external_menu_', $variables['attributes']['block_id'])) {
    return;
  }
  $apply_lang_attribute = array_key_exists('menu_type', $variables);

  if (
    array_key_exists('menu_name', $variables) &&
    $variables['menu_name'] === 'main'
  ) {
    $apply_lang_attribute = TRUE;
  }

  foreach ($variables['items'] as &$item) {
    _hdbt_menu_item_apply_attributes($item, $apply_lang_attribute);
  }
}

/**
 * Iterate through menu items and apply custom attributes to each item.
 *
 * @param array $item
 *   Menu item.
 * @param bool $apply_lang_attribute
 *   Indicates whether we should search for the possible lang attribute.
 */
function _hdbt_menu_item_apply_attributes(array &$item, bool $apply_lang_attribute): void {
  // Iterate through child menu items.
  if (!empty($item['below'])) {
    foreach ($item['below'] as &$item_below) {
      _hdbt_menu_item_apply_attributes($item_below, $apply_lang_attribute);
    }
  }

  // Check if URL is present.
  if (isset($item['url'])) {
    /** @var \Drupal\Core\Url $url */
    $url = $item['url'];

    // Check if the URL is <nolink> and add variable accordingly.
    if ($url->isRouted() && $url->getRouteName() === '<nolink>') {
      $item['is_nolink'] = TRUE;
    }

    // Check if url is current page where we are now.
    $current_path = Drupal::request()->getRequestUri();
    if ($item['url']->toString() == $current_path) {
      $item['is_currentPage'] = TRUE;
    }
  }

  // Handle lang attribute if it's missing from menu item.
  if (
    $apply_lang_attribute &&
    !$item['attributes']->hasAttribute('lang') &&
    array_key_exists('original_link', $item) &&
    $item['original_link'] instanceof MenuLinkContent
  ) {
    $menu_link_content = $item['original_link']->getEntity();

    // Add the possible lang attribute to menu item attributes.
    if (
      $menu_link_content->hasField('lang_attribute') &&
      !$menu_link_content->get('lang_attribute')->isEmpty()
    ) {
      $lang_attribute = $menu_link_content->get('lang_attribute')->value;
      $item['attributes']->setAttribute('lang', $lang_attribute);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_block(&$variables): void {
  // Set site information to variables.
  _hdbt_set_site_information($variables);

  // Set block_id variable.
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }

  // Handle Page title block.
  if ($variables['plugin_id'] == 'page_title_block') {
    $page_entity = hdbt_admin_tools_get_page_entity();

    // Retrieve possible overridden value for page title block.
    if ($page_entity instanceof TprEntityBase) {
      // @todo figure out if this is needed.
      $variables['content']['#title'] = $page_entity->label();
    }
  }

  // Toggle between global and local navigation in twig templates.
  $variables['use_global_navigation'] = \Drupal::moduleHandler()
    ->moduleExists('helfi_navigation');

  // Handle Sidebar menu block.
  if (
    $variables['base_plugin_id'] === 'menu_block_current_language' &&
    str_contains($variables['elements']['#id'], 'main_navigation_level_2') &&
    !empty($variables['content']['#items'])
  ) {
    // Get any current menu level item.
    $current_level_menu_item = reset($variables['content']['#items']);

    if (isset($current_level_menu_item['original_link'])) {
      $original_link = $current_level_menu_item['original_link'];
      $parent = $original_link->getParent();
      $menu_link_manager = Drupal::service('plugin.manager.menu.link');
      $page_entity = hdbt_admin_tools_get_page_entity();

      // Compare the current page menu link and parent menu link.
      if (!empty($page_entity) && $page_entity instanceof ContentEntityInterface) {
        $menu_links = $menu_link_manager->loadLinksByRoute(
          "entity.{$page_entity->getEntityTypeId()}.canonical",
          [$page_entity->getEntityTypeId() => $page_entity->id()]
        );
        // Set parent link false if it matches to current page menu link.
        if (!empty($menu_links) && array_key_exists($parent, $menu_links)) {
          $parent = FALSE;
        }
      }

      $menu_link_title = '';
      $menu_link_url = FALSE;

      // Check if current menu item has parent and serve it as variable.
      if ($parent) {
        $parent_item = $menu_link_manager->createInstance($parent);

        if ($parent_item) {
          $menu_link_title = $parent_item->getTitle();
          $menu_link_url = $parent_item->getUrlObject();
        }
      }
      else {
        $front_page = Url::fromRoute('<front>', [], ['absolute' => TRUE]);
        $uri_parts = parse_url($front_page->toString());
        $url = Url::fromUri('internal:' . $uri_parts['path']);

        try {
          $params = $url->getRouteParameters();
        }
        catch (\Exception $e) {
          $params = [];
        }

        if (!empty($params)) {
          $entity_type = key($params);
          /** @var \Drupal\node\NodeInterface $node */
          $node = Drupal::entityTypeManager()
            ->getStorage($entity_type)
            ->load($params[$entity_type]);

          $node = $node->hasTranslation($variables['language']->getId())
            ? $node->getTranslation($variables['language']->getId())
            : $node;
          $menu_link_title = $node->getTitle();
          $menu_link_url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();
        }
      }

      $variables['menu_link_parent'] = [
        'title' => $menu_link_title,
        'url' => $menu_link_url,
      ];
    }
  }

  // Attach "closable_announcements" library to "announcements" block.
  if ($variables['plugin_id'] == 'announcements') {
    $variables['#attached']['library'][] = 'hdbt/closable_announcements';
  }

  // Attach "closable_surveys" library to "surveys" block.
  if ($variables['plugin_id'] == 'surveys') {
    $variables['#attached']['library'][] = 'hdbt/closable_surveys';
  }

  if ($variables['plugin_id'] == 'external_menu_block:header-language-links') {
    $variables['#attached']['drupalSettings']['hdbt']['otherlangs_dropdown'] = TRUE;
  }

  // Attach "nav_toggle" library to "profile" block.
  if ($variables['plugin_id'] == 'profile_block') {
    $variables['#attached']['drupalSettings']['hdbt']['profile_dropdown'] = TRUE;
  }

  $chat_blocks = [
    'ibm_chat_app',
    'telia_ace_widget',
  ];

  // Add the chat trigger handler JS to chat blocks.
  // It tracks the data-chat-trigger attribute and opens
  // a corresponding chat if clicked.
  if (in_array($variables['plugin_id'], $chat_blocks)) {
    $variables['#attached']['library'][] = 'hdbt/chat-trigger';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_links__language_block(&$variables): void {
  $toast_languages = [
    'en' => [
      'toast_text' => "This page is not available in English. Go to the homepage to access the website's English-language content.",
      'toast_link_title' => 'Please go to the homepage',
      'toast_close_button' => 'Close the popup',
    ],
    'fi' => [
      'toast_text' => 'Tätä sivua ei ole suomeksi. Löydät muuta suomenkielistä sisältöä etusivun kautta.',
      'toast_link_title' => 'Siirry etusivulle',
      'toast_close_button' => 'Sulje ponnahdusikkuna',
    ],
    'sv' => [
      'toast_text' => 'Denna sida finns inte på svenska. Gå till startsidan för att se annat material på svenska.',
      'toast_link_title' => 'Gå till startsidan',
      'toast_close_button' => 'Stäng popup-fönstret',
    ],
  ];

  // Create URL-object for each language front page.
  foreach ($toast_languages as $language => $toast_language) {
    $toast_languages[$language]['toast_link_url'] = new Url(
      '<front>',
      options: ['language' => new Language(['id' => $language])],
    );
  }

  $variables['toast_languages'] = $toast_languages;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_breadcrumb(&$variables): void {
  // If current entity has short title field set, use it to override
  // current page breadcrumb.
  if (Drupal::moduleHandler()->moduleExists('hdbt_admin_tools')) {
    $page_entity = hdbt_admin_tools_get_page_entity();
    if (
      !empty($page_entity) &&
      $page_entity instanceof ContentEntityInterface &&
      $page_entity->hasField('field_short_title') &&
      !empty($page_entity->field_short_title->value)
    ) {
      /** @var \Drupal\Core\Link $current */
      $current = array_pop($variables['links']);
      $current->setText($page_entity->field_short_title->value);
      $variables['links'][] = $current;
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__HOOK().
 */
function hdbt_preprocess_paragraph__image(&$variables) {
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  // Check if the paragraph is a type of image.
  if ($paragraph_type == 'image' && $paragraph->hasField('field_image')) {
    // Handle image caption preprocessing.
    _hdbt_preprocess_image_caption(
      $variables,
      'paragraph',
      'field_image',
      'field_image_caption'
    );

    // Check if the image should be printed in original aspect ratio and
    // set variable accordingly. If not, use image_fixed responsive style.
    if ($paragraph->hasField('field_original_aspect_ratio')) {
      $image_style = $paragraph->field_original_aspect_ratio->value
        ? 'image_orig'
        : 'image_fixed';

      _hdbt_set_image_style(
        $variables,
        'paragraph',
        'field_image',
        $image_style
      );
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__HOOK().
 */
function hdbt_preprocess_paragraph__hero(&$variables) {
  $paragraph = $variables['paragraph'];
  // Check if the paragraph is a type of hero, and it has image field available.
  if (
    $paragraph->hasField('field_hero_image')
  ) {

    // Determine based on hero design which responsive image style
    // should be used when rendering the hero image.
    if ($paragraph->hasField('field_hero_design')) {

      $image_style = match ($paragraph->get('field_hero_design')->value) {
        'with-image-right', 'with-image-left' => 'hero__left_right',
        'with-image-bottom' => 'hero__bottom',
        default => 'hero__diagonal',
      };

      _hdbt_set_image_style(
        $variables,
        'paragraph',
        'field_hero_image',
        $image_style
      );
    }
  }

  // Check if the paragraph is a type of hero, and it has with search as design.
  if (
    $paragraph->hasField('field_hero_design') &&
    $paragraph->get('field_hero_design')->value == 'with-search'
  ) {
    $search_urls = hdbt_get_global_url($variables['language']->getId());
    $variables['helfi_search_form_url'] = $search_urls['helfi_search_form_url'];
  }
}

/**
 * Implements hook_preprocess_paragraph__HOOK().
 */
function hdbt_preprocess_paragraph__liftup_with_image(&$variables) {
  $paragraph = $variables['paragraph'];

  // Determine based on image design which responsive image style
  // should be used when rendering the "liftup with image" -image.
  if ($paragraph->hasField('field_liftup_with_image_design')) {

    $image_style = match ($paragraph->get('field_liftup_with_image_design')->value) {
      'image-on-right',
      'image-on-left',
      'image-on-right-secondary',
      'image-on-left-secondary' => 'liftup_left_right',
      default => 'liftup_bg',
    };

    _hdbt_set_image_style(
      $variables,
      'paragraph',
      'field_liftup_with_image_image',
      $image_style
    );
  }

  // Add the photographer to the image caption.
  if ($paragraph->hasField('field_liftup_with_image_image')) {
    // Get translated photographer text if available.
    if ($paragraph->field_liftup_with_image_image->entity->hasTranslation($variables['language']->getId())) {
      $photographer = $paragraph->field_liftup_with_image_image->entity->getTranslation($variables['language']->getId())->field_photographer->value;
    }
    else {
      $photographer = $paragraph->field_liftup_with_image_image->entity->field_photographer->value;
    }

    if (!$photographer) {
      $caption = '';
    }
    else {
      $caption = t(
        'Photo: @photographer',
        ['@photographer' => $photographer],
        ['context' => 'Image photographer']
      );
    }

    // Set image caption variable to render array for the template.
    $variables['image_caption'] = $caption;
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hdbt_preprocess_paragraph__remote_video(&$variables) {
  $paragraph = $variables['paragraph'];

  if (
    $paragraph->hasField('field_remote_video') &&
    $paragraph->hasField('field_iframe_title')
  ) {
    $iframe_title = $paragraph->get('field_iframe_title')->value;
    if (!$paragraph->get('field_remote_video')->isEmpty()) {
      if ($iframe_title) {
        $paragraph->get('field_remote_video')->entity->get('field_media_oembed_video')->iframe_title = $iframe_title;
      }
      else {
        $paragraph->get('field_remote_video')->entity->get('field_media_oembed_video')->iframe_title = t('Embedded video');
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hdbt_preprocess_paragraph__map(&$variables) {
  $paragraph = $variables['paragraph'];

  if (
    $paragraph->hasField('field_map_map') &&
    $paragraph->hasField('field_iframe_title')
  ) {
    $iframe_title = $paragraph->get('field_iframe_title')->value;
    if (!$paragraph->get('field_map_map')->isEmpty()) {
      if ($iframe_title) {
        $paragraph->get('field_map_map')->entity->get('field_media_hel_map')->title = $iframe_title;
      }
      else {
        $paragraph->get('field_map_map')->entity->get('field_media_hel_map')->title = t('Location on map');
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hdbt_preprocess_paragraph__chart(&$variables) {
  $paragraph = $variables['paragraph'];

  // Chart paragraph.
  if (
    $paragraph->hasField('field_chart_chart') &&
    $paragraph->hasField('field_iframe_title')
  ) {
    $iframe_title = $paragraph->get('field_iframe_title')->value;
    if (!$paragraph->get('field_chart_chart')->isEmpty()) {
      if ($iframe_title) {
        $paragraph->get('field_chart_chart')->entity->get('field_helfi_chart_title')->value = $iframe_title;
      }
      else {
        $paragraph->get('field_chart_chart')->entity->get('field_helfi_chart_title')->value = t('Data chart');
      }
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hdbt_preprocess_paragraph__calculator(&$variables) {
  $variables['theme_path'] = _hdbt_get_theme_path();
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hdbt_preprocess_paragraph__unit_accessibility_information(&$variables) {
  $paragraph = $variables['paragraph'];
  $langcode = \Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();

  if ($paragraph->hasField('field_unit_accessibility_unit')) {
    // Get the information from the unit entity.
    $unit = $paragraph->get('field_unit_accessibility_unit')
      ?->first()
      ?->get('entity')
      ?->getTarget()
      ?->getEntity();

    if ($unit instanceof Unit && $unit->hasTranslation($langcode)) {

      $variables['unit_accessbility_information'] = $unit
        ->getTranslation($langcode)
        ?->get('accessibility_sentences')
        ?->view('full');
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__type().
 */
function hdbt_preprocess_paragraph__unit_contact_card(array &$variables) : void {
  $paragraph = $variables['paragraph'];
  $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();

  // Get the unit entity and ensure it exists and has the correct translation.
  $unit = $paragraph->get('field_unit_contact_unit')
    ?->first()
    ?->get('entity')
    ?->getTarget()
    ?->getEntity();

  if (!($unit instanceof Unit && $unit->hasTranslation($langcode))) {
    return;
  }

  $unit_translation = $unit->getTranslation($langcode);
  $variables['unit_contact_card'] = [];

  // Save field values to variables for reuse to avoid repeated lookups.
  $heading_value = $paragraph->get('field_unit_contact_heading')->value ?? '';
  $use_fields = [
    'address' => $paragraph->get('field_unit_contact_use_address')->value,
    'address_postal' => $paragraph->get('field_unit_contact_use_postal')->value,
    'phone' => $paragraph->get('field_unit_contact_use_phone')->value,
    'opening_hours' => $paragraph->get('field_unit_contact_use_opening')->value,
    'picture' => $paragraph->get('field_unit_contact_use_picture')->value,
    'highlights' => $paragraph->get('field_unit_contact_use_details')->value,
    'link' => $paragraph->get('field_unit_contact_use_link')->value,
    'picture_override' => $paragraph->get('field_unit_contact_use_override')->value,
  ];

  // Heading is determined with a radiobutton selection.
  // If nothing is selected (value is compulsory but can happen) use default
  // value Contact information. If the unit name is used check if the
  // unit name has been overridden.
  if (empty($heading_value) || $heading_value === 'default') {
    $variables['unit_contact_card']['heading'] = t('Contact information', [], ['context' => 'Unit contact card default heading']);
  }
  elseif ($heading_value === 'unit_name') {
    $variables['unit_contact_card']['heading'] = !empty($unit_translation?->get('name_override')->value)
      ? $unit_translation?->get('name_override')->view('unit_contact_card')
      : $unit_translation?->get('name')->view('unit_contact_card');
  }

  // Fields that have a simple boolean selector to display or hide the fields
  // value on the unit contact card.
  $simple_fields = ['address', 'address_postal', 'phone', 'opening_hours', 'highlights'];
  foreach ($simple_fields as $field) {
    if ($use_fields[$field]) {
      $variables['unit_contact_card'][$field] = $unit_translation?->get($field)?->view('unit_contact_card');
    }
  }

  // Picture is also displayed using simple boolean selector, but
  // the default picture of the unit can be overridden using the
  // picture_url_override field so we need to check for that.
  if ($use_fields['picture']) {
    $variables['unit_contact_card']['picture_url'] = $unit_translation?->get('picture_url')?->view('unit_contact_card');
    if ($use_fields['picture_override']) {
      $variables['unit_contact_card']['picture_url_override'] = $unit_translation?->get('picture_url_override')?->view('unit_contact_card');
    }
  }

  // Build the unit url to be used in the unit contact card link.
  // If the unit is not published the unit_url should be NULL because
  // it's not possible for anonymous users to access the unit page.
  if ($use_fields['link'] && $unit_translation->isPublished()) {
    $variables['unit_contact_card']['unit_url'] = !$unit_translation->isNew()
      ? $unit_translation->toUrl('canonical')
      : NULL;
  }
}

/**
 * Implements hook_library_info_alter().
 */
function hdbt_library_info_alter(array &$libraries, string $extension): void {
  // Add the "eu_cookie_compliance/eu_cookie_compliance" library as a
  // dependency for the matomo and embedded content libraries if the
  // EU Cookie compliance module is enabled.
  if (
    $extension !== 'hdbt' ||
    !\Drupal::moduleHandler()->moduleExists('eu_cookie_compliance')
  ) {
    return;
  }

  $dependent_libraries = [
    'matomo',
    'embedded-content-cookie-compliance',
  ];

  foreach ($dependent_libraries as $dependent_library) {
    if (isset($libraries[$dependent_library])) {
      $libraries[$dependent_library]['dependencies'][] = 'eu_cookie_compliance/eu_cookie_compliance';
    }
  }
}

/**
 * Set site information as variables for templates.
 *
 * @param array $variables
 *   Variables array.
 */
function _hdbt_set_site_information(array &$variables) {
  // Store in static cache to save computation time.
  static $values = [];

  if (!$values) {
    $language_id = $variables['language']->getId();

    // Set site_name as variable.
    $site_config = \Drupal::config('system.site');
    $values['site_name'] = $site_config->get('name');

    $values['city_name'] = t('City of Helsinki');

    // Set site front page absolute url as variable.
    $values['site_front_url'] = Url::fromRoute('<front>', [], ['absolute' => TRUE]);

    /** @var \Drupal\helfi_api_base\Environment\EnvironmentResolver $resolver */
    $resolver = \Drupal::service('helfi_api_base.environment_resolver');

    // Return if the current project is not in environments list.
    try {
      $activeEnvironment = $resolver->getActiveEnvironment()->getEnvironmentName();
      $environment = $resolver->getEnvironment(Project::ETUSIVU, $activeEnvironment);
    }
    catch (\Exception $e) {
      // Set Etusivu absolute url as variable.
      $values['frontpage_instance_url'] = Url::fromUri("https://www.hel.fi/$language_id/");
      $variables += $values;
      return;
    }

    // Revert to English path, if current language path is not found.
    try {
      $url = $environment->getUrl($language_id);
    }
    catch (\Exception $e) {
      $url = $environment->getUrl('en');
    }

    // Set Etusivu absolute url as variable.
    $values['frontpage_instance_url'] = Url::fromUri($url);
  }
  $variables += $values;
}

/**
 * Set image style programmatically.
 *
 * @param array $variables
 *   Render array.
 * @param string $entity_type
 *   Current entity type.
 * @param string $image
 *   Image field name.
 * @param string $image_style
 *   Image style name.
 */
function _hdbt_set_image_style(array &$variables, string $entity_type, string $image, string $image_style): void {
  $entity = &$variables[$entity_type];

  if (!$entity instanceof ContentEntityInterface) {
    return;
  }

  // Check that image has proper fields.
  if (
    $entity->hasField($image) &&
    $entity->{$image}->entity &&
    $entity->{$image}->entity->hasField('field_media_image') &&
    !$entity->{$image}->entity->field_media_image->first()->isEmpty()
  ) {
    /** @var \Drupal\media\MediaInterface $media */
    $media = $entity->{$image}->entity;

    // Make sure we load the correct media translation, otherwise
    // hdbt_preprocess_responsive_image_formatter() will receive an empty
    // 'altered_image_style' value for translated media entities.
    if ($media->hasTranslation($variables['language']->getId())) {
      $media = $media->getTranslation($variables['language']->getId());
    }
    // Set altered_image_style variable based on modified image style
    // for the responsive image preprocesses.
    // @phpstan-ignore-next-line
    $media->field_media_image->first()->altered_image_style = $image_style;
    // @phpstan-ignore-next-line
    $media->field_media_image->first()->altered_cache_tags = $entity->getCacheTags();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_image(&$variables): void {
  // Convert double double quotes to empty string for image alt-texts.
  if (isset($variables['alt']) && $variables['alt'] === '""') {
    $variables['attributes']['alt'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_responsive_image_formatter(&$variables): void {
  if (!$variables['item'] instanceof ImageItem) {
    return;
  }

  // Override alt text if alteration exists.
  if (!empty($variables['item']->altered_alt_text)) {
    // Set original alt text to data attribute.
    if (isset($variables['responsive_image']['#attributes']['alt'])) {
      $variables['responsive_image']['#attributes']['data-original-alt'] = $variables['responsive_image']['#attributes']['alt'];
    }
    $variables['responsive_image']['#attributes']['alt'] = $variables['item']->altered_alt_text;
  }

  // Override responsive image style if alteration exists.
  if (!empty($variables['item']->altered_image_style)) {
    $variables['responsive_image']['#responsive_image_style_id'] = $variables['item']->altered_image_style;
  }

  if (!empty($variables['item']->altered_cache_tags)) {
    $variables['responsive_image']['#cache']['tags'] = Cache::mergeTags(
       $variables['item']->altered_cache_tags,
       $variables['responsive_image']['#cache']['tags'] ?? []
     );
  }

  $image_style = array_key_exists('#responsive_image_style_id', $variables['responsive_image'])
    ? $variables['responsive_image']['#responsive_image_style_id']
    : NULL;

  _hdbt_add_image_element_dimensions(
    $image_style,
    $variables['responsive_image']['#width'],
    $variables['responsive_image']['#height'],
    $variables['responsive_image'],
  );
}

/**
 * Add image element dimensions.
 *
 * This function will add the image dimensions to the image element, if
 * the width and height can be retrieved from responsive image style.
 * If aforesaid is not possible, use image width and height as fallback values.
 * See: https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/
 *
 * @param string|null $responsive_image_style_id
 *   Responsive image style ID.
 * @param string|int $width
 *   Current image width.
 * @param string|int $height
 *   Current image height.
 * @param array $element
 *   Current image element.
 */
function _hdbt_add_image_element_dimensions(?string $responsive_image_style_id, mixed $width, mixed $height, array &$element): void {
  // Add width and height for the imagecache external image.
  $image_width = FALSE;
  $image_height = FALSE;

  if (!empty($responsive_image_style_id)) {
    $responsive_image_style = ResponsiveImageStyle::load($responsive_image_style_id);
    $fallback_image_style_config = ImageStyle::load(
      $responsive_image_style->getFallbackImageStyle()
    )->getEffects()->getConfiguration();

    foreach ($fallback_image_style_config as $config) {
      if (
        isset($config['data']) &&
        isset($config['data']['width'])
      ) {
        $image_width = $config['data']['width'];
        // If image height is null, treat the image as square image.
        $image_height = !empty($config['data']['height'])
          ? $config['data']['height']
          : $config['data']['width'];
      }
    }
  }
  elseif (!empty($width) && !empty($height)) {
    $image_width = $width;
    $image_height = $height;
  }

  // Set responsive image width and height values if available.
  if ($image_height && $image_width) {
    $element['#attributes']['width'] = $image_width;
    $element['#attributes']['height'] = $image_height;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_imagecache_external_responsive(&$variables) {
  if (!isset($variables['img_element'])) {
    return;
  }

  $image_style = array_key_exists('responsive_image_style_id', $variables)
    ? $variables['responsive_image_style_id']
    : NULL;

  _hdbt_add_image_element_dimensions(
    $image_style,
    $variables['width'],
    $variables['height'],
    $variables['img_element'],
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_field(&$variables): void {
  switch ($variables['field_name']) {
    case 'field_service_links':
      foreach ($variables['items'] as &$item) {
        $existing = $item['content']['#url']->getOption('attributes');
        $attributes = array_merge($existing ?? [], [
          'class' => [
            'link__style--highlight',
          ],
        ]);

        $item['content']['#url']->setOption('attributes', $attributes);
      }
      break;

    case 'service_map_embed':
      $url_parts = parse_url($variables['items'][0]['content']['iframe']['#attributes']['src']);
      $variables['map_service_url'] = $url_parts['scheme'] . "://" . $url_parts['host'];

      if (Drupal::moduleHandler()->moduleExists('hdbt_cookie_banner')) {
        $cookie_settings = Drupal::service('hdbt_cookie_banner.cookie_settings');
        $variables['privacy_policy_url'] = $cookie_settings->getCookieSettingsPageUrl();
      }
      // @todo UHF-10862 Remove once the HDBT cookie banner module is in use.
      elseif (Drupal::moduleHandler()->moduleExists('helfi_eu_cookie_compliance')) {
        $variables['privacy_policy_url'] = helfi_eu_cookie_compliance_get_privacy_policy_url();
      }
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_views_view_alter(array &$suggestions, array $variables): void {
  if (isset($variables['view'])) {
    $view = $variables['view'];
    if (!empty($variables['view']->id())) {
      $suggestions[] = 'views_view__' . $variables['view']->id();
    }
    if (!empty($view->getDisplay()->display['id'])) {
      $suggestions[] = 'views_view__' . $variables['view']->id() . '__' . $variables['view']->current_display;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables): void {
  if (isset($variables['view'])) {
    $view = $variables['view'];

    if (!empty($view->id())) {
      $suggestions[] = 'views_view_unformatted__' . $view->id();

      if (!empty($view->getDisplay()->display['id'])) {
        $suggestions[] = 'views_view_unformatted__' . $view->id() . '__' . $view->getDisplay()->display['id'];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_views_view(&$variables): void {
  // Add pager items per page as a variable.
  if ($variables['view']->pager != NULL) {
    $variables['pager_items_per_page'] = $variables['view']->pager->options['items_per_page'];
  }
  // Add total rows as a variable.
  $variables['total_rows'] = $variables['view']->total_rows ?: 0;

  if ($variables['view']->id() == 'service_list') {
    $variables['is_ajax_request'] = \Drupal::request()->isXmlHttpRequest();
  }
  if ($variables['view']->id() == 'unit_search' && $variables['view']->args[2] != NULL) {
    $variables['results_term_singular'] = $variables['view']->args[2];
  }
  if ($variables['view']->id() == 'unit_search' && $variables['view']->args[3] != NULL) {
    $variables['results_term_plural'] = $variables['view']->args[3];
  }
}

/**
 * Implements hook_views_pre_render().
 */
function hdbt_views_pre_render(ViewExecutable $view): void {
  // Add library to all for ajax progress.
  if (!isset($view->element["#name"]) || $view->element["#name"] !== 'high_school_search') {
    return;
  }

  if ($view->ajaxEnabled()) {
    $view->element['#attached']['library'][] = 'hdbt/tabs';
    $view->element['#attached']['drupalSettings']['tabsParent'] = $view->element["#name"];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_tpr_unit(&$variables): void {
  if (!isset($variables['entity']) || !$variables['entity'] instanceof Unit) {
    return;
  }

  $entity = $variables['entity'];

  // Add unit publish state to variable.
  $variables['content_entity_published'] = TRUE;

  if (!$entity->isPublished()) {
    $variables['content_entity_published'] = FALSE;
  }

  // Add current Unit Url to variable.
  $variables['unit_url'] = !$entity->isNew() ? $entity->toUrl('canonical') : NULL;

  // Add cookie compliance JS to unit pages since they have maps.
  $variables['#attached']['library'][] = 'hdbt/embedded-content-cookie-compliance';

  // Handle TPR unit picture caption preprocessing.
  if ($entity->hasField('picture_url_override')) {
    _hdbt_preprocess_image_caption(
      $variables,
      'entity',
      'picture_url_override',
      'unit_picture_caption'
    );
  }

  // Check if the unit is a daycare unit.
  $variables['is_daycare_unit'] = FALSE;
  if ($entity->hasField('field_unit_type')) {
    $types = $entity->get('field_unit_type')->referencedEntities();
    foreach ($types as $type) {
      if ($type->id() == 1) {
        $variables['is_daycare_unit'] = TRUE;
      }
    }
  }

  $variables['show_phone_with_contacts'] = FALSE;
  if ($entity->hasField('field_phone_with_contacts')) {
    $variables['show_phone_with_contacts'] = (bool) $entity->get('field_phone_with_contacts')->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_tpr_service(&$variables): void {
  if (!isset($variables['entity']) || !$variables['entity'] instanceof Service) {
    return;
  }
  // Add service publish state to variable.
  $variables['content_entity_published'] = TRUE;

  $entity = $variables['entity'];

  if (!$entity->isPublished()) {
    $variables['content_entity_published'] = FALSE;
  }

  $variables['service_url'] = !$entity->isNew() ? $entity->toUrl('canonical') : NULL;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_tpr_errand_service(&$variables): void {
  if (!isset($variables['entity']) || !$variables['entity'] instanceof ErrandService) {
    return;
  }
  $entity = $variables['entity'];

  // Process accordion content.
  $process = [];
  $process_fields = [
    'process_description' => t('How the process works', [], ['context' => 'Errand service detail heading']),
    'processing_time' => t('Processing time', [], ['context' => 'Errand service detail heading']),
    'expiration_time' => t('Validity period', [], ['context' => 'Errand service detail heading']),
  ];

  foreach ($process_fields as $process_key => $heading) {
    if (!$entity->{$process_key}->isEmpty()) {
      $content = [];
      if ($process_key !== 'links') {
        $content['#theme'] = 'tpr_errand_service_detail';
        $content['#title'] = $heading;
        $content['#content'] = [
          '#type' => 'processed_text',
          '#text' => $entity->{$process_key}->value,
          '#format' => 'full_html',
        ];
      }
      else {
        $content['#theme'] = 'tpr_errand_service_detail_link';
        $content['#title'] = $heading;
        $content['#links'] = $entity->links;
      }

      $process[] = $content;
    }
  }

  $variables['errand_service_process'] = $process;

  // Fees accordion content.
  $fees = [];
  $fees_fields = [
    'costs' => t('Fees', [], ['context' => 'Errand service detail heading']),
  ];

  foreach ($fees_fields as $fees_key => $heading) {
    if (!$entity->{$fees_key}->isEmpty()) {
      $content = [];
      if ($fees_key !== 'links') {
        $content['#theme'] = 'tpr_errand_service_detail';
        $content['#content'] = [
          '#type' => 'processed_text',
          '#text' => $entity->{$fees_key}->value,
          '#format' => 'full_html',
        ];
      }
      else {
        $content['#theme'] = 'tpr_errand_service_detail_link';
        $content['#links'] = $entity->links;
      }

      $fees[] = $content;
    }
  }

  $variables['errand_service_fees'] = $fees;

  // Additional information accordion content.
  $additional_info = [];

  $additional_info_fields = [
    'information' => t('Additional information', [], ['context' => 'Errand service detail heading']),
    'links' => t('Links', [], ['context' => 'Errand service detail heading']),
  ];

  foreach ($additional_info_fields as $additional_info_key => $heading) {
    if (!$entity->{$additional_info_key}->isEmpty()) {
      $content = [];
      if ($additional_info_key !== 'links') {
        $content['#theme'] = 'tpr_errand_service_detail';
        $content['#title'] = $heading;
        $content['#content'] = [
          '#type' => 'processed_text',
          '#text' => $entity->{$additional_info_key}->value,
          '#format' => 'full_html',
        ];
      }
      else {
        $content['#theme'] = 'tpr_errand_service_detail_link';
        $content['#title'] = $heading;
        $content['#links'] = $entity->links;
      }

      $additional_info[] = $content;
    }
  }

  $variables['errand_service_additional_info'] = $additional_info;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_maintenance_page(&$variables): void {
  // This same preprocess needs to be done separately for maintenance page.
  // We check what language is set and provide links to homepage and feedback
  // accordingly.
  switch ($variables['language']->getId()) {
    case 'fi':
      $variables['maintenance_page_home_link'] = 'https://www.hel.fi/fi';
      $variables['maintenance_page_feedback_link'] = 'https://palautteet.hel.fi/fi';
      $variables['maintenance_page_copy_link'] = 'https://kopio.hel.fi/fi.html';
      break;

    case 'sv':
      $variables['maintenance_page_home_link'] = 'https://www.hel.fi/sv';
      $variables['maintenance_page_feedback_link'] = 'https://palautteet.hel.fi/sv';
      $variables['maintenance_page_copy_link'] = 'https://kopio.hel.fi/sv.html';
      break;

    default:
      $variables['maintenance_page_home_link'] = 'https://www.hel.fi/en';
      $variables['maintenance_page_feedback_link'] = 'https://palautteet.hel.fi/en';
      $variables['maintenance_page_copy_link'] = 'https://kopio.hel.fi/en.html';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_social_media_links(&$variables): void {
  // Convert Attributes to strings.
  if (isset($variables['elements'])) {
    foreach ($variables['elements'] as $key => &$element) {
      // Convert href attribute to URL.
      if (
        $element['api'] instanceof Attribute &&
        $element['api']->offsetExists('href')
      ) {
        $element['url'] = $element['api']
          ->offsetGet('href')
          ->__toString();
      }
      // Convert class attribute to classes.
      if (
        $element['attr']['class'] instanceof Attribute &&
        $element['attr']['class']->offsetExists('class')
      ) {
        $element['classes'][] = $element['attr']['class']
          ->offsetGet('class')
          ->__toString();
      }

      /** @var \Drupal\helfi_api_base\Language\DefaultLanguageResolver $defaultLanguageResolver */
      $defaultLanguageResolver = Drupal::service('helfi_api_base.default_language_resolver');

      $languageManager = \Drupal::languageManager();
      assert($languageManager instanceof ConfigurableLanguageManagerInterface);

      // Add lang and dir attributes if the link text is not translated.
      if ($key === 'email' && $defaultLanguageResolver->isAltLanguage($variables['language']->getId())) {
        if (!isset($languageManager->getLanguageConfigOverride($variables['language']->getId(), 'social_media.settings')->get('social_media')['email']['text'])) {
          $attributes = $defaultLanguageResolver->getFallbackLangAttributes();
          $element['attr']['lang'] = $attributes['lang'];
          $element['attr']['dir'] = $attributes['dir'];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_pager(&$variables): void {
  $element = $variables['pager']['#element'];

  /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
  $pager_manager = \Drupal::service('pager.manager');
  $pager = $pager_manager->getPager($element);
  // Get the total pages in the pager.
  $total_pages = isset($pager) ? $pager->getTotalPages() : 0;

  $variables['total_pages'] = $total_pages;
}

/**
 * Implements hook_preprocess_paragraph().
 */
function hdbt_preprocess_paragraph__event_list(&$variables): void {
  // Expose event list variables to frontend.
  if (isset($variables['paragraph'])) {
    /** @var \Drupal\helfi_react_search\Entity\EventList $paragraph */
    $paragraph = $variables['paragraph'];
    $settings = [];
    $settings['field_event_list_title'] = $paragraph->getTitle();
    $settings['field_event_count'] = (string) $paragraph->getCount();

    $langcode = \Drupal::languageManager()
      ->getCurrentLanguage()
      ->getId();

    $settings['field_filter_keywords'] = array_map(static fn ($term) => [
      'id' => $term->id,
      'name' => $term->name[$langcode] ?? $term->name['fi'],
    ], $paragraph->getFilterKeywords());

    if ($paragraph->hasField('field_api_url') && !$paragraph->get('field_api_url')->isEmpty()) {
      /** @var \Drupal\helfi_react_search\LinkedEvents $linkedEvents */
      $linkedEvents = Drupal::service(LinkedEvents::class);
      $link_field = $events_public_url = $paragraph->get('field_api_url')->first();
      assert($link_field instanceof LinkItemInterface);
      $events_public_url = $link_field->getUrl()->toString();
      $settings['events_public_url'] = $events_public_url;
      $params = $linkedEvents->parseParams($events_public_url);
      $eventUrl = $linkedEvents->getEventsRequest($params, $settings['field_event_count']);
      $settings['events_api_url'] = $eventUrl;
      $settings['use_fixtures'] = $linkedEvents->getFixture();
      if (!empty($paragraph->get('field_event_location')->getValue()) && $paragraph->get('field_event_location')->first()->getValue()['value']) {
        $settings['places'] = $linkedEvents->getPlaceslist($eventUrl);
      }
    }

    $settings += $paragraph->getFilterSettings();

    $variables['#attached']['drupalSettings']['helfi_events']['data'][$paragraph->id()] = $settings;
  }

  /** @var \Drupal\Core\Extension\ExtensionPathResolver $extensionPathResolver */
  $extensionPathResolver = \Drupal::service('extension.path.resolver');

  // Render image placeholder for use in frontend.
  $variables['#attached']['drupalSettings']['helfi_events']['imagePlaceholder'] = twig_render_template(
    $extensionPathResolver->getPath('theme', 'hdbt') . '/templates/misc/image-placeholder.twig',
    [
      'directory' => 'themes/custom/hdbt',
      'image_placeholder' => 'calendar-clock',
      'theme_hook_original' => '',
    ]
  );

  $variables['#attached']['library'][] = 'hdbt/event-list';
  $variables['#attached']['drupalSettings']['helfi_events']['baseUrl'] = LinkedEvents::BASE_URL;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_paragraph__school_search(array &$variables): void {
  $variables['#attached']['library'][] = 'hdbt/school-search';
  // @todo UHF-10862 Remove once the HDBT cookie banner module is in use.
  hdbt_set_legacy_privacy_policy_url($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_paragraph__health_station_search(array &$variables): void {
  $variables['#attached']['library'][] = 'hdbt/health-station-search';
  // @todo UHF-10862 Remove once the HDBT cookie banner module is in use.
  hdbt_set_legacy_privacy_policy_url($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_paragraph__maternity_and_child_health_clini(array &$variables): void {
  $variables['#attached']['library'][] = 'hdbt/maternity-and-child-health-clinic-search';
  // @todo UHF-10862 Remove once the HDBT cookie banner module is in use.
  hdbt_set_legacy_privacy_policy_url($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_paragraph__ploughing_schedule(array &$variables): void {
  $variables['#attached']['library'][] = 'hdbt/ploughing-schedule';
  // @todo UHF-10862 Remove once the HDBT cookie banner module is in use.
  hdbt_set_legacy_privacy_policy_url($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_node__announcement(array &$variables) {
  $type = $variables['node']->get('field_announcement_type')->value;

  $type_label = match($type) {
    'alert' => t('Alert'),
    'attention' => t('Attention'),
    default => t('Notification')
  };

  $close_label = t('Close');

  $variables['type_label'] = $type_label;
  $variables['close_label'] = $close_label;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_paragraph__job_search(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();
  $language_manager = \Drupal::languageManager();
  $langcode = $language_manager
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
    ->getId();

  if ($paragraph_type == 'job_search') {
    if ($search_result_page_nid = $paragraph->get('field_job_search_result_page')->getString()) {
      $entity = Node::load($search_result_page_nid);

      if ($entity->hasTranslation($langcode)) {
        $entity = $entity->getTranslation($langcode);
      }

      $url = $entity->toUrl()->toString();
      $variables['#attached']['drupalSettings']['helfi_rekry_job_search']['results_page_path'] = $url;
    }
  }

  // Attach job search library.
  $variables['#attached']['library'][] = 'hdbt/job-search';

  // Hakuvahti server url, expose to react if it's enabled or not.
  $hakuvahtiUrl = getenv('HAKUVAHTI_URL');
  $variables['#attached']['drupalSettings']['helfi_react_search']['hakuvahti_url_set'] = !empty($hakuvahtiUrl);

  // Hakuvahti TOS settings.
  if (!empty($hakuvahtiUrl)) {
    $tos_variables = [
      'hakuvahti_tos_checkbox_label',
      'hakuvahti_tos_link_text',
      'hakuvahti_tos_link_url',
    ];

    // Attempt to get the translated configuration.
    $language = $language_manager->getLanguage($langcode);
    $original_language = $language_manager->getConfigOverrideLanguage();
    $language_manager->setConfigOverrideLanguage($language);
    $config = \Drupal::config('helfi_rekry_content.job_listings');

    foreach ($tos_variables as $tos_variable) {
      $variables['#attached']['drupalSettings']['helfi_rekry_job_search'][$tos_variable] = $config->get($tos_variable) ?: 'undefined';
    }

    // Set the config back to the original language.
    $language_manager->setConfigOverrideLanguage($original_language);
  }
}

/**
 * Implements hook_theme_suggestions_alter() for container.
 */
function hdbt_theme_suggestions_container_alter(array &$suggestions, array &$variables) {
  $name = '';
  $type = '';
  if (isset($variables['element']['#name'])) {
    $name = $variables['element']['#name'];
  }

  if (isset($variables['element']['#type'])) {
    $type = $variables['element']['#type'];
  }

  array_unshift($suggestions, 'container__' . $type . '__' . $name);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_views_exposed_form(array &$variables) {
  $variables['#attached']['library'][] = 'hdbt/search-helper';
}

/**
 * Get privacy policy url from helfi_eu_cookie_compliance module.
 *
 * @todo UHF-10862 Remove once the HDBT cookie banner module is in use.
 *
 * @param array $variables
 *   Variables array.
 */
function hdbt_set_legacy_privacy_policy_url(array &$variables): void {
  if (Drupal::moduleHandler()->moduleExists('helfi_eu_cookie_compliance')) {
    $privacyUrl = helfi_eu_cookie_compliance_get_privacy_policy_url();

    if ($privacyUrl instanceof Url) {
      $privacyUrl->setAbsolute();
      $variables['#attached']['drupalSettings']['helfi_react_search']['cookie_privacy_url'] = $privacyUrl->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_paragraph__image_gallery_item(array &$variables): void {
  // Handle image caption preprocessing.
  _hdbt_preprocess_image_caption(
    $variables,
    'paragraph',
    'field_gallery_image',
    'field_gallery_image_description',
  );

  $paragraph = $variables['paragraph'];
  $parent = $paragraph->getParentEntity();

  if ($parent->hasField('field_image_gallery_ratio') && !$parent->get('field_image_gallery_ratio')->isEmpty()) {
    $ratio = $parent->field_image_gallery_ratio->value;

    if ($paragraph->hasField('field_gallery_image') && !$paragraph->get('field_gallery_image')->isEmpty()) {
      if ($ratio == 'ratio_2_3') {
        $image_style = 'image_gallery_2_3';
      }
      elseif ($ratio == 'ratio_3_2') {
        $image_style = 'image_gallery_3_2';
      }
      else {
        $image_style = 'image_gallery_1_1';
      }

      _hdbt_set_image_style(
        $variables,
        'paragraph',
        'field_gallery_image',
        $image_style
      );
    }

  }

}
