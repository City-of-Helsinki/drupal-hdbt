<?php

/**
 * @file
 * Functions to support theming in the hdbt theme.
 */

use Drupal\Core\Cache\Cache;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess().
 */
function hdbt_preprocess(&$variables) {
  $variables['icons_path'] = hdbt_get_icons_path();
  $variables['koro'] = hdbt_get_settings('koro');
  $language = Drupal::languageManager()->getCurrentLanguage();
  $variables['current_langcode'] = $language->getId();
  $variables['current_language'] = $language->getName();
  $variables['#attached']['drupalSettings']['iconsPath'] = $variables['icons_path'];
}

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function hdbt_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    global $base_secure_url;
    $icon_path = $base_secure_url . '/' . drupal_get_path('theme', 'hdbt') . '/dist/icons/sprite.svg';

    if (!empty($icon_path)) {
      // Add icons path as a global variable.
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Helper function to get the settings from configurations.
 *
 * @param string $setting
 *   Setting to be retrieved from config/cache.
 *
 * @return string|null
 *   Returns koro as a string or false.
 */
function hdbt_get_settings($setting) {
  if (empty($setting)) {
    return FALSE;
  }

  $cached = \Drupal::cache()->get("hdbt_settings:$setting");

  if ($cached) {
    return $cached->data;
  }

  $settings = \Drupal::config('hdbt_admin_tools.site_settings');

  try {
    $data = ($setting == 'koro')
      ? $settings->get("koro_settings.$setting")
      : $settings->get("footer_settings.$setting");

    if (!empty($data)) {
      \Drupal::cache()->set("hdbt_settings:$setting", $data, Cache::PERMANENT);
      return $data;
    }
    return FALSE;
  }
  catch (RequestException $error) {
    watchdog_exception('hdbt', $error);
    return FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_page(&$variables) {
  if ($data = hdbt_get_settings('footer_color')) {
    $variables['page']['footer_color'] = $data;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_component_library_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'component_library__hdbt';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_component_library(&$variables) {
  $variables['#attached']['library'][] = 'hdbt/component-library';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['element']['#type'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_form_element(&$variables) {
  if (isset($variables['type']) && is_array($variables['label'])) {
    switch ($variables['type']) {
      case 'checkbox':
        $element_label_class = 'hds-checkbox__label';
        break;

      case 'radio':
        $element_label_class = 'hds-radio-button__label';
        break;

      case 'textfield':
      case 'password':
      case 'textarea':
        $element_label_class = 'hds-text-input__label';
        break;
    }

    if (isset($element_label_class)) {
      $variables['label']['#element_type'] = $element_label_class;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_menu(&$variables) {
  foreach ($variables['items'] as $key => &$item) {
    if (isset($item['url'])) {
      /** @var \Drupal\Core\Url $url */
      $url = $item['url'];

      if ($url->isExternal()) {
        $item['is_external'] = TRUE;
      }

      if (!$url->isExternal() && $url->getRouteName() === '<nolink>') {
        $item['is_nolink'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_preprocess_block(&$variables) {
  // Handle only Page title block.
  if ($variables['plugin_id'] == 'page_title_block') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      // Retrieve the node object for revisions.
      $node = (is_numeric($node) && !$node instanceof Node)
        ? Node::load($node) : $node;

      // Hide block if current node is front page.
      if (
        $node->hasField('field_hero') &&
        $node->hasField('field_has_hero')
      ) {
        if (boolval($node->get('field_has_hero')->getString())) {
          $variables['hide_block'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */

function hdbt_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  // Check if the paragraph is type list of links item and tell it its parents design.
  if ($paragraph_type == 'list_of_links_item') {
    $paragraph_parent = $paragraph->getParentEntity();
    $design = $paragraph_parent->get('field_list_of_links_design')->getString();
    $variables['list_of_links_design'] = $design;
  }
}
