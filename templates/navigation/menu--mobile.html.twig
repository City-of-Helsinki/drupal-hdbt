{#
/**
 * @file
 * Theme override to display a menu.
 *
 * Available variables:
 * - menu_name: The machine name of the menu.
 * - items: A nested list of menu items. Each menu item contains:
 *   - attributes: HTML attributes for the menu item.
 *   - below: The menu item child items.
 *   - title: The menu link title.
 *   - url: The menu link url, instance of \Drupal\Core\Url
 *   - localized_options: Menu link localized options.
 *   - is_expanded: TRUE if the link has visible children within the current
 *     menu tree.
 *   - is_collapsed: TRUE if the link has children within the current menu tree
 *     that are not currently visible.
 *   - in_active_trail: TRUE if the link is in the active trail.
 */
#}
{% import _self as menus %}

{#
  We call a macro which calls itself to render the full tree.
  @see https://twig.symfony.com/doc/1.x/tags/macro.html
#}

{# Do we want to render navigation with content from another instance "globally" #}


{% if use_global_navigation %}

  {% set attributesClone = create_attribute(attributes.storage()) %}

  {{ menus.megamenu(items, attributes, 0) }}

  {% macro megamenu(items, attributes, menu_level) %}

    {% import _self as menus %}
    {% set max_level = 3 %} {# Megamenu is limited to 3rd level on purpose (Instance -> Instance main nav -> Instance sub nav) #}

    {% if menu_level == 0 %}
      {% set ul_class = 'megamenu' %}
    {% else %}
      {% set ul_class = 'megamenu__subnav' %}
    {% endif %}

    {% if items %}
      <ul{{ attributes.addClass(ul_class) }}>
      {% for item in items %}
        {% set level = menu_level + 1 %}
        {% set has_children = false %}
        {% if level <= max_level - 2 %}
          {% set has_children = item.below %}
        {% endif %}
        {% set item_classes = [
          'megamenu__item',
          item.is_nolink ? 'megamenu__item--nolink',
          has_children ? 'megamenu__item--has-children',
          item.in_active_trail ? 'megamenu__item--in-path',
          'megamenu__item--level-' ~ (level + 1),
        ]%}

        <li{{ item.attributes.removeAttribute('class').addClass(item_classes) }}>

          {% set item_title = item.title %}
          {% if not item.is_nolink %}
            {% spaceless %}

              {% set icon_name = (item.url.getOption('attributes')).icon %}
              {% if icon_name %}
                {% set item_title %}
                  {% include '@hdbt/misc/icon.twig' with {icon: icon_name, class: 'megamenu__link__icon'} %}
                  <span class="megamenu__link__text">{{ item.title }}</span>
                {% endset %}
              {% endif %}

              {% set link_attributes = {
                'class':
                  [
                    'megamenu__link',
                    item.in_active_trail ? 'megamenu__link--in-path',
                  ],
                'aria-current': item.is_currentPage ? 'page': null,
              } %}

              {{ link(item_title, item.url, link_attributes) }}

            {% endspaceless %}
          {% else %}
            <span{{ create_attribute({'class': 'megamenu__item__nolink'} ) }}>{{ item.title }}</span>
          {% endif %}
          {% if has_children %}

            {{ menus.megamenu(item.below, attributes, menu_level + 1) }}

          {% endif %}
        </li>
      {% endfor %}
      </ul>
    {% endif %}
  {% endmacro %}

  <div class="mobile-menu-fallback" id="js-menu-fallback">
    Mobile menu
    <ul>
      <li>Lorem, ipsum dolor.</li>
      <li>Officiis, debitis voluptatem!</li>
      <li>Nulla, debitis cumque!</li>
      <li>Blanditiis, optio sint.</li>
      <li>Nihil, pariatur perferendis!</li>
      <li>Vel, deleniti earum.</li>
      <li>Minima, earum sit?</li>
      <li>Porro, reprehenderit error.</li>
      <li>Quasi, officiis architecto.</li>
      <li>Enim, quasi minima?</li>
    </ul>
  </div>

{% else %}
  {#
    We call a macro which calls itself to render the full tree.
    @see https://twig.symfony.com/doc/1.x/tags/macro.html
  #}
  {{ menus.menu_links(items, attributes, 0) }}

  {% macro menu_links(items, attributes, menu_level) %}
    {% import _self as menus %}
    {% set max_level = 5 %} {# How deep do we allow the navigation menu to traverse? Counting from "instance", "main level", "level 3", "level 4", "level 5"... #}

    {% if menu_level == 0 %}
      {% set ul_class = 'cssnav' %}
    {% else %}
      {% set ul_class = 'cssnav__subnav' %}
    {% endif %}

    {% if items %}
      <ul{{ attributes.addClass(ul_class) }}>
      {% for item in items %}
        {% set level = menu_level + 1 %}
        {% set has_children = false %}
        {% if level <= max_level - 2 %}
          {% set has_children = item.below %}
        {% endif %}
        {% set item_classes = [
          'cssnav__item',
          item.is_nolink ? 'cssnav__item--nolink',
          has_children ? 'cssnav__item--has-children',
          item.in_active_trail ? 'cssnav__item--in-path',
          'cssnav__item--level-' ~ (level + 1),
        ]%}

        <li{{ item.attributes.addClass(item_classes) }}>

          {% set item_title = item.title %}
          {% if not item.is_nolink %}
            {% spaceless %}

              {% set icon_name = (item.url.getOption('attributes')).icon %}
              {% if icon_name %}
                {% set item_title %}
                  {% include '@hdbt/misc/icon.twig' with {icon: icon_name, class: 'cssnav__link__icon'} %}
                  <span class="cssnav__link__text">{{ item.title }}</span>
                {% endset %}
              {% endif %}

              {% set link_attributes = {
                'class':
                  [
                    'cssnav__link',
                    item.in_active_trail ? 'cssnav__link--in-path',
                  ],
                'aria-current': item.is_currentPage ? 'page': null,
              } %}

              {{ link(item_title, item.url, link_attributes) }}

            {% endspaceless %}
          {% else %}
            <span{{ create_attribute({'class': 'cssnav__item__nolink'} ) }}>{{ item.title }}</span>
          {% endif %}
          {% if has_children %}
            <details {{item.in_active_trail ? 'open'}}>
              <summary>
                <span class="cssnav__text-mirror">{{ item_title }}</span>
                <span class="cssnav__toggle"><span class="visually-hidden">{{ 'Toggle submenu:'|t({}, {'context': 'Mobile navigation submenu prefix'}) }} {{ item.title }}</span></span>
              </summary>
            {{ menus.menu_links(item.below, attributes, menu_level + 1) }}
            </details>
          {% endif %}
        </li>
      {% endfor %}
      </ul>
    {% endif %}
  {% endmacro %}
{% endif %}
