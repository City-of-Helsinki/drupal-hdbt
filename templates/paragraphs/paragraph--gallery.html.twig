{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
  'gallery',
  view_mode ? 'gallery--' ~ view_mode|clean_class,
]
%}

{% block paragraph %}
  <div{{ attributes.addClass(classes).setAttribute('aria-hidden', 'true').setAttribute('aria-label', 'Image gallery'|t) }}>
    {% embed "@hdbt/misc/container.twig" with {container_element: 'gallery'} %}
      {% block container_content %}
        <div class="gallery__main splide">
          <div class="gallery__slides splide__track">
            <ul class="splide__list">
              {{ content }}
            </ul>
          </div>
        </div>
        <div class="gallery__slide-count"></div>
        <div class="gallery__thumbnails js-gallery__thumbnails">
          <ul class="gallery__thumbnails__list">
            {% for key, image in gallery_slide_thumbnails %}
              {% set gallery_thumbnails_item = create_attribute({'class': 'gallery__thumbnails__item'}).setAttribute('role', 'button').setAttribute('tabindex', '0') %}
              {% if gallery_slide_thumbnails_alt_texts[key].caption %}
                {% set alt = gallery_slide_thumbnails_alt_texts[key].caption %}
                {% set gallery_thumbnails_item = gallery_thumbnails_item.setAttribute('aria-label', gallery_slide_thumbnails_alt_texts[key].caption) %}
              {% elseif gallery_slide_thumbnails_alt_texts[key].alt is not same as('""') %}
                {% set alt = gallery_slide_thumbnails_alt_texts[key].alt %}
                {% set gallery_thumbnails_item = gallery_thumbnails_item.setAttribute('aria-label', gallery_slide_thumbnails_alt_texts[key].alt) %}
              {% else %}
                {% set alt = false %}
              {% endif %}
              <li{{ gallery_thumbnails_item }}>
                {{ drupal_image(image.uri.value, 'gallery_thumbnail', { alt: alt }, responsive=true) }}
              </li>
            {% endfor %}
          </ul>
        </div>
      {% endblock %}
    {% endembed %}
  </div>
{% endblock paragraph %}
