{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set design = content.field_banner_design[0]['#markup'] %}

{%
  set classes = [
    'banner',
    view_mode ? 'banner--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'banner--unpublished',
    'banner--design-' ~ design,
    'banner--color-' ~ theme_color
  ]
%}

{% set link = content.field_banner_link.0['#url'] %}
{% set text = content.field_banner_link.0['#title'] %}
{% set link_type = content.field_banner_link_design[0]['#markup'] %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% embed "@hdbt/misc/container.twig" with {container_element: 'banner'} %}
      {% block container_content %}
        <div class="banner__wrapper">
          <h2 class="banner__title">{{ content.field_banner_title }}</h2>
          {% if content.field_banner_desc|render %}
            <div class="banner__content">{{ content.field_banner_desc }}</div>
          {% endif %}
        </div>
        {% if content.field_banner_link|render %}
          <a href="{{ link }}" class="banner__button hds-button {% if link_type %}{{ 'hds-button--' ~ link_type }}{% endif %}">
            {% if icon_first == true %}<span aria-hidden="true" class="hds-icon {{ 'hds-icon--' ~ icon_first_type }}"></span>{% endif %}
            <span class="hds-button__label">{{ text }}</span>
            {% if link_type == 'supplementary' %}<span aria-hidden="true" class="hds-icon hds-icon--arrow-right"></span>{% endif %}
          </a>
        {% endif %}
      {% endblock %}
    {% endembed %}
  </div>
{% endblock paragraph %}
