{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'image',
    view_mode ? 'image--' ~ view_mode|clean_class,
  ]
%}

{# Check if the image should be printed in original aspect ratio or not #}
{% set original_aspect_ratio = false %}
{% if content.field_original_aspect_ratio[0]['#markup'] == 'true' %}
  {% set original_aspect_ratio = true %}
{% endif %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% embed "@hdbt/misc/container.twig" with {container_element: 'image'} %}
      {% block container_content %}
        <div class="media--image__content">
        {# Check if there is image set and print it with correct aspect ratio #}
        {% if content.field_image|render %}
          {% for key, image in content.field_image %}
            {% if image.entity %}
              {% set media = image.entity %}
              {% set alt = media.fields.field_media_image.alt %}
              {% if original_aspect_ratio %}
                {% set image =
                  drupal_image(media.fields.field_media_image.entity.uri.value, 'original', {alt: alt}, responsive=true)
                %}
              {% else %}
                {% set image =
                  drupal_image(media.fields.field_media_image.entity.uri.value, 'image__3_2', {alt: alt}, responsive=true)
                %}
              {% endif %}
              {{ image }}
            {% endif %}
          {% endfor %}
        {% endif %}
        {% spaceless %}
          <figcaption class="media--image__caption">
            {{ content.field_image_caption }}

            {# The image caption is attached to each image so we need to get it from the media entity #}
            {% if content.field_image|render %}
              {% for key, image in content.field_image %}
                {% if image.entity %}
                {% set media = image.entity %}
                {% set image_caption = media.fields.field_photographer.value %}
                {% if image_caption %}
                  {{ 'Photo:'|trans }} {{ image_caption }}
                {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
          </figcaption>
        {% endspaceless %}
        </div>
      {% endblock %}
    {% endembed %}
  </div>
{% endblock paragraph %}
