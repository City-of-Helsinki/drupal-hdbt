<script>
/* Example listener for cookie consent change events */
window.addEventListener('cookie-consent-changed', function(event) {
  console.log('Got cookie-consent-changed event with accepted groups:',event.detail.acceptedGroups);
});

window.addEventListener('hds-cookie-consent-unapproved-item-found', function(event) {
  console.warn(`Emulating sending to Sentry: Unapproved ${event.detail.type}: `,event.detail.keys, event.detail.consentedGroups);
});
</script>

<script>

function createCookieForDeletion(){
  document.cookie = 'testCookieForDeletion=1; path=/; SameSite=Lax; Secure';
}

function createLocalStorageForDeletion(){
  localStorage.setItem('testLocalStorageForDeletion', 'testLocalStorageForDeletion');
}

function createSessionStorageForDeletion(){
  sessionStorage.setItem('testSessionStorageForDeletion', 'testSessionStorageForDeletion');
}

function createIndexedDbForDeletion(){
  // Open (or create) the database
  let openRequest = indexedDB.open("testDatabaseForDeletion", 1);
  let db;

  openRequest.onupgradeneeded = function(event) {
    // The database did not previously exist, so create object stores and indexes here
    db = event.target.result;
    db.createObjectStore("testObjectStoreForDeletion", {autoIncrement: true});
  };

  openRequest.onsuccess = function(event) {
    // The database has been opened (or created)
    db = event.target.result;

    // Close the database connection, so that it can be deleted
    db.close();
  };

  openRequest.onerror = function(event) {
    console.log("Error opening/creating database: ", event.target.errorCode);
  };
}

// create cache storage for deletion
function createCacheStorageForDeletion(){
  caches.open('testCacheStorageForDeletion');
}

function createAllForDeletion(){
  createCookieForDeletion();
  createLocalStorageForDeletion();
  createSessionStorageForDeletion();
  createIndexedDbForDeletion();
  createCacheStorageForDeletion();
}

</script>

<script>
  (function() {
    const conf = {
      src: '{{ theme_path }}/dist/js/hds-cc.min.js',
      options: {
        siteSettingsJsonUrl: '{{ theme_path }}/src/js/hds-cc/helfi_cookiesettings.json',
        language: '{{current_langcode}}', // Lang code defaults to 'en'
        //targetSelector: 'body', // Defaults to 'body'
        //spacerParentSelector: 'body', // Defaults to 'body'
        //pageContentSelector: 'body', // Defaults to 'body'
        // submitEvent: 'cookie-consent-changed', // If this string is set, triggers a window level event with that string and detail.acceptedGroups before closing banner. If not set, reloads page instead
        settingsPageSelector: '#hds-cookie-consent-full-page', // If this string is set and matching element is found on page, instead of banner, show a full page cookie settings replacing the matched element.
        monitorInterval: 500, // Monitors cookies that JS can see (same domain, not hidden from js) for misconfiguration. Defaults to 500ms, set to 0 to disable monitoring
        remove: true, // If true, will remove unallowed cookies and storage. Defaults to false
        tempCssPath: '{{ theme_path }}/dist/css/cookie-consent.min.css', // TODO: Remove this when the real build process can include css files
      }
    };
    const script = document.createElement('script');
    script.src = conf.src;
    script.onerror = console.error;
    script.onload = () => new window.hds.CookieConsentClass(conf.options);
    document.head.appendChild(script);
  })();
</script>

<!-- HDBT specific stuff -->
<script>
window.chat_user_consent = {
  retrieveUserConsent: () => window.hds.cookieConsent.getConsentStatus(['chat']),
  confirmUserConsent: () => window.hds.cookieConsent.setGroupsStatusToAccepted(['chat']),
}
</script>
