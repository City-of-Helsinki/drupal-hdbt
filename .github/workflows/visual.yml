on:
  pull_request:
  push:
    branches:
      - main
env:
  SIMPLETEST_DB: mysql://drupal:drupal@db:3306/drupal
name: Visual regression tests
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set variables
        run: echo "DRUPAL_ROOT=$HOME/drupal" >> $GITHUB_ENV

      - name: Parse $THEME_NAME from composer.json
        run: echo "THEME_NAME=$(cat composer.json | jq -r .name | awk -F/ '{print $NF}')" >> $GITHUB_ENV

      - name: Set theme folder
        run: echo "THEME_FOLDER=$DRUPAL_ROOT/public/themes/contrib/$THEME_NAME" >> $GITHUB_ENV

      - name: Clone platform
        run: |
          git clone --depth=1 https://github.com/City-of-Helsinki/drupal-helfi-platform.git $DRUPAL_ROOT
          rm -rf $DRUPAL_ROOT/.git

      - name: Install and start Stonehenge
        run: |
          git clone -b 4.x https://github.com/druidfi/stonehenge.git ~/stonehenge
          cd ~/stonehenge && make up

      - name: Build project
        working-directory: ${{ env.DRUPAL_ROOT }}
        env:
          COMPOSER_MIRROR_PATH_REPOS: 1
        run: |
          composer config repositories.5 path $GITHUB_WORKSPACE
          composer require drupal/$THEME_NAME -W
          # We use COMPOSER_MIRROR_PATH_REPOS=1 to mirror local repository
          # instead of symlinking it to make sure the code is available inside
          # the app container.
          cp -r $GITHUB_WORKSPACE/.git $THEME_FOLDER/

      - name: Start project
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: docker compose --profile testing up -d --wait && sleep 5

      - name: Download latest database dump
        id: database-dump
        uses: actions/cache@v4
        with:
          path: ${{ env.DRUPAL_ROOT }}/latest.sql
          key: latest-sql-dump

      - name: Prepare Drupal setup
        working-directory: ${{ env.DRUPAL_ROOT }}
        run: |
          mkdir public/sites/default/files/styles -p && chmod 777 public/sites/default -R

      - name: Install Drupal from scratch
        working-directory: ${{ env.DRUPAL_ROOT }}
        if: steps.database-dump.outputs.cache-hit != 'true'
        run: |
          docker compose exec app bash -c "drush si minimal -y"
          docker compose exec app bash -c "drush en helfi_test_content -y"
          # Save database dump to files folder to prevent permission issues.
          docker compose exec app bash -c "drush sql-dump --result-file=/app/public/sites/default/files/latest.sql"
          mv public/sites/default/files/latest.sql .

      - name: Install Drupal from existing dump
        working-directory: ${{ env.DRUPAL_ROOT }}
        if: steps.database-dump.outputs.cache-hit == 'true'
        run: |
          docker compose exec app bash -c "mysql --user=drupal --password=drupal --database=drupal --host=db --port=3306 -A < latest.sql"
          docker compose exec app bash -c "drush deploy"

#      - name: Node setup
#        working-directory: ${{ env.THEME_FOLDER }}
#        run: |
#          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
#          nvm install && npm install && npx playwright install
#
#      - name: Generate reference images
#        working-directory: ${{ env.THEME_FOLDER }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          gh run download -n bitmaps -D backstop_data/full/bitmaps_reference || true
#
#          if [ ! -d "backstop_data/full/bitmaps_reference" ] || [ "$GITHUB_REF" == "refs/heads/main" ]; then
#            npm run full-reference
#            echo "UPLOAD_BITMAP=1" >> $GITHUB_ENV
#          fi
#
#      - uses: actions/upload-artifact@v4
#        if: ${{ env.UPLOAD_BITMAP == '1' }}
#        with:
#          name: bitmaps
#          path: ${{ env.THEME_FOLDER }}/backstop_data/full/bitmaps_reference
#          overwrite: true
#          compression-level: 0
#
#      - name: Run tests
#        working-directory: ${{ env.THEME_FOLDER }}
#        run: npm run full-test
#
#      - name: Export container logs
#        working-directory: ${{ env.DRUPAL_ROOT }}
#        run: docker compose logs app > /tmp/container.log
#
#      - name: Upload test result
#        uses: actions/upload-artifact@v3
#        if: always()
#        with:
#          name: results
#          path: ${{ env.THEME_FOLDER }}/backstop_data/
#          retention-days: 1
#          compression-level: 0
#
#      - name: Upload container logs
#        uses: actions/upload-artifact@v3
#        if: always()
#        with:
#          name: container-log
#          path: /tmp/container.log
#          retention-days: 1
#
