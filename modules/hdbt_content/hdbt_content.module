<?php

/**
 * @file
 * Contains alterations for content.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_theme().
 */
function hdbt_content_theme() {
  return [
    'header_top_button' => [
      'variables' => [
        'button_title' => NULL,
      ],
    ],
    'footer_top_content' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'hero_block' => [
      'variables' => [
        'title' => NULL,
        'paragraphs' => NULL,
        'is_revision' => NULL,
        'first_paragraph_grey' => NULL,
      ],
    ],
    'lower_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
      ],
    ],
    'sidebar_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
      ],
    ],
    'cookie_consent_intro' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'tpr_errand_service_detail' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'tpr_errand_service_detail_link' => [
      'variables' => [
        'title' => NULL,
        'links' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_language_switch_links_alter().
 */
function hdbt_content_language_switch_links_alter(array &$links) {
  $route_match = Drupal::routeMatch();
  $entity = FALSE;

  // Determine if the current route represents an entity.
  if (
    ($route = $route_match->getRouteObject()) &&
    ($parameters = $route->getOption('parameters'))
  ) {
    foreach ($parameters as $name => $options) {
      if (isset($options['type']) && strpos($options['type'], 'entity:') === 0) {
        $parameter = $route_match->getParameter($name);
        if ($parameter instanceof ContentEntityInterface && $parameter->hasLinkTemplate('canonical')) {
          $entity = $parameter;
          break;
        }
      }
    }
  }

  // @todo Needs a functionality for the alternative languages which should be shown in an alternative menu.
  $alternative_languages = [
    'ru',
  ];

  // Compare the links with current entity and check for possible translations.
  foreach ($links as $lang_code => &$link) {
    $link['#abbreviation'] = $lang_code;

    if (in_array($lang_code, $alternative_languages)) {
      $link['#alternative_language'] = TRUE;
    }

    if ($entity && $entity instanceof ContentEntityInterface) {
      if (
        !$entity->hasTranslation($lang_code) ||
        (
          method_exists($entity->getTranslation($lang_code), 'isPublished') &&
          !$entity->getTranslation($lang_code)->isPublished()
        )
      ) {
        $link['#untranslated'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_content_form_views_exposed_form_alter(&$form, $form_state) {
  // Handle only Unit search view form at this point.
  if (!str_starts_with($form['#id'], 'views-exposed-form-unit-search-block')) {
    return;
  }

  // Get view from form state.
  $view = $form_state->getStorage()['view'];
  [,$paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }

  if ($paragraph->hasField('field_unit_search_meta_button')) {
    $form['actions']['submit']['#value'] = $paragraph
      ->get('field_unit_search_meta_button')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_label')) {
    $form['#info']['filter-combine']['label'] = $paragraph
      ->get('field_unit_search_meta_label')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_placehold')) {
    $form['unit_search']['#attributes']['placeholder'] = $paragraph
      ->get('field_unit_search_meta_placehold')
      ->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_content_preprocess_views_infinite_scroll_pager__unit_search(&$variables) {
  $view = $variables['view'];

  [,$paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }
  $variables['options']['button_text'] = $paragraph
    ->get('field_unit_search_meta_load_more')
    ?->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_content_preprocess_views_infinite_scroll_pager__service_list(&$variables) {
  $view = $variables['view'];

  [,$paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }
  $variables['options']['button_text'] = $paragraph
    ->get('field_service_list_meta_load_mor')
    ?->value;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_content_form_eu_cookie_compliance_block_form_alter(&$form) {
  // Hide 'withdraw' button from EU Cookie compliance block form.
  $form['buttons']['withdraw']['#access'] = FALSE;
}

/**
 * Gets the current page main entity.
 *
 * @return \Drupal\Core\Entity\EntityInterface
 *   Current page main entity.
 */
function hdbt_content_get_page_entity() {
  $page_entity = &drupal_static(__FUNCTION__, NULL);
  if (!empty($page_entity)) {
    return $page_entity;
  }
  $types = array_keys(Drupal::entityTypeManager()->getDefinitions());
  $route = Drupal::routeMatch();
  $page_entity = NULL;
  $params = $route->getParameters()->all();
  foreach ($types as $type) {
    if (!empty($params[$type])) {
      $page_entity = $params[$type];
      return $page_entity;
    }
  }
  return NULL;
}

/**
 * Implements hook_block_access().
 */
function hdbt_content_block_access(Block $block, $operation, AccountInterface $account) {
  // Handle only page title block.
  if ($operation === 'view' && $block->getPluginId() === 'page_title_block') {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = Drupal::service('hdbt_content.entity_version_matcher')->getType()['entity'];

    if (!$entity instanceof ContentEntityInterface || !$entity->hasField('field_has_hero')) {
      return AccessResult::neutral();
    }

    return AccessResult::allowedIf(!boolval($entity->field_has_hero->value))->addCacheableDependency($block);
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_content_preprocess_page(&$variables) {
  $variables['page_has_sidebar'] = FALSE;

  $menu_link_manager = Drupal::service('plugin.manager.menu.link');
  $page_entity = hdbt_content_get_page_entity();

  // Check if the current page entity is content entity ie. Basic page or
  // TRP Service.
  if (!empty($page_entity) && $page_entity instanceof ContentEntityInterface) {

    // Set has_hero variable according to field_has_hero.
    if ($page_entity->hasField('field_has_hero')) {
      $variables['has_hero'] = $page_entity->field_has_hero->value;
    }

    // Handle only Basic page as the TPR Service and TPR Unit has
    // artificial sidebar, not region based as f.e. Basic page.
    if (
      $page_entity instanceof NodeInterface &&
      $page_entity->getType() === 'page'
    ) {

      // Load menu links for the current page entity.
      $menu_links = $menu_link_manager->loadLinksByRoute(
        "entity.{$page_entity->getEntityTypeId()}.canonical",
        [$page_entity->getEntityTypeId() => $page_entity->id()]
      );

      // Add "page_has_sidebar" variable
      // if current node has menu link items set.
      if (!empty($menu_links) && is_array($menu_links)) {
        $menu_Link = reset($menu_links);

        // Set page_has_sidebar value true,
        // if menu link is enabled.
        if ($menu_Link->isEnabled()) {
          $variables['page_has_sidebar'] = TRUE;
          $variables['has_navigation'] = TRUE;
          return;
        }
      }

      // Set page_has_sidebar value true,
      // if page entity has sidebar content field and it is not empty.
      if (
        $page_entity->hasField('field_sidebar_content') &&
        !$page_entity->get('field_sidebar_content')->isEmpty()
      ) {
        $variables['page_has_sidebar'] = TRUE;
      }
    }

    // News item needs to have the sidebar set at all times. Also move the
    // node title to content area with move_berore_content variable.
    if (
      $page_entity instanceof NodeInterface &&
      $page_entity->getType() === 'news_item'
    ) {
      $variables['page_has_sidebar'] = TRUE;
      $variables['move_before_content'] = TRUE;
    }
  }
}
