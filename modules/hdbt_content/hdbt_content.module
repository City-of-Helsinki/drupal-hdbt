<?php

/**
 * @file
 * Contains alterations for content.
 */

use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_theme().
 */
function hdbt_content_theme() {
  return [
    'header_top_button' => [
      'variables' => [
        'button_title' => NULL,
      ],
    ],
    'footer_top_content' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_language_switch_links_alter().
 */
function hdbt_content_language_switch_links_alter(array &$links) {
  $route_match = \Drupal::routeMatch();
  $entity = FALSE;

  // Determine if the current route represents an entity.
  if (
    ($route = $route_match->getRouteObject()) &&
    ($parameters = $route->getOption('parameters'))
  ) {
    foreach ($parameters as $name => $options) {
      if (isset($options['type']) && strpos($options['type'], 'entity:') === 0) {
        $parameter = $route_match->getParameter($name);
        if ($parameter instanceof ContentEntityInterface && $parameter->hasLinkTemplate('canonical')) {
          $entity = $parameter;
          break;
        }
      }
    }
  }

  // @todo Needs a functionality for the alternative languages which should be shown in an alternative menu.
  $alternative_languages = [
    'ru',
  ];

  // Compare the links with current entity and check for possible translations.
  foreach ($links as $lang_code => &$link) {
    $link['#abbreviation'] = $lang_code;

    if (in_array($lang_code, $alternative_languages)) {
      $link['#alternative_language'] = TRUE;
    }

    if ($entity && $entity instanceof ContentEntityInterface) {
      if (
        !$entity->hasTranslation($lang_code) ||
        (
          method_exists($entity->getTranslation($lang_code), 'isPublished') &&
          !$entity->getTranslation($lang_code)->isPublished()
        )
      ) {
        $link['#untranslated'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_content_form_views_exposed_form_alter(&$form, $form_state) {

  // Handle only Unit search view form at this point.
  if ($form['#id'] !== 'views-exposed-form-unit-search-block') {
    return;
  }

  // Get view from form state.
  $view = $form_state->getStorage()['view'];
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  // Apply the cached meta fields values to form values.
  $cached = \Drupal::cache()->get(
    $view->id() .
    $view->current_display .
    $current_language .
    $view->args[0]
  );

  if ($cached) {
    $meta_fields = $cached->data;
    if (!empty($meta_fields['field_unit_search_meta_button'])) {
      $form['actions']['submit']['#value'] = $meta_fields['field_unit_search_meta_button'];
    }
    if (!empty($meta_fields['field_unit_search_meta_label'])) {
      $form['#info']['filter-combine']['label'] = $meta_fields['field_unit_search_meta_label'];
    }
    if (!empty($meta_fields['field_unit_search_meta_placehold'])) {
      $form['unit_search']['#attributes']['placeholder'] = $meta_fields['field_unit_search_meta_placehold'];
    }
  }
}
