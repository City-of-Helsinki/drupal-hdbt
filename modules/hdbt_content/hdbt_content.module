<?php

/**
 * @file
 * Contains alterations for content.
 */

declare(strict_types = 1);

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\helfi_tpr\Entity\Service;
use Drupal\helfi_tpr\Entity\Unit;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_theme().
 */
function hdbt_content_theme() {
  return [
    'header_top_button' => [
      'variables' => [
        'button_title' => NULL,
      ],
    ],
    'footer_top_content' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'hero_block' => [
      'variables' => [
        'title' => NULL,
        'paragraphs' => NULL,
        'is_revision' => NULL,
        'first_paragraph_grey' => NULL,
      ],
    ],
    'lower_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
      ],
    ],
    'sidebar_content_block' => [
      'variables' => [
        'title' => NULL,
        'is_revision' => NULL,
        'paragraphs' => NULL,
      ],
    ],
    'cookie_consent_intro' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'tpr_errand_service_detail' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'tpr_errand_service_detail_link' => [
      'variables' => [
        'title' => NULL,
        'links' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_language_switch_links_alter().
 */
function hdbt_content_language_switch_links_alter(array &$links) {
  $route_match = Drupal::routeMatch();
  $entity = FALSE;

  // Determine if the current route represents an entity.
  if (
    ($route = $route_match->getRouteObject()) &&
    ($parameters = $route->getOption('parameters'))
  ) {
    foreach ($parameters as $name => $options) {
      if (isset($options['type']) && str_starts_with($options['type'], 'entity:')) {
        $parameter = $route_match->getParameter($name);
        if ($parameter instanceof ContentEntityInterface && $parameter->hasLinkTemplate('canonical')) {
          $entity = $parameter;
          break;
        }
      }
    }
  }

  // @todo Needs a functionality for the alternative languages which should be shown in an alternative menu.
  $alternative_languages = [
    'ru',
  ];

  // Compare the links with current entity and check for possible translations.
  foreach ($links as $lang_code => &$link) {
    $link['#abbreviation'] = $lang_code;

    if (in_array($lang_code, $alternative_languages)) {
      $link['#alternative_language'] = TRUE;
    }

    if ($entity && $entity instanceof ContentEntityInterface) {
      if (
        !$entity->hasTranslation($lang_code) ||
        (
          method_exists($entity->getTranslation($lang_code), 'isPublished') &&
          !$entity->getTranslation($lang_code)->isPublished()
        )
      ) {
        $link['#untranslated'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_content_form_views_exposed_form_alter(&$form, $form_state) {
  // Setting high school search form autocompletes to off so that when
  // users returning to the form won't see their previous selections
  // and think that the results match to those because they don't.
  if (str_starts_with($form['#id'], 'views-exposed-form-high-school-search-block')) {
    $form['#attributes']['autocomplete'] = 'off';
    $form['emphasis']['#attributes']['autocomplete'] = 'off';
    $form['mission']['#attributes']['autocomplete'] = 'off';
    $form['type']['#attributes']['autocomplete'] = 'off';
  }

  // Handle only Unit search view form at this point.
  if (!str_starts_with($form['#id'], 'views-exposed-form-unit-search-block')) {
    return;
  }

  // Get view from form state.
  $view = $form_state->getStorage()['view'];
  [, $paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }

  if ($paragraph->hasField('field_unit_search_meta_button')) {
    $form['actions']['submit']['#value'] = $paragraph
      ->get('field_unit_search_meta_button')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_label')) {
    $form['#info']['filter-combine']['label'] = $paragraph
      ->get('field_unit_search_meta_label')
      ->value;
  }

  if ($paragraph->hasField('field_unit_search_meta_placehold')) {
    $form['unit_search']['#attributes']['placeholder'] = $paragraph
      ->get('field_unit_search_meta_placehold')
      ->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_content_preprocess_views_infinite_scroll_pager__unit_search(&$variables) {
  $view = $variables['view'];

  [, $paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }
  $variables['options']['button_text'] = $paragraph
    ->get('field_unit_search_meta_load_more')
    ?->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_content_preprocess_views_infinite_scroll_pager__service_list(&$variables) {
  $view = $variables['view'];

  [, $paragraph_id] = $view->args + [NULL, NULL];

  if (!$paragraph = Paragraph::load($paragraph_id)) {
    return;
  }
  $variables['options']['button_text'] = $paragraph
    ->get('field_service_list_meta_load_mor')
    ?->value;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_content_form_eu_cookie_compliance_block_form_alter(&$form) {
  // Hide 'withdraw' button from EU Cookie compliance block form.
  $form['buttons']['withdraw']['#access'] = FALSE;
}

/**
 * Gets the current page main entity.
 *
 * @return \Drupal\Core\Entity\EntityInterface
 *   Current page main entity.
 */
function hdbt_content_get_page_entity() {
  $page_entity = &drupal_static(__FUNCTION__, NULL);
  if (!empty($page_entity)) {
    return $page_entity;
  }
  $types = array_keys(Drupal::entityTypeManager()->getDefinitions());
  $route = Drupal::routeMatch();
  $params = $route->getParameters()->all();

  foreach ($types as $type) {
    if (!empty($params[$type])) {
      return $params[$type];
    }
  }
  return NULL;
}

/**
 * Implements hook_block_access().
 */
function hdbt_content_block_access(Block $block, $operation, AccountInterface $account) {
  // Handle only page title block.
  if ($operation === 'view' && $block->getPluginId() === 'page_title_block') {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = Drupal::service('hdbt_content.entity_version_matcher')->getType()['entity'];

    if (!$entity instanceof ContentEntityInterface || !$entity->hasField('field_has_hero')) {
      return AccessResult::neutral();
    }

    return AccessResult::allowedIf(!boolval($entity->field_has_hero->value))->addCacheableDependency($block);
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_content_preprocess_tpr_unit(&$variables) {
  if (!isset($variables['view_mode']) || $variables['view_mode'] !== 'full') {
    return;
  }

  // Handle sidebar visibility.
  if (isset($variables['entity']) && $variables['entity'] instanceof Unit) {
    _hdbt_content_handle_sidebar_visibility($variables, $variables['entity']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_content_preprocess_tpr_service(&$variables) {
  if (!isset($variables['view_mode']) || $variables['view_mode'] !== 'full') {
    return;
  }

  // Handle sidebar visibility.
  if (isset($variables['entity']) && $variables['entity'] instanceof Service) {
    _hdbt_content_handle_sidebar_visibility($variables, $variables['entity']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_content_preprocess_page(&$variables) {
  $variables['has_sidebar'] = FALSE;

  // Handle sidebar visibility.
  $entity = hdbt_content_get_page_entity();
  if ($entity instanceof ContentEntityInterface) {

    // Set has_hero variable according to field_has_hero.
    if ($entity->hasField('field_has_hero')) {
      $variables['has_hero'] = $entity->field_has_hero->value;
    }

    // Handle sidebar visibility for the "Standard page" (page)
    // content type.
    if ($entity instanceof NodeInterface && $entity->getType() === 'page') {
      _hdbt_content_handle_sidebar_visibility($variables, $entity);
    }

    // News item needs to have the sidebar set at all times. Also move the
    // node title to content area with move_berore_content variable.
    if ($entity instanceof NodeInterface && $entity->getType() === 'news_item') {
      $variables['has_sidebar'] = TRUE;
      $variables['move_before_content'] = TRUE;
    }
  }
}

/**
 * Handle sidebar visibility based on current entity menu links.
 *
 * @param array $variables
 *   Variables array.
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   Content entity, like tpr_service, tpr_unit or node.
 */
function _hdbt_content_handle_sidebar_visibility(array &$variables, ContentEntityInterface $entity) {
  if (empty($entity)) {
    return;
  }

  $menu_link_manager = Drupal::service('plugin.manager.menu.link');

  // Load menu links for the current page entity.
  $menu_links = $menu_link_manager->loadLinksByRoute(
    "entity.{$entity->getEntityTypeId()}.canonical",
    [$entity->getEntityTypeId() => $entity->id()],
    'main'
  );

  // If there are links, apply "has_sidebar" and "in_menu" variables
  // to indicate twig templates how to render the sidebar.
  if (!empty($menu_links)) {
    $variables['has_sidebar'] = TRUE;
    $variables['in_menu'] = TRUE;
  }

  // Hide the sidebar and menu if the current entity has
  // "hide sidebar navigation" value set.
  if (
    $entity->hasField('hide_sidebar_navigation') &&
    boolval($entity->get('hide_sidebar_navigation')->value)
  ) {
    $variables['has_sidebar'] = FALSE;
    $variables['in_menu'] = FALSE;
  }

  // Check if page entity has sidebar content field available and set
  // "has_sidebar" variable accordingly.
  if (
    $entity->hasField('field_sidebar_content') &&
    !$entity->get('field_sidebar_content')->isEmpty()
  ) {
    $variables['has_sidebar'] = TRUE;
  }
}
