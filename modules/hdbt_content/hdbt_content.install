<?php

/**
 * @file
 * Update hooks for HDBT content and HDBT base theme.
 */

use Drupal\block\Entity\Block;
use Symfony\Component\Yaml\Yaml;

/**
 * Re-import the default config for the theme.
 */
function hdbt_content_update_9001() {
  \Drupal::service('config.installer')->installDefaultConfig('theme', 'hdbt');
}

/**
 * Re-import the default config for the theme.
 */
function hdbt_content_update_9002() {
  \Drupal::service('config.installer')->installDefaultConfig('theme', 'hdbt');
}

/**
 * Uninstall HDBT Hyphenopoly module.
 */
function hdbt_content_update_9003() {
  // Uninstall hdbt_hyphenopoly module if it exists.
  if (Drupal::moduleHandler()->moduleExists('hdbt_hyphenopoly')) {
    Drupal::service('module_installer')->uninstall([
      'hdbt_hyphenopoly',
    ]);
  }
}

/**
 * Manually update HDBT and HDBT Subtheme blocks to follow new region format.
 */
function hdbt_content_update_9004() {
  $theme_handler = Drupal::service('theme_handler');
  $config_factory = \Drupal::configFactory();

  // Handle HDBT theme.
  if ($theme_handler->themeExists('hdbt')) {

    // Update HDBT sidebar navigation block.
    $hdbt_sidebar_navigation = $config_factory->getEditable('block.block.main_navigation_level_2');
    $hdbt_sidebar_navigation_data = $hdbt_sidebar_navigation->getRawData();
    if (!empty($hdbt_sidebar_navigation_data)) {
      $hdbt_sidebar_navigation_data['weight'] = -12;
      $hdbt_sidebar_navigation_data['visibility'] = [];
      $hdbt_sidebar_navigation->setData($hdbt_sidebar_navigation_data)->save(TRUE);
    }

    // Update HDBT heme page title block.
    $hdbt_page_title = $config_factory->getEditable('block.block.hdbt_page_title');
    $hdbt_page_title_data = $hdbt_page_title->getRawData();
    if (!empty($hdbt_page_title_data)) {
      $hdbt_page_title_data['region'] = 'content';
      $hdbt_page_title_data['weight'] = -12;
      $hdbt_page_title_data['visibility'] = [];
      $hdbt_page_title->setData($hdbt_page_title_data)->save(TRUE);
    }

    // Update HDBT theme sidebar content block.
    $hdbt_sidebarcontentblock = $config_factory->getEditable('block.block.sidebarcontentblock');
    $hdbt_sidebarcontentblock_data = $hdbt_sidebarcontentblock->getRawData();
    if (!empty($hdbt_sidebarcontentblock_data)) {
      $hdbt_sidebarcontentblock_data['region'] = 'sidebar_second';
      $hdbt_sidebarcontentblock_data['weight'] = -9;
      $hdbt_sidebarcontentblock_data['visibility'] = [];
      $hdbt_sidebarcontentblock->setData($hdbt_sidebarcontentblock_data)->save(TRUE);
    }

    // Update latest news block.
    $hdbt_views_block__news_latest_news = $config_factory->getEditable('block.block.views_block__news_latest_news');
    $hdbt_views_block__news_latest_news_data = $hdbt_views_block__news_latest_news->getRawData();
    if (!empty($hdbt_views_block__news_latest_news_data)) {
      $hdbt_views_block__news_latest_news_data['region'] = 'sidebar_second';
      $hdbt_views_block__news_latest_news_data['weight'] = -10;
      $hdbt_views_block__news_latest_news->setData($hdbt_views_block__news_latest_news_data)->save(TRUE);
    }
  }

  // Update announcement block.
  $hdbt_announcementsblock = $config_factory->getEditable('block.block.announcements');
  $hdbt_announcementsblock_data = $hdbt_announcementsblock->getRawData();
  if (!empty($hdbt_announcementsblock_data)) {
    $hdbt_announcementsblock_data['region'] = 'before_content';
    $hdbt_announcementsblock_data['weight'] = -12;
    $hdbt_announcementsblock->setData($hdbt_announcementsblock_data)->save(TRUE);
  }

  // Update hero block.
  $hdbt_heroblock = $config_factory->getEditable('block.block.heroblock');
  $hdbt_heroblock_data = $hdbt_heroblock->getRawData();
  if (!empty($hdbt_heroblock_data)) {
    $hdbt_heroblock_data['region'] = 'before_content';
    $hdbt_heroblock_data['weight'] = -11;
    $hdbt_heroblock->setData($hdbt_heroblock_data)->save(TRUE);
  }

  // Handle HDBT Subtheme.
  if ($theme_handler->themeExists('hdbt_subtheme')) {

    // Update HDBT Subtheme sidebar navigation block.
    $hdbt_subtheme_sidebar_navigation = $config_factory->getEditable('block.block.hdbt_subtheme_main_navigation_level_2');
    $hdbt_subtheme_sidebar_navigation_data = $hdbt_subtheme_sidebar_navigation->getRawData();
    if (!empty($hdbt_subtheme_sidebar_navigation_data)) {
      $hdbt_subtheme_sidebar_navigation_data['weight'] = -12;
      $hdbt_subtheme_sidebar_navigation_data['visibility'] = [];
      $hdbt_subtheme_sidebar_navigation->setData($hdbt_subtheme_sidebar_navigation_data)->save(TRUE);
    }

    // Update HDBT Subtheme page title block.
    $hdbt_subtheme_page_title = $config_factory->getEditable('block.block.hdbt_subtheme_page_title');
    $hdbt_subtheme_page_title_data = $hdbt_subtheme_page_title->getRawData();
    if (!empty($hdbt_subtheme_page_title_data)) {
      $hdbt_subtheme_page_title_data['region'] = 'content';
      $hdbt_subtheme_page_title_data['weight'] = -12;
      $hdbt_subtheme_page_title_data['visibility'] = [];
      $hdbt_subtheme_page_title->setData($hdbt_subtheme_page_title_data)->save(TRUE);
    }

    // Update HDBT Subtheme sidebar content block.
    $hdbt_subtheme_sidebarcontentblock = $config_factory->getEditable('block.block.hdbt_subtheme_sidebarcontentblock');
    $hdbt_subtheme_sidebarcontentblock_data = $hdbt_subtheme_sidebarcontentblock->getRawData();
    if (!empty($hdbt_subtheme_sidebarcontentblock_data)) {
      $hdbt_subtheme_sidebarcontentblock_data['region'] = 'sidebar_second';
      $hdbt_subtheme_sidebarcontentblock_data['weight'] = -9;
      $hdbt_subtheme_sidebarcontentblock_data['visibility'] = [];
      $hdbt_subtheme_sidebarcontentblock->setData($hdbt_subtheme_sidebarcontentblock_data)->save(TRUE);
    }

    // Update HDBT Subtheme announcement block.
    $hdbt_subtheme_announcementsblock = $config_factory->getEditable('block.block.hdbt_subtheme_announcements');
    $hdbt_subtheme_announcementsblock_data = $hdbt_subtheme_announcementsblock->getRawData();
    if (!empty($hdbt_subtheme_announcementsblock_data)) {
      $hdbt_subtheme_announcementsblock_data['region'] = 'before_content';
      $hdbt_subtheme_announcementsblock_data['weight'] = -12;
      $hdbt_subtheme_announcementsblock->setData($hdbt_subtheme_announcementsblock_data)->save(TRUE);
    }

    // Update HDBT Subtheme hero block.
    $hdbt_subtheme_heroblock = $config_factory->getEditable('block.block.hdbt_subtheme_heroblock');
    $hdbt_subtheme_heroblock_data = $hdbt_subtheme_heroblock->getRawData();
    if (!empty($hdbt_subtheme_heroblock_data)) {
      $hdbt_subtheme_heroblock_data['region'] = 'before_content';
      $hdbt_subtheme_heroblock_data['weight'] = -11;
      $hdbt_subtheme_heroblock->setData($hdbt_subtheme_heroblock_data)->save(TRUE);
    }
  }
}

/**
 * Add footer top navigation secondary menu.
 */
function hdbt_content_update_9005() {
  $theme_handler = Drupal::service('theme_handler');
  $module_handler = Drupal::service('module_handler');
  $config_factory = \Drupal::configFactory();
  $config_location = dirname(__FILE__, 3) . '/config/install/';

  // Handle configuration updates only if the helfi_navigation module is
  // not enabled.
  if (!$module_handler->moduleExists('helfi_navigation')) {
    $config_name = 'system.menu.footer-top-navigation-2';

    $filepath = "{$config_location}{$config_name}.yml";
    if (file_exists($filepath)) {
      $data = Yaml::parse(file_get_contents($filepath));
      if (is_array($data)) {
        $config_factory->getEditable($config_name)->setData($data)->save(TRUE);
      }
    }

    // Footer top navigation second block title translations.
    $block_translations = [
      'fi' => 'Ota yhteyttÃ¤',
      'sv' => 'Ta kontakt',
    ];

    // Handle HDBT theme.
    if ($theme_handler->themeExists('hdbt')) {
      $config_name = 'block.block.footertopnavigationsecond';

      $filepath = "{$config_location}{$config_name}.yml";
      if (file_exists($filepath)) {
        $data = Yaml::parse(file_get_contents($filepath));
        if (is_array($data) && empty($config_factory->getEditable($config_name)->getRawData())) {
          $config_factory->getEditable($config_name)->setData($data)->save(TRUE);

          hdbt_content_install_block_translations($block_translations, 'block.block.footertopnavigationsecond');

          $hdbt_footertopblock = $config_factory->getEditable('block.block.footertopblock');
          $hdbt_footertopblock_data = $hdbt_footertopblock->getRawData();
          if (!empty($hdbt_footertopblock_data)) {
            $hdbt_footertopblock->delete();
          }
        }
      }
    }

    // Handle HDBT_subtheme theme.
    if ($theme_handler->themeExists('hdbt_subtheme')) {
      $block_configuration = [
        'id' => 'hdbt_subtheme_footertopnavigationsecond',
        'plugin' => 'menu_block_current_language:footer-top-navigation-2',
        'region' => 'footer_top',
        'settings' => [
          'id' => 'menu_block_current_language:footer-top-navigation-2',
          'label' => 'Connect',
          'label_display' => 'visible',
          'provider' => 'helfi_navigation',
          'level' => 1,
          'depth' => 1,
          'expand_all_items' => FALSE,
        ],
        'langcode' => 'en',
        'status' => TRUE,
        'provider' => NULL,
        'theme' => 'hdbt_subtheme',
        'visibility' => [],
        'weight' => 2,
      ];

      if (empty($config_factory->getEditable($block_configuration['id'])->getRawData())) {
        hdbt_content_install_block_translations($block_translations, 'block.block.hdbt_subtheme_footertopnavigationsecond');

        $block = Block::create($block_configuration);
        $block->save();

        $hdbt_subtheme_footertopblock = $config_factory->getEditable('block.block.hdbt_subtheme_footertopblock');
        $hdbt_subtheme_footertopblock_data = $hdbt_subtheme_footertopblock->getRawData();
        if (!empty($hdbt_subtheme_footertopblock_data)) {
          $hdbt_subtheme_footertopblock->delete();
        }
      }
    }
  }
}

/**
 * Install block translations.
 *
 * @param array $translations
 *   Array containing translation strings for Finnish and Swedish.
 * @param string $block_name
 *   Block name as a string.
 */
function hdbt_content_install_block_translations(array $translations, string $block_name) : void {
  foreach (['fi', 'sv'] as $lang_code) {
    /** @var \Drupal\language\Config\LanguageConfigOverride $config_translation */
    $config_translation = \Drupal::languageManager()
      ->getLanguageConfigOverride($lang_code, $block_name);
    $config_translation
      ->setData([
        'settings' => [
          'label' => $translations[$lang_code],
        ],
      ])
      ->save();
  }
}
