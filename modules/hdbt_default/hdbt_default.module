<?php

use Drupal\hdbt_default\Entity\Accordion;
use Drupal\hdbt_default\Entity\AccordionItem;
use Drupal\hdbt_default\Entity\ContactCard;
use Drupal\hdbt_default\Entity\Map;
use Drupal\hdbt_default\Entity\HelMap;
use Drupal\hdbt_default\Entity\ListOfLinksItem;
use Drupal\hdbt_default\Entity\ParagraphRemoteVideo;
use Drupal\hdbt_default\Entity\Phasing;
use Drupal\hdbt_default\Entity\PhasingItem;
use Drupal\hdbt_default\Entity\RemoteVideo;
use Drupal\hdbt_default\Entity\ServiceList;
use Drupal\hdbt_default\Entity\UnitSearch;
use Drupal\hdbt_default\Entity\SocialMediaLink;


function hdbt_default_template_preprocess_default_variables_alter(&$variables) {
  $variables['koro'] = _hdbt_get_settings('koro');
  $variables['theme_color'] = _hdbt_get_settings('theme_color');
  $variables['image_placeholder'] = _hdbt_get_settings('default_icon');
  $language = Drupal::languageManager()->getCurrentLanguage(\Drupal\Core\Language\LanguageInterface::TYPE_CONTENT);
  $variables['current_langcode'] = $language->getId();
  $variables['current_language'] = $language->getName();

  $defaultLanguageResolver = Drupal::service('helfi_api_base.default_language_resolver');
  $variables['alternative_language'] = $defaultLanguageResolver->isAltLanguage($language->getId());

  if ($variables['alternative_language']) {
    $attributes = $defaultLanguageResolver->getFallbackLangAttributes();
    $variables['lang_attributes']['fallback_lang'] = $attributes['lang'];
    $variables['lang_attributes']['fallback_dir'] = $attributes['dir'];
  }

  // Toggle between global and local navigation in twig templates.
  $variables['use_global_navigation'] = \Drupal::moduleHandler()
    ->moduleExists('helfi_navigation');
  $variables['#attached']['drupalSettings']['hdbt']['global_menu'] = \Drupal::moduleHandler()
    ->moduleExists('helfi_navigation');

  // @todo Fix this to be independent block as well.
  $variables['#attached']['drupalSettings']['hdbt']['search_dropdown'] = \Drupal::moduleHandler()
    ->moduleExists('helfi_navigation');

  // Apply override for the theme color.
  if (!empty($theme_color = _hdbt_get_theme_color_override())) {
    $variables['theme_color'] = $theme_color;
  }

  // Add helfi-environment name.
  if (\Drupal::hasService('helfi_api_base.environment_resolver')) {
    try {
      $id = \Drupal::service('helfi_api_base.environment_resolver')
        ->getActiveEnvironment()
        ->getId();
      $variables['#attached']['drupalSettings']['helfi_instance_name'] = $id;
    }
    catch (\Exception $exception) {
    }
  }

  // Required for allowing subtheming for HDBT theme.
  $variables['active_theme'] = $active_theme = \Drupal::theme()->getActiveTheme()->getName();
  $variables['theme_prefix'] = $active_theme !== 'hdbt' ? $active_theme : '';
}

/**
 * Retrieve possible theme color palette override.
 */
function _hdbt_get_theme_color_override(): string|FALSE {
  $color = &drupal_static(__FUNCTION__);

  if (!isset($color)) {
    $color = FALSE;
    if (Drupal::moduleHandler()->moduleExists('hdbt_admin_tools')) {
      $page_entity = hdbt_admin_tools_get_page_entity();
      if (
        !empty($page_entity) &&
        $page_entity instanceof ContentEntityInterface &&
        $page_entity->hasField('color_palette') &&
        !empty($page_entity->color_palette->value)
      ) {
        $color = $page_entity->color_palette->value;
      }
    }
  }
  return $color;
}

function _hdbt_get_settings(string $setting, string $group = 'site_settings'): string|NULL {
  return Drupal::config('hdbt_admin_tools.site_settings')
    ?->getOriginal("$group.$setting", FALSE);
}

/**
 * Helper function to hdbt theme path.
 */
function _hdbt_get_theme_path(): string {
  /** @var \Drupal\Core\File\FileUrlGeneratorInterface $service */
  $service = \Drupal::service('file_url_generator');

  // Add theme path to as variable.
  $theme = \Drupal::service('theme_handler')->getTheme('hdbt');
  return $service->generate($theme->getPath())
    ->toString(TRUE)->getGeneratedUrl();
}

function hdbt_default_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['media'])) {
    $bundles['media']['hel_map']['class'] = HelMap::class;
    $bundles['media']['remote_video']['class'] = RemoteVideo::class;
  }

  if (isset($bundles['paragraph'])) {
    $bundles['paragraph']['accordion']['class'] = Accordion::class;
    $bundles['paragraph']['accordion_item']['class'] = AccordionItem::class;
    $bundles['paragraph']['contact_card']['class'] = ContactCard::class;
    $bundles['paragraph']['list_of_links_item']['class'] = ListOfLinksItem::class;
    $bundles['paragraph']['phasing']['class'] = Phasing::class;
    $bundles['paragraph']['phasing_item']['class'] = PhasingItem::class;
    $bundles['paragraph']['service_list']['class'] = ServiceList::class;
    $bundles['paragraph']['social_media_link']['class'] = SocialMediaLink::class;
    $bundles['paragraph']['unit_search']['class'] = UnitSearch::class;
  }
}
