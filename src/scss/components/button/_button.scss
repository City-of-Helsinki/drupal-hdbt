a.hds-button {
  text-decoration: none;

  // The supplementary button just won't work with the focus and default layout in the left aligned layout
  // so these changes are required to make it look even a bit more decent.
  &.hds-button--supplementary {
    margin: 0;
    padding: 0 $spacing-half 0 0;
    text-decoration: underline;

    .hds-button__label {
      line-height: $spacing-and-half; // To avoid too low link buttons
      margin: 0 0 -#{$spacing-half} 0;
      order: 1;
      padding: $spacing-half;

      &:only-child {
        margin: 0;
      }
    }

    &:before {
      --icon-size: #{$spacing-and-half};
      background-color: var(--color);
      content: "";
      display: inline-block;
      height: var(--icon-size);
      mask-repeat: no-repeat;
      mask-size: var(--icon-size);
      order: 3;
      position: static;
      width: var(--icon-size);
    }

    &:hover {
      text-decoration: none;
    }
  }

  // The hdbt-icon needs additional 8px of margin on the right because the design on hds-buttons includes margin
  // on the right for the icon but hdbt-icons don't get the margin by default.
  &.hds-button--primary,
  &.hds-button--secondary {
    &.hdbt-icon::before {
      margin-right: $spacing;
    }
  }
}

.hds-button--supplementary:not(.hdbt-icon) {
  &:before {
    // Add default icon (arrow icon) for the supplementary button.
    mask-image: icon_url('arrow-right');
  }
}

// In case a button with supplementary style is the first child inside a p-tag we can assume it is next to
// spacing of the element that contains the link so we want to move the supplementary button little bit to the left.
// Example: A button is written inside of a WYSIWYG-element and it is inside its p-tag as first item.
p > a.hds-button.hds-button--supplementary:first-child {
  margin-left: calc(-#{$spacing-half} + (-2px));
}

.emulate-button--primary {
  --border-width: 2px;
  --min-size: 56px;
  --outline-gutter: 2px;
  --outline-width: 3px;
  --background-color: var(--hdbt-color-black);
  --background-color-hover: transparent;
  --background-color-focus: var(--hdbt-color-black);
  --background-color-hover-focus: transparent;
  --border-color: var(--hdbt-color-black);
  --border-color-hover: var(--hdbt-color-black);
  --border-color-focus: var(--hdbt-color-black);
  --border-color-hover-focus: var(--hdbt-color-black);
  --color: var(--color-white);
  --color-hover: var(--hdbt-color-black);
  --color-focus: var(--color-white);
  --color-hover-focus: var(--hdbt-color-black);
  --focus-outline-color: var(--hdbt-color-black);

  @include font-size(16px, 20px);
  align-content: flex-start;
  align-items: center;
  background-color: var(--background-color);
  border: var(--border-width) solid var(--border-color, transparent);
  border-radius: 0;
  box-sizing: border-box;
  color: var(--color);
  cursor: pointer;
  display: flex;
  font-weight: 500;
  justify-content: center;
  min-height: var(--min-size);
  min-width: var(--min-size);
  padding: $spacing $spacing-double;
  position: relative;
  text-align: center;
  text-decoration: none;
  vertical-align: top;

  @include breakpoint($breakpoint-l) {
    display: inline-flex;
  }

  &.hdbt-icon::before {
    margin-left: $spacing;
    margin-right: 0;
  }

  &:after {
    --size: 100%;
    border: var(--outline-width) solid transparent;
    content: "";
    height: var(--size);
    position: absolute;
    width: var(--size);
  }

  &:focus {
    background-color: var(--background-color-focus);
    border-color: var(--border-color-focus);
    color: var(--color-focus);
    outline: none;

    &:after {
      --size: calc(100% + calc(var(--outline-width) * 2 + var(--border-width) * 2 + var(--outline-gutter) * 2));
      border-color: var(--focus-outline-color);
    }

    &:hover {
      background-color: var(--background-color-hover-focus);
      border-color: var(--border-color-hover-focus);
      color: var(--color-hover-focus);
    }
  }

  &:hover {
    background-color: var(--background-color-hover);
    border-color: var(--border-color-hover);
    color: var(--color-hover);
  }
}

.emulate-button--secondary {
  --border-width: 2px;
  --min-size: 56px;
  --outline-gutter: 2px;
  --outline-width: 3px;
  --background-color: transparent;
  --background-color-hover: var(--hdbt-color-black);
  --background-color-focus: transparent;
  --background-color-hover-focus: var(--hdbt-color-black);
  --border-color: var(--hdbt-color-black);
  --border-color-hover: var(--hdbt-color-black);
  --border-color-focus: var(--hdbt-color-black);
  --border-color-hover-focus: var(--hdbt-color-black);
  --color: var(--hdbt-color-black);
  --color-hover: var(--color-white);
  --color-focus: var(--hdbt-color-black);
  --color-hover-focus: var(--color-white);
  --focus-outline-color: var(--hdbt-color-black);

  @include font-size(16px, 20px);
  align-content: flex-start;
  align-items: center;
  background-color: var(--background-color);
  border: var(--border-width) solid var(--border-color, transparent);
  border-radius: 0;
  box-sizing: border-box;
  color: var(--color);
  cursor: pointer;
  display: flex;
  font-weight: 500;
  justify-content: center;
  margin-top: $spacing;
  min-height: var(--min-size);
  min-width: var(--min-size);
  padding: $spacing $spacing-double;
  position: relative;
  text-align: center;
  text-decoration: none;
  vertical-align: top;

  @include breakpoint($breakpoint-l) {
    display: inline-flex;
  }

  &.hdbt-icon::before {
    margin-left: $spacing;
    margin-right: 0;
  }

  &:after {
    --size: 100%;
    border: var(--outline-width) solid transparent;
    content: "";
    height: var(--size);
    position: absolute;
    width: var(--size);
  }

  &:focus {
    background-color: var(--background-color-focus);
    border-color: var(--border-color-focus);
    color: var(--color-focus);
    outline: none;

    &:after {
      --size: calc(100% + calc(var(--outline-width) * 2 + var(--border-width) * 2 + var(--outline-gutter) * 2));
      border-color: var(--focus-outline-color);
    }

    &:hover {
      background-color: var(--background-color-hover-focus);
      border-color: var(--border-color-hover-focus);
      color: var(--color-hover-focus);
    }
  }

  &:hover {
    background-color: var(--background-color-hover);
    border-color: var(--border-color-hover);
    color: var(--color-hover);
  }
}

.hds-button--link {
  --border-width: 2px;
  --min-size: 56px;
  --outline-gutter: 2px;
  --outline-width: 3px;
}

// Set colors for all hds-button--link elements that have color defined via primary, secondary or supplementary modifier
@include hds-button-colors-on-light-bg($class: '.hds-button--link');

.hds-button .explain-external-icon {
  @include visually-hidden();
}
