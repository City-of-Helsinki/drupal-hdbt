// Use Dart Sass math module to perform calculations.
// https://sass-lang.com/documentation/modules/math
@use 'sass:math';

////
// To give different styles depending on how many items a wrapper has you can use this mixing to assign the styles
// to correct element. For example:

// If the wrapper has 1, 2 or 3 items make the items 30% wide, otherwise they should be 20% wide:
// .wrapper .item {
//   width: 20%;

//   @include content_count(1, 2, 3) {
//     width: 30%;
//   }
// }
////
@mixin content_count($number_of_items...) {
  @each $item in $number_of_items {
    @if type-of($item) == number {
      @for $i from 1 through $item {
        &:nth-child(#{$i}):nth-last-child(#{$item - $i + 1}) {
          @content;
        }
      }
    }
  }
}

////
// Allow changing icon easily on hover, etc.
// usage:
// @include pseudo-icon-replace('email');
////
@mixin pseudo-icon-replace( $icon ) {
  mask-image: icon_url($icon);
}

////
// Add pseudo element (::before, ::after) styling for icons
// usage:
// @include pseudo-icon('share', var(--icon-size), $color-black, inline-block);
////
@mixin pseudo-icon($icon, $size: var(--icon-size, calc(var(--line-height) * 1em)), $color: $color-black, $display: inline-block) {
  background-color: $color;
  background-size: contain;
  content: '';
  display: $display;
  height: $size;
  mask-image: icon_url($icon);
  mask-position: center;
  mask-repeat: no-repeat;
  mask-size: #{$size} #{$size};
  vertical-align: bottom;
  width: $size;
}

////
// Mixin to change element to be visually hidden, only visible to screenreaders, etc.
////
@mixin visually-hidden() {
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  max-height: 1px;
  max-width: 1px;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
}

// TODO: replace with native flex gap once enough users have moved to > ios 14.4
@mixin flex-gap($gap) {
  margin-left: -$gap * 0.5;
  margin-right: -$gap * 0.5;

  & > * {
    margin-left: $gap * 0.5;
    margin-right: $gap * 0.5;
  }
}

// This sets smart defaults for image element, but allows overriding each property where needed
@mixin image-defaults($display: block, $height: auto, $max-width: 100%, $overflow: hidden, $width: null) {
  display: $display; // The default 'block' will fix inline images having extra space below them
  height: $height; // The default 'auto' will allow image original aspect ratio to set image space while loading and after
  max-width: $max-width; // The default '100%' will limit image to parent width
  overflow: $overflow; // The default 'hidden' will hide alt-text that flows outside from image area
  width: $width; // The default 'null' will disable this, but allow overriding it
}

@mixin loading-image-background() {
  box-shadow: inset 0 0 0 1px $color-black-10;
}
