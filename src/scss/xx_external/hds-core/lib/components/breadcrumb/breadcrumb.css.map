{"version":3,"sources":["../../../src/utils/_bem.scss","../../../src/components/breadcrumb/breadcrumb.scss","../../../src/components/breadcrumb/_breadcrumb-mixin.scss"],"names":[],"mappings":"AAoFM;ECnFN,qDCEE;EACA,oDAAA;EACA,mDAAA;EACA,oDAAA;EACA,mDAAA;EAEA,aAAA;EACA,kCAAA;EACA,2BAAA;ADFF;ACIE;EACE,mBAAA;EACA,mBAAA;EACA,qBAAA;ADFJ;ACII;EACE,mBAAA;EACA,aAAA;EACA,gCAAA;ADFN;ACME;EACE,0BAAA;EACA,mCAAA;ADJJ;ACQI;EAEE,oDAAA;EACA,4CAAA;ADPN;ACWE;EACE,oBAAA;EAEA,2CAAA;EACA,iBAAA;EACA,kBAAA;EAEA,6BAAA;ADXJ;ACcE;EACE,oBAAA;EACA,iCAAA;EAEA,6BAAA;ADbJ;ACgBE;EF6BI;IE5BF,oDAAA;EDbF;AACF;ACeE;EFyBI;IExBF,mDAAA;EDZF;AACF;ACcE;EFqBI;IEpBF,qDAAA;EDXF;AACF;ACiBM;EACE,gBAAA;EAEA,qCAAA;EACA,YAAA;ADfR;ACuBI;EACE,aAAA;ADpBN;ACsBM;EACE,iCAAA;ADpBR;ACyBE;EAEI;IACE,aAAA;EDxBN;AACF;AC+BI;EACE,aAAA;AD5BN;ACgCE;EAEI;IACE,aAAA;IACA,eAAA;IACA,gBAAA;IACA,SAAA;IACA,UAAA;ED/BN;AACF","file":"breadcrumb.css","sourcesContent":["@use \"sass:string\";\n\n$blockPrefix: 'hds-';\n$modifierDelimeter: '--';\n$elementDelimeter: '__';\n\n// Copied from https://github.com/Shudrum/sass-easy-bem\n// The module was added to root/node_modules, so SASS cannot find it from core.\n\n// Copyright (c) 2018-2019 Julien Martin.\n// This source code is licensed under the MIT license found in the\n// LICENSE file in the root directory of this source tree.\n\n// Utility functions\n\n@function get-parent-selector($selector) {\n  $parent: null;\n\n  @while string.index('#{$selector}', ' ') {\n    $first-element: string.slice('#{$selector}', 0, string.index('#{$selector}', ' ') - 1);\n\n    @if $parent {\n      $parent: '#{$parent} #{$first-element}';\n    } @else {\n      $parent: $first-element;\n    }\n\n    $selector: string.slice('#{$selector}', string.index('#{$selector}', ' ') + 1);\n  }\n\n  @return $parent;\n}\n\n@function get-last-selector($selector) {\n  @while string.index('#{$selector}', ' ') {\n    $selector: string.slice('#{$selector}', string.index('#{$selector}', ' ') + 1);\n  }\n\n  @return $selector;\n}\n\n@function get-block($selector) {\n  $have-element: string.index('#{&}', $elementDelimeter);\n  $have-modifier: string.index('#{&}', $modifierDelimeter);\n\n  @if $have-element {\n    @return string.slice('#{$selector}', 0, string.index('#{&}', $elementDelimeter) - 1);\n  }\n\n  @if $have-modifier {\n    @return string.slice('#{$selector}', 0, string.index('#{&}', $modifierDelimeter) - 1);\n  }\n\n  @return $selector;\n}\n\n@function get-element($selector) {\n  $have-modifier: string.index('#{$selector}', $modifierDelimeter);\n\n  @if $have-modifier {\n    $selector: string.slice('#{$selector}', 0, string.index('#{$selector}', $modifierDelimeter) - 1);\n\n    @while string.index(string.slice('#{$selector}', 2), '.') {\n      $selector: string.slice('#{$selector}', string.index(string.slice('#{$selector}', 2), '.') + 1);\n    }\n  }\n\n  @return $selector;\n}\n\n// prefix added by HDS\n// use for creating classes like .hds-<$block>\n// set $noPrefix to false to create classes like .-<$block>\n@mixin block($block, $noPrefix: false, $react: false) {\n  $className: $block;\n\n  @if not($noPrefix) {\n    $className: #{$blockPrefix + $block};\n  }\n\n  @if $react {\n    @content;\n  } @else {\n    @at-root {\n      .#{$className} {\n        @content;\n      }\n    }\n  }\n}\n\n// use inside block() or another element() to create scoped classes like .hds-<block>.hds-<block>__<$element>\n@mixin element($element) {\n  $is-modifier: string.index('#{&}', $modifierDelimeter);\n  // stylelint-disable-next-line scss/function-no-unknown\n  $block: get-block(&);\n\n  @if not $is-modifier {\n    @at-root {\n      #{$block}__#{$element} {\n        @content;\n      }\n    }\n  }\n\n  @if $is-modifier {\n    $is-element: string.index('#{&}', $elementDelimeter);\n\n    @if $is-element {\n      $block: string.slice('#{&}', 0, string.index('#{&}', $elementDelimeter) - 1);\n\n      @at-root {\n        & #{$block}__#{$element} {\n          @content;\n        }\n      }\n    }\n\n    @if not $is-element {\n      $block: string.slice('#{&}', 0, string.index('#{&}', $modifierDelimeter) - 1);\n      $block: string.slice($block, 1, string.index(string.slice($block, 2, -1), '.'));\n\n      @at-root {\n        & #{$block}__#{$element} {\n          @content;\n        }\n      }\n    }\n  }\n}\n\n// use inside block() or element() to create scoped classes like .hds-<block>.hds-<block>--<$modifier>\n@mixin modifier($modifier) {\n  $parent-selector: get-parent-selector('#{&}');\n  $last-selector: get-last-selector('#{&}');\n  // stylelint-disable-next-line scss/function-no-unknown\n  $element: get-element($last-selector);\n\n  @at-root {\n    @if $parent-selector {\n      #{$parent-selector} #{$last-selector}#{$element}#{$modifierDelimeter}#{$modifier} {\n        @content;\n      }\n    } @else {\n      #{$last-selector}#{$element}#{$modifierDelimeter}#{$modifier} {\n        @content;\n      }\n    }\n  }\n}\n\n// end of sass-easy-bem\n\n// HDS add-on to create .hds-<block>--modifier instead of .hds-<block>.hds-<block>--modifier\n@mixin unscopedModifier($block, $modifier, $react: false) {\n  @if $react {\n    @content;\n  } @else {\n    @at-root {\n      .#{$blockPrefix + $block}#{$modifierDelimeter}#{$modifier} {\n        @content;\n      }\n    }\n  }\n}\n\n// HDS add-on to create .hds-<block>__element instead of .hds-<block>.hds-<block>__element\n@mixin unscopedElement($block, $element, $react: false) {\n  @if $react {\n    @content;\n  } @else {\n    @at-root {\n      .#{$blockPrefix + $block}#{$elementDelimeter}#{$element} {\n        @content;\n      }\n    }\n  }\n}\n\n// HDS add-on to create .hds-<block>--modifier.hds-<block>--theme {\n@mixin unscopedModifierWithTheme($block, $modifier, $theme, $react: false) {\n  @if $react {\n    @content;\n  } @else {\n    @at-root {\n      .#{$blockPrefix + $block}#{$modifierDelimeter}#{$modifier}.#{$blockPrefix + $block}#{$modifierDelimeter}#{$theme} {\n        @content;\n      }\n    }\n  }\n}","@use './breadcrumb-mixin' as *;\n@include breadcrumb;\n","@use '../../utils/bem' as BemUtil;\n\n@mixin base {\n  --horizontal-margin-small: var(--spacing-layout-2-xs);\n  --horizontal-margin-medium: var(--spacing-layout-xs);\n  --horizontal-margin-large: var(--spacing-layout-xs);\n  --horizontal-margin-x-large: var(--spacing-layout-s);\n  --horizontal-margin: var(--horizontal-margin-small);\n\n  display: flex;\n  margin: 0 var(--horizontal-margin);\n  padding: var(--spacing-s) 0;\n\n  &__list {\n    align-items: center;\n    flex-direction: row;\n    word-wrap: break-word;\n\n    &-item {\n      align-items: center;\n      display: flex;\n      line-height: var(--lineheight-l);\n    }\n  }\n\n  &__link#{&}__link {\n    --link-visited-color: none;\n    --link-color: var(--color-black-90);\n  }\n\n  &__link {\n    &:hover,\n    &:focus {\n      -webkit-text-decoration-color: var(--color-black-90);\n      text-decoration-color: var(--color-black-90);\n    }\n  }\n\n  &__back-arrow#{&}__back-arrow {\n    display: inline-flex;\n\n    /* compensate the white space in the icon */\n    margin-left: -5px;\n    margin-right: -3px;\n\n    --icon-size: var(--spacing-m);\n  }\n\n  &__separator#{&}__separator {\n    display: inline-flex;\n    padding-left: var(--spacing-3-xs);\n\n    --icon-size: var(--spacing-s);\n  }\n\n  @media (min-width: 768px) {\n    --horizontal-margin: var(--horizontal-margin-medium);\n  }\n\n  @media (min-width: 992px) {\n    --horizontal-margin: var(--horizontal-margin-large);\n  }\n\n  @media (min-width: 1248px) {\n    --horizontal-margin: var(--horizontal-margin-x-large);\n  }\n}\n\n@mixin active {\n  &__list {\n    &-item {\n      &--active {\n        font-weight: 700;\n\n        /* to match 3px border around links */\n        padding: 3px;\n      }\n    }\n  }\n}\n\n@mixin mobile {\n  &__list {\n    &--mobile {\n      display: flex;\n\n      #{BemUtil.get-block(&)}__link {\n        font-size: var(--fontsize-body-l);\n      }\n    }\n  }\n\n  @media (min-width: 768px) {\n    &__list {\n      &--mobile {\n        display: none;\n      }\n    }\n  }\n}\n\n@mixin desktop {\n  &__list {\n    &--desktop {\n      display: none;\n    }\n  }\n\n  @media (min-width: 768px) {\n    &__list {\n      &--desktop {\n        display: flex;\n        flex-wrap: wrap;\n        list-style: none;\n        margin: 0;\n        padding: 0;\n      }\n    }\n  }\n}\n\n@mixin breadcrumb(\n  $all: true,\n  $base: false,\n  $active: false,\n  $mobile: false,\n  $desktop: false,\n  $override: null,\n  $react: false\n) {\n  $className: 'breadcrumb';\n\n  @if $override {\n    $className: $override;\n  }\n\n  @if $all or $base {\n    @include BemUtil.block($className, if($override, true, false), $react) {\n      @include base;\n    }\n  }\n\n  @if $all or $active {\n    @include BemUtil.block($className, if($override, true, false), $react) {\n      @include active;\n    }\n  }\n\n  @if $all or $mobile {\n    @include BemUtil.block($className, if($override, true, false), $react) {\n      @include mobile;\n    }\n  }\n\n  @if $all or $desktop {\n    @include BemUtil.block($className, if($override, true, false), $react) {\n      @include desktop;\n    }\n  }\n}\n"]}