{"version":3,"sources":["../../../src/utils/_bem.scss","../../../src/components/status-label/status-label.scss","../../../src/components/status-label/_status-label-mixin.scss"],"names":[],"mappings":"AAoFM,kBCnFN,+CCEE,CACA,0CAAA,CACA,0BAAA,CAEA,+CAAA,CACA,kBAAA,CACA,+BAAA,CACA,oBAAA,CACA,gCAAA,CACA,sCAAA,CACA,qCAAA,CACA,6BAAA,CACA,qBDFF,CDkJM,6BEvIJ,kBAAA,CACA,mBAAA,CACA,gCDPF,CCuEM,uBA5DJ,uBAAA,CACA,gCAAA,CACA,sBDPF,CDsIM,wBE3HJ,2CAAA,CACA,uCDPF,CDiIM,2BEtHJ,8CAAA,CACA,uCDPF,CD4HM,yBEjHJ,4CDPF,CDwHM,yBE5IJ,4CAAA,CACA,uCDwBF","file":"status-label.min.css","sourcesContent":["@use \"sass:string\";\n\n$blockPrefix: 'hds-';\n$modifierDelimeter: '--';\n$elementDelimeter: '__';\n\n// Copied from https://github.com/Shudrum/sass-easy-bem\n// The module was added to root/node_modules, so SASS cannot find it from core.\n\n// Copyright (c) 2018-2019 Julien Martin.\n// This source code is licensed under the MIT license found in the\n// LICENSE file in the root directory of this source tree.\n\n// Utility functions\n\n@function get-parent-selector($selector) {\n  $parent: null;\n\n  @while string.index('#{$selector}', ' ') {\n    $first-element: string.slice('#{$selector}', 0, string.index('#{$selector}', ' ') - 1);\n\n    @if $parent {\n      $parent: '#{$parent} #{$first-element}';\n    } @else {\n      $parent: $first-element;\n    }\n\n    $selector: string.slice('#{$selector}', string.index('#{$selector}', ' ') + 1);\n  }\n\n  @return $parent;\n}\n\n@function get-last-selector($selector) {\n  @while string.index('#{$selector}', ' ') {\n    $selector: string.slice('#{$selector}', string.index('#{$selector}', ' ') + 1);\n  }\n\n  @return $selector;\n}\n\n@function get-block($selector) {\n  $have-element: string.index('#{&}', $elementDelimeter);\n  $have-modifier: string.index('#{&}', $modifierDelimeter);\n\n  @if $have-element {\n    @return string.slice('#{$selector}', 0, string.index('#{&}', $elementDelimeter) - 1);\n  }\n\n  @if $have-modifier {\n    @return string.slice('#{$selector}', 0, string.index('#{&}', $modifierDelimeter) - 1);\n  }\n\n  @return $selector;\n}\n\n@function get-element($selector) {\n  $have-modifier: string.index('#{$selector}', $modifierDelimeter);\n\n  @if $have-modifier {\n    $selector: string.slice('#{$selector}', 0, string.index('#{$selector}', $modifierDelimeter) - 1);\n\n    @while string.index(string.slice('#{$selector}', 2), '.') {\n      $selector: string.slice('#{$selector}', string.index(string.slice('#{$selector}', 2), '.') + 1);\n    }\n  }\n\n  @return $selector;\n}\n\n// prefix added by HDS\n// use for creating classes like .hds-<$block>\n// set $noPrefix to false to create classes like .-<$block>\n@mixin block($block, $noPrefix: false, $react: false) {\n  $className: $block;\n\n  @if not($noPrefix) {\n    $className: #{$blockPrefix + $block};\n  }\n\n  @if $react {\n    @content;\n  } @else {\n    @at-root {\n      .#{$className} {\n        @content;\n      }\n    }\n  }\n}\n\n// use inside block() or another element() to create scoped classes like .hds-<block>.hds-<block>__<$element>\n@mixin element($element) {\n  $is-modifier: string.index('#{&}', $modifierDelimeter);\n  // stylelint-disable-next-line scss/function-no-unknown\n  $block: get-block(&);\n\n  @if not $is-modifier {\n    @at-root {\n      #{$block}__#{$element} {\n        @content;\n      }\n    }\n  }\n\n  @if $is-modifier {\n    $is-element: string.index('#{&}', $elementDelimeter);\n\n    @if $is-element {\n      $block: string.slice('#{&}', 0, string.index('#{&}', $elementDelimeter) - 1);\n\n      @at-root {\n        & #{$block}__#{$element} {\n          @content;\n        }\n      }\n    }\n\n    @if not $is-element {\n      $block: string.slice('#{&}', 0, string.index('#{&}', $modifierDelimeter) - 1);\n      $block: string.slice($block, 1, string.index(string.slice($block, 2, -1), '.'));\n\n      @at-root {\n        & #{$block}__#{$element} {\n          @content;\n        }\n      }\n    }\n  }\n}\n\n// use inside block() or element() to create scoped classes like .hds-<block>.hds-<block>--<$modifier>\n@mixin modifier($modifier) {\n  $parent-selector: get-parent-selector('#{&}');\n  $last-selector: get-last-selector('#{&}');\n  // stylelint-disable-next-line scss/function-no-unknown\n  $element: get-element($last-selector);\n\n  @at-root {\n    @if $parent-selector {\n      #{$parent-selector} #{$last-selector}#{$element}#{$modifierDelimeter}#{$modifier} {\n        @content;\n      }\n    } @else {\n      #{$last-selector}#{$element}#{$modifierDelimeter}#{$modifier} {\n        @content;\n      }\n    }\n  }\n}\n\n// end of sass-easy-bem\n\n// HDS add-on to create .hds-<block>--modifier instead of .hds-<block>.hds-<block>--modifier\n@mixin unscopedModifier($block, $modifier, $react: false) {\n  @if $react {\n    @content;\n  } @else {\n    @at-root {\n      .#{$blockPrefix + $block}#{$modifierDelimeter}#{$modifier} {\n        @content;\n      }\n    }\n  }\n}\n\n// HDS add-on to create .hds-<block>__element instead of .hds-<block>.hds-<block>__element\n@mixin unscopedElement($block, $element, $react: false) {\n  @if $react {\n    @content;\n  } @else {\n    @at-root {\n      .#{$blockPrefix + $block}#{$elementDelimeter}#{$element} {\n        @content;\n      }\n    }\n  }\n}\n\n// HDS add-on to create .hds-<block>--modifier.hds-<block>--theme {\n@mixin unscopedModifierWithTheme($block, $modifier, $theme, $react: false) {\n  @if $react {\n    @content;\n  } @else {\n    @at-root {\n      .#{$blockPrefix + $block}#{$modifierDelimeter}#{$modifier}.#{$blockPrefix + $block}#{$modifierDelimeter}#{$theme} {\n        @content;\n      }\n    }\n  }\n}","@use './status-label-mixin' as *;\n@include status-label;\n","@use '../../utils/bem' as BemUtil;\n\n@mixin base {\n  --status-label-background: var(--color-black-10);\n  --status-label-color: var(--color-black-90);\n  --status-label-height: 32px;\n\n  background-color: var(--status-label-background);\n  border-radius: 20px;\n  color: var(--status-label-color);\n  display: inline-block;\n  font-size: var(--fontsize-body-s);\n  line-height: var(--status-label-height);\n  min-height: var(--status-label-height);\n  padding: 0 var(--spacing-2-xs);\n  vertical-align: middle;\n}\n\n@mixin error {\n  --status-label-background: var(--color-error);\n  --status-label-color: var(--color-white);\n}\n\n@mixin withIcon {\n  align-items: center;\n  display: inline-flex;\n  padding-left: var(--spacing-3-xs);\n}\n\n@mixin icon {\n  height: var(--spacing-m);\n  margin-right: var(--spacing-3-xs);\n  width: var(--spacing-m);\n}\n\n@mixin info {\n  --status-label-background: var(--color-info);\n  --status-label-color: var(--color-white);\n}\n\n@mixin success {\n  --status-label-background: var(--color-success);\n  --status-label-color: var(--color-white);\n}\n\n@mixin alert {\n  --status-label-background: var(--color-alert);\n}\n\n@mixin status-label(\n  $all: true,\n  $base: false,\n  $icon: false,\n  $withIcon: false,\n  $info: false,\n  $error: false,\n  $alert: false,\n  $success: false,\n  $override: null,\n  $react: false\n) {\n  $className: 'status-label';\n\n  @if $override {\n    $className: $override;\n  }\n\n  @if $all or $base {\n    @include BemUtil.block($className, if($override, true, false), $react) {\n      @include base;\n    }\n  }\n\n  @if $all or $withIcon {\n    @include BemUtil.unscopedModifier($className, 'with-icon', $react) {\n      @include withIcon;\n    }\n  }\n\n  @if $all or $icon {\n    $iconClassName: 'hds-status-label-icon';\n\n    @if $override {\n      $iconClassName: $override;\n    }\n\n    @if $react {\n      @include icon;\n    } @else {\n      // the original, pre-sass css had \"-icon\" which is not bem compliant, so manually created same\n      .#{$iconClassName} {\n        @include icon;\n      }\n    }\n  }\n\n  @if $all or $info {\n    @include BemUtil.unscopedModifier($className, 'info', $react) {\n      @include info;\n    }\n  }\n\n  @if $all or $success {\n    @include BemUtil.unscopedModifier($className, 'success', $react) {\n      @include success;\n    }\n  }\n\n  @if $all or $alert {\n    @include BemUtil.unscopedModifier($className, 'alert', $react) {\n      @include alert;\n    }\n  }\n\n  @if $all or $error {\n    @include BemUtil.unscopedModifier($className, 'error', $react) {\n      @include error;\n    }\n  }\n}\n"]}