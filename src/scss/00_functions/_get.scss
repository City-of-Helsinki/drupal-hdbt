/* stylelint-disable scss/comment-no-empty */
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "sass:list";

// https://itnext.io/advanced-use-of-sass-maps-bd5a47ca0d1a

// ---------------------------------------------------------
// get
// Search for any value contained within nested maps, by using
// dot notation as the key argument
//
// Required arguments:
// `$key` String
//
// Example of use:
// get('font.h2.font-size')
//
// Dependencies:
// deep-map-check, deep-map-get, str-explode
//
// @return Anything
// ---------------------------------------------------------
@function get($key, $map: $config) {
  $keys: str-explode($key, '.');

  @if not deep-map-check($map, $keys...) {
    @error 'The argument $map: `#{$map}` doesn\'t has some of the $keys: `#{$keys}`!';
  }

  @return deep-map-get($map, $keys...);
}

// ---------------------------------------------------------
// get-check
// Check for any value contained within nested maps, by using
// dot notation as the key argument
//
// Required arguments:
// `$key` String
//
// Example of use:
// get-check('font.h2.font-size')
//
// Dependencies:
// deep-map-check, str-explode
//
// @return Bool
// ---------------------------------------------------------
@function get-check($key, $map: $config) {
  $keys: str-explode($key, '.');

  @return deep-map-check($map, $keys...);
}

// ---------------------------------------------------------
// str-explode
// Split a string by delimiter
//
// Required arguments:
// `$string` String
// `$delimiter` String *predefined*
//
// Example of use:
// str-explode('some-things-will-never-change', '-')
//
// @return List
// ---------------------------------------------------------
@function str-explode($string, $delimiter: '') {
  @if meta.type-of($string) != 'string' {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  }
  @else if meta.type-of($delimiter) != 'string' {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  }

  $result: ();
  $running: true;

  @if string.length($delimiter) == 0 {
    @for $i from 1 through string.length($string) {
      $result: list.append($result, string.slice($string, $i, $i));
    }

    @return $result;
  }

  @while $running {
    $index: string.index($string, $delimiter);

    /* stylelint-disable-next-line scss/at-if-no-null */
    @if $index != null {
      $item: string.slice($string, 1, ($index - 1));
      $result: list.append($result, $item);
      $string: string.slice($string, ($index + string.length($delimiter)));
    } @else {
      $running: false;
    }
  }

  @return list.append($result, $string);
}

// ---------------------------------------------------------
// deep-map-check
// Check if nested map has a value by the keys
//
// Required arguments:
// `$map` Map
// `$keys` String(s)
//
// Example of use:
// deep-map-check($nested-map, 'key-1', 'key-2')
//
// @return Bool
// ---------------------------------------------------------
@function deep-map-check($map, $keys...) {
  @if meta.type-of($map) != 'map' {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
    @if not map.has-key($map, $key) {
      @return false;
    }

    $map: map.get($map, $key);
  }

  @return true;
}

// ---------------------------------------------------------
// deep-map-get
// Get a value from nested map by the keys
//
// Required arguments:
// `$map` Map
// `$keys` String(s)
//
// Example of use:
// deep-map-get($dfr-spacing, 'xs', 'y')
//
// @return Unspecified (it may return anything as a result)
// ---------------------------------------------------------
@function deep-map-get($map, $keys...) {
  @if meta.type-of($map) != 'map' {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
    $map: map.get($map, $key);
  }

  @return $map;
}
